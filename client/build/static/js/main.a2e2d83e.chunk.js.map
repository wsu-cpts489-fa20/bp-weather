{"version":3,"sources":["AppMode.js","components/NavBar.js","components/SideMenu.js","components/ModeBar.js","components/ConfirmDeleteAccount.js","components/CreateEditAccountDialog.js","components/ResetPasswordDialog.js","components/LookUpAccountDialog.js","components/SecurityQuestionDialog.js","components/LoginPage.js","components/WeatherStation.js","components/FeedPage.js","components/ConfirmDeleteRound.js","components/RoundsTable.js","components/RoundForm.js","components/FloatingButton.js","components/Rounds.js","components/CoursesPage.js","components/AboutBox.js","components/App.js","serviceWorker.js","index.js"],"names":["AppMode","LOGIN","FEED","ROUNDS","ROUNDS_LOGROUND","ROUNDS_EDITROUND","COURSES","Object","freeze","NavBar","getMenuBtnIcon","props","mode","menuOpen","handleMenuBtnClick","changeMode","toggleMenuOpen","className","onClick","this","id","src","alt","height","width","title","React","Component","SideMenu","renderModeMenuItems","profilePicURL","displayName","localAccount","editAccount","showAbout","logOut","ModeBar","ConfirmDeleteAccount","handleChange","match","emailRef","current","value","email","state","emailMatches","setState","createRef","focus","role","close","type","ref","onChange","deleteAccount","disabled","CreateEditAccountDialog","checkDataValidity","password","passwordRepeat","repeatPassRef","setCustomValidity","event","formUpdated","origAccountInfo","formIsUpdated","target","name","length","self","reader","FileReader","readAsDataURL","profilePicRef","files","addEventListener","result","updateField","updateVal","securityQuestion","securityAnswer","setDefaultDisplayName","handleSubmit","a","preventDefault","userData","url","accountName","create","fetch","headers","method","body","JSON","stringify","res","status","done","text","resText","confirmDelete","confirmDeleteAccount","e","newUserRef","userId","json","parse","cancel","onSubmit","autocomplete","size","placeholder","pattern","required","onBlur","accept","profilePic","profilePicDataURL","rows","cols","maxLength","ResetPasswordDialog","resetPasswordRef","resetPasswordRepeatRef","resetPassword","errorMsg","checkForSubmit","code","cancelResetPassword","onKeyUp","LookUpAccountDialog","handleLookUpAccount","response","obj","authStrategy","getSecurityAnswer","ErrMsg","errMsg","SecurityQuestionDialog","securityAnswerRef","answer","getNewPassword","readOnly","question","LoginPage","handleLoginSubmit","loginBtnIcon","loginBtnLabel","emailInputRef","passwordInputRef","window","open","statusMsg","accountCreateDone","msg","showCreateAccountDialog","cancelCreateAccount","resetUserId","resetQ","resetA","showLookUpAccountDialog","showSecurityQuestionDialog","showResetPaswordDialog","handleOAuthLogin","provider","handleOAuthLoginClick","setTimeout","pw","showResetPasswordDialog","deleted","closeStatusMsg","githubIcon","githubLabel","loginMsg","newAccountCreated","htmlFor","style","padding","fontSize","require","config","WeatherStation","componentDidMount","getCurrentObservations","console","log","latitude","longitude","currWeather","place","retrieved","Date","toLocaleDateString","toLocaleTimeString","conditions","weather","main","visibility","visibilityUnit","temp","Math","round","tempUnit","humidity","wind","speed","deg","toggleUnits","units","parseFloat","toFixed","windUnit","align","moveStation","stationId","removeStation","windDirection","windDirectionUnit","FeedPage","initialFire","savedStation","loadStations","navigator","geolocation","getCurrentPosition","getLocSuccess","getLocError","position","stations","lat","lon","stationCount","err","addStation","newStation","prompt","stationData","hasOwnProperty","newStations","push","coord","writeStations","alert","bind","ids","lats","longs","thisUser","localStorage","getItem","data","thisStation","i","weatherStations","weatherStationCount","setItem","splice","direction","x","y","keyid","Number","key","ConfirmDeleteRound","deleteRound","RoundsTable","editRound","setEditId","showConfirmDelete","setDeleteId","renderTable","table","r","rounds","date","substring","course","strokes","minutes","seconds","keys","colSpan","fontStyle","RoundForm","newSec","newSGS","computeSGS","SGS","newStrokes","newMin","faIcon","btnLabel","roundData","saveRound","min","sec","today","now","getTimezoneOffset","toISOString","substr","holes","notes","thisRound","startData","max","FloatingButton","handleClick","Rounds","addRound","newData","userObj","refreshOnUpdate","editId","_id","deleteId","val","closeErrorMsg","icon","CoursesPage","AboutBox","textAlign","href","modeTitle","modeToPage","App","newMode","handleChangeMode","openMenu","closeMenu","prevState","setUserId","Id","authenticated","showEditAccount","showEditAccountDialog","cancelEditAccount","editAccountDone","showAboutDialog","then","isAuthenticated","user","ModePage","Boolean","location","hostname","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a2e2d83e.chunk.js","sourcesContent":["/* AppMode: The enumerated type for AppMode. */\n\nconst AppMode = {\n    LOGIN: \"LoginMode\",\n    FEED: \"FeedMode\",\n    ROUNDS: \"RoundsMode\",\n    ROUNDS_LOGROUND: \"RoundsMode-LogRound\",\n    ROUNDS_EDITROUND: \"RoundsMode-EditRound\",\n    COURSES: \"CoursesMode\"\n};\n\nObject.freeze(AppMode); //This ensures that the object is immutable.\n\nexport default AppMode;","import React from 'react';\nimport AppMode from '../AppMode';\n\nclass NavBar extends React.Component {\n\n  getMenuBtnIcon = () => {\n      if (this.props.mode === AppMode.ROUNDS_LOGROUND || \n          this.props.mode === AppMode.ROUNDS_EDITROUND)\n          return \"fa fa-arrow-left\";\n      if (this.props.menuOpen)\n        return \"fa fa-times\";\n      return \"fa fa-bars\";\n  }\n\n  handleMenuBtnClick = () => {\n    if (this.props.mode === AppMode.ROUNDS_LOGROUND ||\n        this.props.mode === AppMode.ROUNDS_EDITROUND) {\n      this.props.changeMode(AppMode.ROUNDS);\n    } else if (this.props.mode != AppMode.LOGIN) {\n      this.props.toggleMenuOpen();\n    }\n  }\n\n    \n  render() {\n    return (\n    <div className=\"navbar\">  \n    <span className=\"navbar-items\">\n      <button className=\"sidemenu-btn\" onClick={this.handleMenuBtnClick}>\n        <span id=\"menuBtnIcon\" className={\"sidemenu-btn-icon \" + this.getMenuBtnIcon()}>\n        </span>\n      </button>\n      <img src=\"http://tiny.cc/sslogo\" alt=\"Speed Score Logo\" height=\"38px\"\n      width=\"38px\" />\n      <span className=\"navbar-title\">\n        &nbsp;{this.props.title}\n      </span>\n    </span>\n  </div>\n); \n}\n}\n\nexport default NavBar;\n","import React from 'react';\nimport AppMode from './../AppMode.js'\n\nclass SideMenu extends React.Component {\n\n//renderModeItems -- Renders correct subset of mode menu items based on\n//current mode, which is stored in this.prop.mode. Uses switch statement to\n//determine mode.\nrenderModeMenuItems = () => {\n  switch (this.props.mode) {\n    case AppMode.FEED:\n      return(\n        <div>\n        <a className=\"sidemenu-item\">\n            <span className=\"fa fa-users\"></span>&nbsp;Followed Users</a>\n        <a className=\"sidemenu-item \">\n            <span className=\"fa fa-search\"></span>&nbsp;Search Feed</a>\n        </div>\n      );\n    break;\n    case AppMode.ROUNDS:\n      return(\n        <div>\n          <a className=\"sidemenu-item\">\n            <span className=\"fa fa-plus\"></span>&nbsp;Log New Round</a>\n          <a className=\"sidemenu-item\">\n            <span className=\"fa fa-search\"></span>&nbsp;Search Rounds</a>\n        </div>\n      );\n    break;\n    case AppMode.COURSES:\n      return(\n        <div>\n        <a className=\"sidemenu-item\">\n            <span className=\"fa fa-plus\"></span>&nbsp;Add a Course</a>\n        <a className=\"sidemenu-item\">\n            <span className=\"fa fa-search\"></span>&nbsp;Search Courses</a>\n        </div>\n      );\n    default:\n        return null;\n    }\n}\n\n    render() {\n       return (\n        <div className={\"sidemenu \" + (this.props.menuOpen ? \"sidemenu-open\" : \"sidemenu-closed\")}\n             onClick={this.props.toggleMenuOpen}>\n          {/* SIDE MENU TITLE */}\n          <div className=\"sidemenu-title\">\n            <img src={this.props.profilePicURL} height='60' width='60' />\n            <span id=\"userID\" className=\"sidemenu-userID\">&nbsp;{this.props.displayName}</span>\n        </div>\n          {/* MENU CONTENT */}\n          {this.renderModeMenuItems()}\n          {/* The following menu items are present regardless of mode */}\n          {this.props.localAccount ? \n            <a id=\"accountBtn\" className=\"sidemenu-item\" onClick={this.props.editAccount}>\n              <span className=\"fa fa-user\"></span>&nbsp;Account</a> : null}\n          <a id=\"aboutBtn\" className=\"sidemenu-item\" onClick={this.props.showAbout}>\n            <span className=\"fa fa-info-circle\"></span>&nbsp;About</a>\n          <a id=\"logOutBtn\" className=\"sidemenu-item\" onClick={this.props.logOut}>\n            <span className=\"fa fa-sign-out-alt\"></span>&nbsp;Log Out</a>\n        </div>\n       );\n    }\n}\n\nexport default SideMenu;\n","import React from 'react';\nimport AppMode from '../AppMode.js';\n\n\nclass ModeBar extends React.Component {\n    render() {\n      return(\n        <div className={\"modebar\" + (this.props.mode === AppMode.LOGIN ? \n          \" invisible\" : (this.props.menuOpen ? \" ignore-click visible\" : \" visible\"))}>\n        <a className={(this.props.mode === AppMode.FEED ? \" item-selected\" : null)}\n            onClick={()=>this.props.changeMode(AppMode.FEED)}>\n          <span className=\"modebaricon fa fa-search\" id=\"searchTab\"></span>\n          <span className=\"modebar-text\">Search Location</span>\n        </a>\n        <a className={(this.props.mode === AppMode.ROUNDS || \n               this.props.mode === AppMode.ROUNDS_EDITROUND || \n               this.props.mode === AppMode.ROUNDS_LOGROUND ? \n                  \" item-selected\" : null)}\n           onClick={()=>this.props.changeMode(AppMode.ROUNDS)}>\n          <span className=\"modebar-icon fa fa-heart\" id=\"favoritesTab\"></span>\n          <span className=\"modebar-text\">Weather History</span>\n        </a>\n        <a className={(this.props.mode === AppMode.COURSES ? \" item-selected\" : null)}\n          onClick={()=>this.props.changeMode(AppMode.COURSES)}>\n          <span className=\"modebar-icon  fa fa-flag\" id=\"historyTab\"></span>\n          <span className=\"modebar-text\">Favorites</span>\n        </a> \n        </div>\n      );\n    }\n}\n\nexport default ModeBar;\n","import React from 'react';\n\nclass ConfirmDeleteAccount extends React.Component {\n    constructor() {\n        super();\n        this.emailRef = React.createRef();\n        this.state = {emailMatches: false};\n    }\n    \n    componentDidMount() {\n        this.emailRef.current.focus();\n    }\n\n    handleChange = () => {\n        const match = (this.emailRef.current.value === this.props.email);\n        if (match != this.state.emailMatches) {\n            this.setState({emailMatches: match});\n        }\n    }\n\n    render() {\n        return (\n        <div id=\"aboutModal\" className=\"modal\" role=\"dialog\">\n        <div className=\"modal-content\">\n            <div className=\"modal-header\">\n              <center>\n                <h3 className=\"modal-title\"><b>Confirm Account Deletion</b></h3>\n              </center>\n               <button id=\"modalClose\" className=\"modal-close\" onClick={this.props.close}>\n                 &times;</button>\n            </div>\n            <div className=\"modal-body\">\n              <p>Do you really want to delete your account? <br />\n                 <i>This action cannot be undone.</i></p>\n              <label>\n                Confirm Email ({this.props.email}):\n                <br/>\n                <input \n                    className=\"form-center\"\n                    type=\"text\"\n                    ref={this.emailRef}\n                    onChange={this.handleChange} />\n                </label>\n                <br />\n            </div>\n            <div className=\"modal-footer\">\n                  <button className=\"btn btn-danger\" onClick={this.props.deleteAccount} disabled={!this.state.emailMatches}>\n                  Yes, Delete My Account</button>\n                  <button className=\"btn btn-secondary\" onClick={this.props.close}>\n                  No, Cancel</button>\n            </div>\n        </div>\n        </div>\n        );\n    }\n}\n\nexport default ConfirmDeleteAccount;","import React from 'react';\nimport ConfirmDeleteAccount from './ConfirmDeleteAccount.js';\nimport confirmDeleteAccount from './ConfirmDeleteAccount.js';\n\nclass CreateEditAccountDialog extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.origAccountInfo = null;\n        //Create a ref for the email input DOM element\n        this.newUserRef = React.createRef();\n        this.repeatPassRef = React.createRef();\n        this.profilePicRef = React.createRef();\n        this.state = {accountName: \"\",\n                      displayName: \"\",\n                      profilePicURL: \"https://icon-library.net//images/default-profile-icon/default-profile-icon-24.jpg\",\n                      password: \"\",\n                      passwordRepeat: \"\",\n                      securityQuestion: \"\",\n                      securityAnswer: \"\",\n                      formUpdated: false,\n                      confirmDelete: false};\n    } \n\n    //componentDidMount -- If we are editing an existing user acccount, we need to grab the data from\n    //the database and push them into the state.\n    async componentDidMount() {\n        if (!this.props.create) {\n            //obtain current user data from database and push into state\n            const url = \"/users/\" + this.props.userId;\n            const res = await fetch(url);\n            const json = await res.json();\n            const userData = JSON.parse(json);\n            this.origAccountInfo = userData; //This determines whether update can occur\n            this.origAccountInfo.passwordRepeat = userData.password;\n            this.setState({accountName: this.props.userId,\n                           displayName: userData.displayName,\n                           profilePicURL: userData.profilePicURL,\n                           password: userData.password,\n                           passwordRepeat: userData.password,\n                           securityQuestion: userData.securityQuestion,\n                           securityAnswer: userData.securityAnswer});\n        }\n    }\n\n    //checkDataValidity -- Callback function invoked after a form element in\n    //the 'Create Account' dialog box changes and component state has been\n    //updated. We first check whether the passwords match. If they do not, \n    //we set a custom validity message to be displayed when the user clicks the\n    //'Create Account' button. Otherwise, we reset the custom validity message\n    //to empty so that it will NOT fire when the user clicks 'Create Account'.\n    //Second, we check whether anything in the form changed from the original.\n    //If so, we update the 'formUpdated' state var, so that the form's submit\n    //button is enabled.\n    checkDataValidity = () => {\n        if (this.state.password != this.state.passwordRepeat) {\n            //Passwords don't match\n            this.repeatPassRef.current.setCustomValidity(\n            \"This password must match password entered in previous field.\");\n        } else {\n            this.repeatPassRef.current.setCustomValidity(\"\");\n        }\n    }\n\n    //handleChange--Called when a field in a dialog box form changes.\n    handleChange = (event) => {\n        const formUpdated = (this.origAccountInfo == null ? true : this.formIsUpdated(event.target.name,event.target.value));\n        if (event.target.name === \"profilePic\") {\n            if (event.target.value.length == 0) { //The user canceled the file selection -- set back to default\n                this.setState({profilePicURL: \"https://icon-library.net//images/default-profile-icon/default-profile-icon-24.jpg\",\n                               formUpdated: formUpdated},\n                               this.checkDataValidity);\n            } else { //The user selected a file\n                const self = this;\n                const reader = new FileReader();\n                reader.readAsDataURL(this.profilePicRef.current.files[0]);\n                reader.addEventListener(\"load\",function() {\n                    self.setState({profilePicURL:  this.result,\n                                   formUpdated: formUpdated},this.checkDataValidity);\n                });\n                \n            }\n        } else {\n            this.setState({[event.target.name]: event.target.value,\n                           formUpdated: formUpdated},this.checkDataValidity);\n        }\n    } \n\n    //formisUpdated-- Checks whether any form data element has changed from the original. If so, \n    //returns true. Returns false otherwise. Note that in case of editing new account, always returns\n    //true since this.origAccountInfo is set to null.\n    //Should be called whenever the user makes a change to form data.\n    formIsUpdated = (updateField,updateVal) => {\n        if (this.origAccountInfo[updateField] != updateVal) {return true;}\n        if (updateField != \"displayName\" && \n             this.state.displayName != this.origAccountInfo.displayName) \n             {return true;}\n        if (updateField != \"profilePicURL\" && \n             this.state.profilePicURL != this.origAccountInfo.profilePicURL) \n             {return true;}\n        if (updateField != \"password\" &&\n            this.state.password !== this.origAccountInfo.password)\n            {return true;}\n        if (updateField != \"passwordRepeat\" &&\n            this.state.passwordRepeat !== this.origAccountInfo.passwordRepeat)\n            {return true;}\n        if (updateField != \"securityQuestion\" &&\n            this.state.securityQuestion !== this.origAccountInfo.securityQuestion)\n            {return true;}\n        if (updateField != \"securityAnswer\" &&\n            this.state.securityAnswer !== this.origAccountInfo.securityAnswer)\n            {return true;}\n        return false;\n    }\n\n    //setDefaultDisplayName -- Triggered by onBlur() event of Email field.\n    //Sets default value of display name to value entered into Email field \n    //as a courtesy.\n    setDefaultDisplayName = (event) => {\n      if (event.target.value.length > 0 && this.state.displayName === \"\") {\n        this.setState({displayName: event.target.value});\n      }\n    }\n\n    //handleSubmit -- Triggered when user clicks on submit button to\n    //either create or edit account.\n    //Custom data checking ensures user account under this email does not \n    //already exist and that the rest of the info is valid. We create a new  \n    // object for user, save it to localStorage and take user to app's \n    //landing page. \n    handleSubmit = async(event) => {\n        event.preventDefault();\n        //Initialize user account\n        let userData = {\n            displayName: this.state.displayName,\n            password: this.state.password,\n            profilePicURL: this.state.profilePicURL,\n            securityQuestion: this.state.securityQuestion,\n            securityAnswer: this.state.securityAnswer\n        };\n        const url = '/users/' + this.state.accountName;\n        let res;\n        if (this.props.create) { //use POST route to create new user account\n            res = await fetch(url, {\n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json'\n                    },\n                method: 'POST',\n                body: JSON.stringify(userData)}); \n            if (res.status == 200) { //successful account creation!\n                this.props.done(\"New account created! Enter credentials to log in.\",false);\n            } else { //Unsuccessful account creation\n                //Grab textual error message\n                const resText = await res.text();\n                this.props.done(resText,false);\n            }\n        } else { //use PUT route to update existing user account\n            res = await fetch(url, {\n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json'\n                    },\n                method: 'PUT',\n                body: JSON.stringify(userData)}); \n            if (res.status == 200) { //successful account creation!\n                this.props.done(\"User Account Updated!\",false);\n            } else { //Unsuccessful account update\n                //Grab textual error message\n                const resText = await res.text();\n                this.props.done(resText,false);\n            }\n        }\n    }\n\n    //deleteAccount -- Called after confirms account deletion. \n    //Uses DELETE server route to perform server deletion. \n    //Calls on done with status message and\n    //true if delete was succesful, false otherwise.\n    deleteAccount = async() => {\n       const url = '/users/' + this.state.accountName;\n       const res = await fetch(url, \n                    {method: 'DELETE'}); \n        if (res.status == 200) { //successful account deletion!\n            this.props.done(\"Account '\" + this.state.accountName + \"' has been deleted.\",true);\n        } else { //Unsuccessful account deletion\n            //Grab textual error message\n            const resText = await res.text();\n            this.props.done(resText,false);\n        }\n        this.setState({confirmDelete: false});\n    }\n\n    //confirmDeleteAccount -- Called when user clicks on \"Delete Account...\"\n    //button to indicate intention to delete account. Presents the Confirm\n    //Delete dialog box.\n    confirmDeleteAccount = (e) => {\n        e.preventDefault();\n        this.setState({confirmDelete: true});\n    }\n\n    render() {\n    return (  \n    <div className=\"modal\" role=\"dialog\">\n    <div className=\"modal-dialog modal-lg\"></div>\n        <div className=\"modal-content form-center\">\n            <div className=\"modal-header\">\n              <h3><b>{this.props.create ? \"Create New Account\" : \"Edit Account\"}</b></h3>\n              <button className=\"modal-close\" \n                       onClick={this.props.cancel}>\n                &times;</button>\n            </div>\n            <div className=\"modal-body\">\n            <form onSubmit={this.handleSubmit}>\n            <label>\n                Email: \n                <input  \n                autocomplete=\"off\"\n                disabled={!this.props.create}\n                className=\"form-control form-text form-center\"\n                name=\"accountName\"\n                type=\"email\"\n                size=\"35\"\n                placeholder=\"Enter Email Address\"\n                pattern=\"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}\"\n                required={true}\n                ref={this.newUserRef}\n                value={this.state.accountName}\n                onChange={this.handleChange}\n                onBlur={this.setDefaultDisplayName}\n                />\n            </label>\n            <br/>\n            <label>\n                Password:\n                <input\n                autocomplete=\"off\"\n                className=\"form-control form-text form-center\"\n                name=\"password\"\n                type=\"password\"\n                size=\"35\"\n                placeholder=\"Enter Password\"\n                pattern=\n                \"(?=^.{8,}$)((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z])(?=.*[a-z]).*$\"\n                required={true}\n                value={this.state.password}\n                onChange={this.handleChange}\n                />\n            </label>\n            <br/>\n            <label>\n                Repeat Password:\n                <input\n                className=\"form-control form-text form-center\"\n                name=\"passwordRepeat\"\n                type=\"password\"\n                size=\"35\"\n                placeholder=\"Repeat Password\"\n                required={true}\n                ref={this.repeatPassRef}\n                value={this.state.passwordRepeat}\n                onChange={this.handleChange}\n                />\n            </label>\n            <br/>\n            <label>\n                Display Name:\n                <input\n                className=\"form-control form-text form-center\"\n                name=\"displayName\"\n                type=\"text\"\n                size=\"30\"\n                placeholder=\"Display Name\"\n                required={true}\n                value={this.state.displayName}\n                onChange={this.handleChange}\n                />\n            </label>\n            <br/>\n            <label>\n                Profile Picture:<br/>\n                <input\n                className=\"form-control form-text form-center\"\n                name=\"profilePic\"\n                type=\"file\"\n                accept=\"image/x-png,image/gif,image/jpeg\" \n                ref={this.profilePicRef}\n                value={this.state.profilePic}\n                onChange={this.handleChange}\n                />\n                <img src={this.state.profilePicURL != \"\" ? \n                            this.state.profilePicURL :\n                            this.state.profilePicDataURL} \n                        height=\"60\" width=\"60\" \n                 />\n            </label> \n            <br/>\n            <label>\n                Security Question:\n                <textarea\n                className=\"form-control form-text form-center\"\n                name=\"securityQuestion\"\n                size=\"35\"\n                placeholder=\"Security Question\"\n                rows=\"2\"\n                cols=\"35\"\n                maxLength=\"100\"\n                required={true}\n                value={this.state.securityQuestion}\n                onChange={this.handleChange}\n                />\n            </label>\n            <br/>\n            <label>\n                Answer to Security Question:\n                <textarea\n                className=\"form-control form-text form-center\"\n                name=\"securityAnswer\"\n                type=\"text\"\n                placeholder=\"Answer\"\n                rows=\"2\"\n                cols=\"35\"\n                maxLength=\"100\"\n                required={true}\n                value={this.state.securityAnswer}\n                onChange={this.handleChange}\n                />\n            </label>\n            <br/>\n            {!this.props.create ?  \n            <button className=\"btn btn-small btn-danger\" onClick={this.confirmDeleteAccount}>\n                Delete Account...\n            </button> : null}\n            <br/><br/>\n            <button role=\"submit\" \n                disabled={!this.state.formUpdated}\n                className=\"btn btn-primary btn-color-theme modal-submit-btn\">\n                <span className={this.props.create ? \"fa fa-user-plus\" : \"fa fa-user\"}></span>\n                &nbsp;{this.props.create ? \"Create Account\" : \"Update Account\"}\n            </button>\n            </form>\n            </div>\n        </div>\n        {this.state.confirmDelete ? \n          <ConfirmDeleteAccount email={this.state.accountName}\n                                deleteAccount={this.deleteAccount}\n                                close={() => (this.setState({confirmDelete: false}))}\n         /> : null}\n    </div>\n    );\n}\n}\n\nexport default CreateEditAccountDialog;","import React from 'react'\n\nclass ResetPasswordDialog extends React.Component {\n    constructor() {\n        super();\n        this.resetPasswordRef = React.createRef();\n        this.resetPasswordRepeatRef = React.createRef();\n        this.state = {errorMsg: \"\"};\n    }\n\n    //handleSubmit -- When the user submits the form, ensure that the passwords match.\n    //If so, call on resetPassword in parent component to actually reset the password.\n    //Otherwise, display an error message prompting the user to try again.\n    handleSubmit= (event) => {\n        event.preventDefault();\n        if (this.resetPasswordRef.current.value === this.resetPasswordRepeatRef.current.value) {\n            this.props.resetPassword(this.resetPasswordRef.current.value);\n        } else {\n            this.resetPasswordRepeatRef.current.focus();\n            this.setState({errorMsg: \"The passwords you entered do not match. Please try again.\"});\n        }\n    }\n\n    checkForSubmit = (e) => {\n        if (e.code === \"Enter\") {\n            e.preventDefault();\n            this.handleSubmit();\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"modal\" role=\"dialog\">\n              <div className=\"modal-dialog modal-lg\">\n                <div className=\"modal-content\">\n                  <div className=\"modal-header\">\n                    <h3 className=\"modal-title\"><b>Reset Password</b>\n                    </h3>\n                    <button className=\"modal-close\" \n                        onClick={this.props.cancelResetPassword}>\n                        &times;\n                    </button>\n                  </div>\n                  <div className=\"modal-body\">\n                    {this.state.errorMsg != \"\" ? <p className=\"emphasis\">{this.state.errorMsg}</p> : null} \n                    <form onSubmit={this.handleSubmit}>\n                    <label>\n                        New Password: \n                        <input\n                        type=\"password\"\n                        placeholder=\"Enter new password\"\n                pattern=\"(?=^.{8,}$)((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z])(?=.*[a-z]).*$\"\n                        className=\"form-control form-text\"\n                        ref={this.resetPasswordRef}\n                        />\n                    </label>\n                    <label>\n                        Repeat New Password: \n                        <input\n                        type=\"password\"\n                        placeholder=\"Repeat new password\"\n                        className=\"form-control form-text\"\n                        onKeyUp={this.checkForSubmit}\n                        ref={this.resetPasswordRepeatRef}\n                        />\n                    </label>\n                    <button role=\"submit\" \n                     className=\"btn btn-primary btn-color-theme form-submit-btn\">\n                        <span className=\"fa fa-key\"></span>&nbsp;Reset Password\n                    </button>\n                    </form>\n                </div>\n              </div>\n            </div>\n          </div>\n          );\n        \n    }\n}\n\nexport default ResetPasswordDialog;","import React from 'react';\nimport AppMode from '../AppMode.js';\n\nclass LookUpAccountDialog extends React.Component {\n\n    constructor() {\n        super();\n        this.emailRef = React.createRef();\n        this.state = {errorMsg: \"\"};\n    }\n\n    //handleLookUpAccount: When the user clicks on the \"Look Up Account\" dialog box\n    //button, we check whether the account exists. If it does, we update the state,\n    //setting the resetEmail var to the email entered, hiding the current dialog box\n    //and showing the security question dialog box.\n    handleLookUpAccount = async(event) => {\n        event.preventDefault();\n        let response = await fetch(\"/users/\" + this.emailRef.current.value);\n        if (response.status == 200) {\n            const json = await response.json();\n            const obj = JSON.parse(json);\n            if (obj.authStrategy === \"local\") {\n                this.props.getSecurityAnswer(obj.id,obj.securityQuestion, obj.securityAnswer);\n            } else { //Account exists but was created through OAuth so password can't be reset \n                this.setState({ErrMsg: \"That account is authenticated through \" + obj.authStrategy + \". \" +\n                               \"Please log in to \" + obj.authStrategy + \" to reset the password.\"});\n            }\n        } else {\n            this.setState({errorMsg: \"Sorry, there is no account associated with '\" + this.emailRef.current.value + \"'.\"});\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"modal\" role=\"dialog\">\n              <div className=\"modal-dialog modal-lg\">\n                <div className=\"modal-content\">\n                  <div className=\"modal-header\">\n                    <h3 className=\"modal-title\"><b>Look Up Account</b></h3>\n                    <button className=\"modal-close\" \n                        onClick={() => {this.props.cancelResetPassword()}}>\n                        &times;\n                    </button>\n                  </div>\n                  <div className=\"modal-body\">\n                    {this.state.errMsg != \"\" ? <p className=\"emphasis\">{this.state.errorMsg}</p> : null}\n                    <form onSubmit={this.handleLookUpAccount}>\n                    <label>\n                        Account Email Address: \n                        <input\n                        ref={this.emailRef}\n                        className=\"form-control form-text\"\n                        type=\"email\"\n                        size=\"35\"\n                        placeholder=\"Enter Email Address\"\n                        pattern=\"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}\"\n                        ref={this.emailRef}\n                        required={true}\n                        />\n                    </label>\n                    <button type=\"submit\" \n                        className=\"btn btn-primary btn-color-theme form-submit-btn\">\n                        <span className=\"fa fa-search\"></span>&nbsp;Look Up Account\n                    </button>\n                    </form>\n                </div>\n              </div>\n            </div>\n          </div>  \n        );   \n    }\n\n}\n\nexport default LookUpAccountDialog;\n","import React from 'react';\n\nclass SecurityQuestionDialog extends React.Component {\n    constructor() {\n        super();\n        this.securityAnswerRef = React.createRef();\n        this.state = {errorMsg: \"\"};\n    }\n\n    //Focus cursor in email secrity answer field when mounted\n    componentDidMount() {\n        this.securityAnswerRef.current.focus();\n    }  \n\n    handleSubmit = (event) => {\n        event.preventDefault();\n        if (this.securityAnswerRef.current.value === this.props.answer) {\n            this.props.getNewPassword();\n        } else {\n            this.securityAnswerRef.current.focus();\n            this.setState({errorMsg: \"Sorry, that is not the correct answer to the security question. Try again.\"});\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"modal\" role=\"dialog\">\n              <div className=\"modal-dialog modal-lg\">\n                <div className=\"modal-content\">\n                  <div className=\"modal-header\">\n                    <h3 className=\"modal-title\"><b>Answer Security Question</b>\n                    </h3>\n                    <button className=\"modal-close\" \n                        onClick={this.props.cancelResetPassword}>\n                        &times;\n                    </button>\n                  </div>\n                  <div className=\"modal-body\">\n                    {this.state.errorMsg != \"\" ? <p className=\"emphasis\">{this.state.errorMsg}</p> : null} \n                    <form onSubmit={this.handleSubmit}>\n                    <label>\n                        Security Question: \n                        <textarea\n                        readOnly={true}\n                        value={this.props.question}\n                        className=\"form-control form-text\"\n                        rows=\"3\"\n                        cols=\"35\"\n                        />\n                    </label>\n                    <label>\n                        Security Answer: \n                        <textarea\n                        className=\"form-control form-text\"\n                        placeholder=\"Enter Security Question Answer\"\n                        ref={this.securityAnswerRef}\n                        rows=\"3\"\n                        cols=\"35\"\n                        />\n                    </label>\n                    <button role=\"submit\" \n                      className=\"btn btn-primary btn-color-theme form-submit-btn\">\n                        <span className=\"fa fa-check\"></span>&nbsp;Verify Answer\n                    </button>\n                    </form>\n                </div>\n              </div>\n            </div>\n          </div>\n          );        \n    }\n}\n export default SecurityQuestionDialog;","import React from 'react';\nimport CreateEditAccountDialog from './CreateEditAccountDialog.js';\nimport ResetPasswordDialog from './ResetPasswordDialog.js';\nimport LookUpAccountDialog from './LookUpAccountDialog.js';\nimport SecurityQuestionDialog from './SecurityQuestionDialog.js';\n\nclass LoginPage extends React.Component {\n\nconstructor() {\n    super();\n    //Create a ref for the email input DOM element\n    this.emailInputRef = React.createRef();\n    this.resetUserId = \"\";\n    this.resetQ = \"\";\n    this.resetA = \"\";\n    this.passwordInputRef = React.createRef();\n    this.state = {statusMsg: \"\",\n                  loginBtnIcon: \"fa fa-sign-in\",\n                  loginBtnLabel: \"Log In\",\n                  showLookUpAccountDialog: false,\n                  showSecurityQuestionDialog: false,\n                  showResetPaswordDialog: false,\n                  githubIcon: \"fa fa-github\",\n                  githubLabel: \"Sign in with GitHub\",\n                  loginMsg: \"\",\n                  newAccountCreated: false\n                  };\n} \n    \n//Focus cursor in email input field when mounted\ncomponentDidMount() {\n    this.emailInputRef.current.focus();\n}  \n\n//handleLoginSubmit -- Called when user clicks on login button.\nhandleLoginSubmit = async (event) => {\n    event.preventDefault();\n    this.setState({loginBtnIcon: \"fa fa-spin fa-spinner\",\n                   loginBtnLabel: \"Logging In...\"});\n    const url = \"auth/login?username=\" + this.emailInputRef.current.value +\n                \"&password=\" + this.passwordInputRef.current.value;\n    const res = await fetch(url, {method: 'POST'}); \n    if (res.status == 200) { //successful login!\n        window.open(\"/\",\"_self\");\n    } else { //Unsuccessful login\n      const resText = await res.text();\n      this.setState({loginBtnIcon: \"fa fa-sign-in\",\n                     loginBtnLabel: \"Log In\",\n                     statusMsg: resText});\n    }\n}\n\n  //accountCreateDone -- Called by child CreateAccountDialog component when \n  //user attempted to create new account. Hide the dialog and display \n  //a message indicating result of the attempt.\n  accountCreateDone = (msg) => {\n      this.setState({statusMsg: msg,\n                     showCreateAccountDialog: false});\n  }\n\n  //cancelCreateAccount -- Called by child CreateAccountDialog componenet when user decides\n  //to cancel creation of new account by clicking the \"X\" in top-right of dialog.\n  cancelCreateAccount = () => {\n      this.setState({showCreateAccountDialog: false});\n  }\n\n//cancelResetPassword -- Called by one of the child three child dialog box components when\n//the user decides to cancel resetting their password. Toggles state so that all three\n//of the dialog boxes are hidden\ncancelResetPassword = () => {\n    this.resetUserId = \"\";\n    this.resetQ = \"\";\n    this.resetA = \"\";\n    this.setState({showLookUpAccountDialog: false,\n                   showSecurityQuestionDialog: false,\n                   showResetPaswordDialog: false});             \n}\n\n//handleOAuthLogin -- Callback function that initiates contact with OAuth\n//provider\nhandleOAuthLogin = (provider) => {\n    window.open(`/auth/${provider}`,\"_self\");\n}\n\n//handleOAuthLoginClick -- Called whent the user clicks on button to\n//authenticate via a third-party OAuth service. The name of the provider is\n//passed in as a parameter.\nhandleOAuthLoginClick = (provider) => {\n   this.setState({[provider + \"Icon\"] : \"fa fa-spin fa-spinner\",\n                  [provider + \"Label\"] : \"Connecting...\"});\n   setTimeout(() => this.handleOAuthLogin(provider),1000);\n}\n\n//getSecurityAnswer: Given the id, security question, and security answer obtained\n//from the LookUpAccountDialog component, update state such that the user will\n//next be prompted to enter security question and answer for verification\ngetSecurityAnswer = (userId, question, answer) => {\n    this.resetUserId = userId;\n    this.resetQ = question;\n    this.resetA = answer;\n    this.setState({showLookUpAccountDialog: false,\n                   showSecurityQuestionDialog: true\n                });\n}\n\n//getNewPassword-- Called after user successfully provides correct answer\n//to security question. Presents the \"Reset Password\" dialog box.\ngetNewPassword = () => {\n    this.setState({showSecurityQuestionDialog: false,\n                    showResetPaswordDialog: true});\n}\n\n//resetPassword--Called after the user successfully enters a new (acceptable)\n//password. pw contains the new password. Call on the Update (PUT) server\n//route to update the user's password in the database.\nresetPassword = async(pw) => {\n    const url = \"/users/\" + this.resetUserId;\n    const res = await fetch(url, {\n        headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json'\n            },\n        method: 'PUT',\n        body: JSON.stringify({password: pw})}); \n    if (res.status == 200) { //successful update creation!\n        this.setState({showResetPaswordDialog: false,\n                       statusMsg: \"Password successfully reset!\"});\n    } else { //Unsuccessful account creation\n        //Grab textual error message\n        const resText = await res.text();\n        this.setState({showResetPasswordDialog: false,\n                      statusMsg: resText});\n    }\n    \n}\n\n//newAccountCreated -- Called after successful creation of a new account\naccountCreateDone = (msg,deleted) => {\n    this.setState({statusMsg: msg,\n                   showCreateAccountDialog: false});\n}\n\n//closeStatusMsg -- Called when user clicks on \"x\" to dismiss status message\ncloseStatusMsg = () => {\n    this.setState({statusMsg: \"\"});\n}\n\n//cancelCreateAccount -- called to hide Create Account dialog without creating acct\ncancelCreateAccount = () => {\n    this.setState({showCreateAccountDialog: false});\n}\n\n  render() {\n    return(\n        <div>\n        <center>\n        {this.state.statusMsg != \"\" ? <div className=\"status-msg\"><span>{this.state.statusMsg}</span>\n                       <button className=\"modal-close\" onClick={this.closeStatusMsg}>\n                          <span className=\"fa fa-times\"></span>\n                        </button></div>: null}\n            {this.state.showLookUpAccountDialog ? \n              <LookUpAccountDialog cancelResetPassword={this.cancelResetPassword}\n                                   getSecurityAnswer={this.getSecurityAnswer}/> : null}\n            {this.state.showSecurityQuestionDialog ? \n               <SecurityQuestionDialog cancelResetPassword={this.cancelResetPassword}\n                                       question={this.resetQ}\n                                       answer={this.resetA}\n                                       getNewPassword={this.getNewPassword}/> : null}\n            {this.state.showResetPaswordDialog ? \n              <ResetPasswordDialog cancelResetPassword={this.cancelResetPassword}\n                                   resetPassword={this.resetPassword} /> : null}\n            <form id=\"loginInterface\" onSubmit={this.handleLoginSubmit}>\n            <label htmlFor=\"emailInput\" style={{ padding: 0, fontSize: 24 }}>\n                Email:\n                <input\n                ref={this.emailInputRef}\n                className=\"form-control login-text\"\n                type=\"email\"\n                placeholder=\"Enter Email Address\"\n                id=\"emailInput\"\n                pattern=\"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}\"\n                required={true}\n                />\n            </label>\n            <p />\n            <label htmlFor=\"passwordInput\" style={{ padding: 0, fontSize: 24 }}>\n                Password:\n                <input\n                ref={this.passwordInputRef}\n                className=\"form-control login-text\"\n                type=\"password\"\n                placeholder=\"Enter Password\"\n                id=\"passwordInput\"\n                pattern=\"[A-Za-z0-9!@#$%^&*()_+\\-]+\"\n                required={true}\n                />\n            </label>\n            <p className=\"bg-danger\" id=\"feedback\" style={{ fontSize: 16 }} />\n            <button\n                type=\"submit\"\n                className=\"btn-color-theme btn btn-primary btn-block login-btn\">\n                <span id=\"login-btn-icon\" className={this.state.loginBtnIcon}/>\n                &nbsp;{this.state.loginBtnLabel}\n            </button>\n            <p>\n            <button type=\"button\" className=\"btn btn-link login-link\" \n                    onClick={() => {this.setState({showCreateAccountDialog: true});}}>\n                Create an account</button> | \n                <button type=\"button\" className=\"btn btn-link login-link\"\n                        onClick={() => {this.setState({showLookUpAccountDialog: true});}}>\n                Reset your password</button>\n            </p>  \n            <button type=\"button\" className=\"btn btn-github\"\n               onClick={() => this.handleOAuthLoginClick(\"github\")}>\n              <span className={this.state.githubIcon}></span>&nbsp;\n                {this.state.githubLabel}\n            </button>\n            <p>\n                <i>Version CptS 489</i>\n            </p>\n            </form>\n            {this.state.showCreateAccountDialog ? \n              <CreateEditAccountDialog\n                create={true} \n                done={this.accountCreateDone}\n                cancel={this.cancelCreateAccount} /> : null}\n            {this.state.showResetPasswordDialog ? <ResetPasswordDialog /> : null}\n        </center>\n        </div>\n        )\n    }\n} \n\nexport default LoginPage;\n","//this component holds the weather station api data\n//parent: WeatherFeed\n//child: none\nimport React from 'react';\nrequire('dotenv').config();\n\nclass WeatherStation extends React.Component {\n    \n    \n    constructor(props) {\n        super(props);\n        this.state = {latitude: this.props.latitude,\n                      longitude: this.props.longitude,\n                      \n                     };\n\n        \n      }\n\n    componentDidMount = () => {\n      \n            this.getCurrentObservations();\n       \n    }\n\n    getCurrentObservations = async() => {\n\n            console.log(\"lat now fetching: \" + this.state.latitude + \" long now fetching: \" + this.state.longitude);\n            const response = await fetch('https://api.openweathermap.org/data/2.5/weather?lat=' + \n            this.state.latitude + '&lon=' +\n            this.state.longitude + '&appid=' + process.env.REACT_APP_API_KEY);\n            const currWeather = await response.json();\n            this.setState({place: currWeather.name,\n    \n                         retrieved: (new Date()).toLocaleDateString() + \" at \" + (new Date()).toLocaleTimeString(),\n                         conditions: currWeather.weather[0].main,\n                         visibility: currWeather.weather.visibility,\n                         visibilityUnit: \"Meters\",\n                         temp: Math.round(currWeather.main.temp - 273.15),\n                         tempUnit: \"C\",\n                         humidity: currWeather.main.humidity,\n                         visibility: currWeather.visibility,\n                         wind: currWeather.wind.speed,\n                         windUnit: \"Meters/sec\",\n                         windDirection: currWeather.wind.deg,\n                         windDirectionUnit: \"Degrees\",\n                         units: \"Metric\"\n                         });\n\n\n                         \n        \n    }\n    \n    toggleUnits = () => {\n      if (this.state.units == \"Imperial\") {\n          this.setState({\n              units: \"Metric\",\n              tempUnit: \"C\", \n              temp: Math.round((this.state.temp - 32) * 5/9),\n              visibility: Math.round(this.state.visibility / 3.28084),\n              visibilityUnit: \"Meters\",\n              wind: parseFloat(this.state.wind / 3.28084).toFixed(2),\n              windUnit: \"Meters/sec\"  });\n      } else {\n          this.setState({\n              units: \"Imperial\",\n              tempUnit: \"F\",\n              temp: Math.round((this.state.temp * 9/5) + 32),\n              visibility: Math.round(this.state.visibility * 3.28084),\n              visibilityUnit: \"Feet\",\n              wind: parseFloat(this.state.wind * 3.28084).toFixed(2),\n              windUnit: \"Feet/sec\" });\n      }\n    }\n\n    render() {\n        return (\n            <div align=\"center\" className=\"jumbotron\"> \n\n           \n            {/* shift up icon */}\n            <span className=\"shift-icon fa fa-arrow-up\" onClick={() => this.props.moveStation(this.props.stationId, \"up\")}></span>\n\n            \n\n            {/* Delete icon */}\n            <span className=\"delete-icon fa fa-times\" onClick={() => this.props.removeStation(this.props.stationId)}></span>\n            <h2>Weather Conditions at {this.state.place} </h2>\n\n\n            <h6><i>Last updated: {this.state.retrieved}</i>\n            {/* Refresh icon */}\n            &nbsp; <span className=\"refresh-icon fa fa-retweet\"\n            onClick={() => this.getCurrentObservations()}></span> \n            </h6>\n\n            <h5>Conditions: {this.state.conditions}</h5>\n            <h5>Visibility: {this.state.visibility + \" \" + this.state.visibilityUnit}</h5>\n            <h5>Temp: {this.state.temp}&deg;&nbsp;{this.state.tempUnit}</h5>\n            <h5>Humidity: {this.state.humidity}%</h5>\n            <h5>Wind Speed: {this.state.wind + \" \" + this.state.windUnit}</h5>\n            <h5>Wind Direction: {this.state.windDirection + \" \" + this.state.windDirectionUnit}</h5>\n            <div className=\"custom-control custom-switch\">\n                <input type=\"checkbox\" className=\"custom-control-input\" id={\"switch-\" + this.props.stationId} \n                     onClick={this.toggleUnits} />\n                <label className=\"custom-control-label\" htmlFor={\"switch-\" + this.props.stationId}>&nbsp;{this.state.units}</label>\n            </div>\n\n             {/* shift down icon */}\n             <span className=\"shift-icon fa fa-arrow-down\" onClick={() => this.props.moveStation(this.props.stationId, \"down\")}></span>\n         </div>\n        );\n    }\n}\n\nexport default WeatherStation;","import React from 'react';\nimport WeatherStation from './WeatherStation.js';\n\nclass FeedPage extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {stations: [],\n                      stationCount: 0,\n                    initialFire: true\n                        };\n        this.removeStation = this.removeStation.bind(this);\n        this.moveStation = this.moveStation.bind(this);\n        \n      }\n\n    componentDidMount = () => {\n        //Initialize based on user's current location, if possible\n        if (this.state.initialFire && !this.props.savedStation) {\n            this.loadStations();\n         }\n         else {\n            navigator.geolocation.getCurrentPosition(this.getLocSuccess,this.getLocError);\n         } \n    }\n    \n     //Called when user agrees to give loc data. We set the first weather\n     //station to show conditions at the user's current position.\n    getLocSuccess = (position) =>  {\n            this.setState({stations: [{lat: 47.6062, \n                lon: -122.3321, \n                stationId: this.state.stationCount+1}],\n            stationCount: this.state.stationCount + 1});\n            \n    }\n  \n    //Called when user refuses to give access to loc data\n    //Initializes first weather station to Seattle in this case\n    getLocError = (err) => {\n        this.setState({stations: [{lat: 47.6062, \n                                   lon: -122.3321, \n                                   stationId: this.state.stationCount+1}],\n                       stationCount: this.state.stationCount + 1});\n                       \n   }\n\n   //addStation -- When user clicks on \"+\" button to add a new weather station,\n    //prompt the user for the location and attempt to add the requested station.\n    addStation = async() => {\n        \n        const newStation = prompt(\"Enter a City, State, and Country:\");\n        if (newStation != null) { //Need to see if we can find the station through the API \n          const response = await fetch('https://api.openweathermap.org/data/2.5/weather?q=' + \n              newStation +  '&appid=' + process.env.REACT_APP_API_KEY);\n          const stationData = await response.json();\n          //See if the requested station exists\n          if (stationData != null && stationData.hasOwnProperty('coord')) { \n              //Push new station into stations list\n            let newStations = [...this.state.stations];\n            newStations.push({lat: stationData.coord.lat, \n                                lon: stationData.coord.lon, \n                                stationId: this.state.stationCount + 1});\n\n            \n            this.setState({stations: newStations,\n                             stationCount: this.state.stationCount + 1}, () => {\n                                this.writeStations(this.state.stationCount, stationData.coord.lat, stationData.coord.lon);\n                             });\n                \n          } else { \n              alert(\"Sorry, that weather location could not be found.\");\n          }\n        }\n    }\n\n    //save the stations to localstorage\n    writeStations(ids, lats, longs) {\n        let thisUser = localStorage.getItem(\"userId\");\n        let data = JSON.parse(localStorage.getItem(thisUser));\n        \n        //Initialize empty JavaScript object to store new or updated station\n        let thisStation = {}; //iniitalize empty object for this station\n\n        for (let i = 0; i < ids.length; i++) {\n            //Store the data\n            thisStation.id = ids[i];\n            thisStation.latitude = lats[i];\n            thisStation.longitude = longs[i];\n\n            data.weatherStations[i + 1] = thisStation;\n            data.weatherStationCount = ids.length;\n            localStorage.setItem(thisUser,JSON.stringify(data));\n            thisStation = {};\n        }  \n    }\n\n    //remove stations from array of weatherstations\n    removeStation(stationId) {\n\n        let newStations = [...this.state.stations];\n        \n        for (let i = 0; i < newStations.length; i++) {\n\n            if (newStations[i].stationId == stationId) {\n                newStations.splice(i, 1);\n            }\n        }\n        \n        //update state\n        this.setState({stations: newStations,\n            stationCount: this.state.stationCount - 1}, () => {\n                \n            });\n    }\n\n    //move the station up or down based on direction/buton clicked\n    moveStation(stationId, direction) {\n\n        let newStations = [...this.state.stations];\n\n        if (direction == \"up\") {\n            \n            if (stationId != newStations[0].stationId) {\n\n                for (let i = 0; i < newStations.length; i++) {\n                    if (newStations[i].stationId == stationId) {\n\n                        var x = i;\n                        var y = i - 1;\n                        //swap\n                        [ newStations[x], newStations[y] ] = [ newStations[y], newStations[x] ];\n                    }\n                }\n\n                 //update array\n                this.setState({stations: newStations}, () => {\n                    \n                });\n            }\n        }\n        else {\n            if (stationId != newStations[newStations.length - 1].stationId) {\n                for (let i = 0; i < newStations.length; i++) {\n                    if (newStations[i].stationId == stationId) {\n                        var x = i;\n                        var y = i + 1;\n\n                        //swap\n                        [ newStations[x], newStations[y] ] = [ newStations[y], newStations[x] ];\n                        break;\n                        \n                    }\n                }\n\n                //update array\n                this.setState({stations: newStations}, () => {\n\n                });\n            }\n        }\n\n        \n    }\n\n    //load stations from localstorage into array of weather stations\n    loadStations() {\n        \n\n        let thisUser = localStorage.getItem(\"userId\");\n        let data = JSON.parse(localStorage.getItem(thisUser));\n\n        //check if null if first time logging in\n        if (data != null) {\n            let rows = [];\n\n        \n            for (let i = 0; i < data.weatherStationCount; i++) {\n                var keyid = i + 1;\n                rows.push({\n                    lat: Number.parseFloat(data.weatherStations[keyid].latitude),\n                    lon: Number.parseFloat(data.weatherStations[keyid].longitude),\n                    stationId: keyid,\n                });\n            }\n            console.log(rows);\n            \n            //set the new array to state\n            this.setState({stations: rows,\n                            stationCount: rows.length,\n                            initialFire: false}, () => {\n                                \n                            });\n        }\n        \n\n        \n    }\n  \n    render() {\n\n        let rows = [];\n        let ids = [];\n        let lats = [];\n        let longs = [];\n\n        for (let i = 0; i < this.state.stations.length; i++) {\n            ids.push(this.state.stations[i].stationId);\n            lats.push(this.state.stations[i].lat);\n            longs.push(this.state.stations[i].lon);\n\n            rows.push(<WeatherStation key={this.state.stations[i].stationId} \n                    latitude={this.state.stations[i].lat} \n                    longitude={this.state.stations[i].lon}\n                    stationId={this.state.stations[i].stationId}\n                    moveStation={this.moveStation}\n                    removeStation={this.removeStation} />);\n        }\n        \n       \n\n        \n        if (this.state.initialFire == false) {\n\n            let thisUser = localStorage.getItem(\"userId\");\n            let data = JSON.parse(localStorage.getItem(thisUser));\n\n            //set to null and resave to make things easier\n            data = null;\n            this.writeStations(ids, lats, longs);\n        }\n\n       //if theres no stations, we want to fire componentDidMount\n       if (this.state.stationCount == 0) {\n            this.componentDidMount();\n       }\n\n        return (\n            <div id=\"main\">\n                <div id=\"weatherStations\">\n                    {rows}\n                </div>\n                <div className=\"floatButton\" id=\"floatBtnDiv\">\n                    <a className=\"float\" id=\"addStationBtn\" onClick={this.addStation}>\n                        <span className=\"float-btn-icon fa fa-plus\" id=\"floatBtnIcon\"></span>\n                    </a>\n                </div>  \n            </div>\n            \n        );\n    }\n}\nexport default FeedPage;","import React from 'react';\n\nclass ConfirmDeleteRound extends React.Component {\n\n    render() {\n        return (\n        <div id=\"aboutModal\" className=\"modal\" role=\"dialog\">\n        <div className=\"modal-content\">\n            <div className=\"modal-header\">\n              <center>\n                <h3 className=\"modal-title\"><b>Confirm Round Deletion</b></h3>\n              </center>\n               <button id=\"modalClose\" className=\"modal-close\" onClick={this.props.close}>\n                 &times;</button>\n            </div>\n            <div className=\"modal-body\">\n              <p>Do you really want to delete this round?</p>\n            </div>\n            <div className=\"modal-footer\">\n                  <button className=\"btn btn-danger\" onClick={this.props.deleteRound}>\n                  Yes, Delete</button>\n                  <button className=\"btn btn-secondary\" onClick={this.props.close}>\n                  No, Cancel</button>\n            </div>\n        </div>\n        </div>\n        );\n    }\n}\n\nexport default ConfirmDeleteRound;","import React from 'react';\nimport ConfirmDeleteRound from './ConfirmDeleteRound.js';\nimport AppMode from './../AppMode.js';\n\nclass RoundsTable extends React.Component {\n\n  constructor() {\n    super();\n    this.state = {showConfirmDelete: false};\n  }\n\n  //editRound -- Triggered when the user clicks the edit button for a given\n  //round. The id param is the unique property that identifies the round.\n  //Set the state variable representing the id of the round to be edited and\n  //then switch to the ROUNDS_EDITROUND mode to allow the user to edit the\n  //chosen round.\n  editRound = (id) => {\n    this.props.setEditId(id);\n    this.props.changeMode(AppMode.ROUNDS_EDITROUND);\n  }\n\n  //deleteRound -- Triggered when the user clicks on the \"Yes, Delete\"\n  //button in the Confirm Delete dialog box. It executes the deletion and\n  //closes the dialog box.\n  deleteRound = () => {\n    this.props.deleteRound();\n    this.setState({showConfirmDelete: false});\n  }\n\n\n  //confirmDelete -- Triggered when the user clicks the delete button\n  //for a given round. The id paam is the unique property that \n  //identifies the round. Set the state variable representing the id\n  //of the round to be deleted and then present a dialog box asking\n  //the user to confirm the deletion.\n  confirmDelete = (id) => {\n    this.props.setDeleteId(id);\n    this.setState({showConfirmDelete: true});\n  }\n\n\n  //renderTable -- render an HTML table displaying the rounds logged\n  //by the current user and providing buttons to view/edit and delete each round.\n  renderTable = () => {\n  let table = [];\n  for (let r = 0; r < this.props.rounds.length; ++r) {\n    table.push(\n      <tr key={r}>\n        <td>{this.props.rounds[r].date.substring(0,10)}</td>\n        <td>{this.props.rounds[r].course}</td>\n        <td>{(Number(this.props.rounds[r].strokes) + \n              Number(this.props.rounds[r].minutes)) +\n              \":\" + (this.props.rounds[r].seconds < 10 ?  \n                \"0\" + this.props.rounds[r].seconds :\n                this.props.rounds[r].seconds) + \" (\" + \n              this.props.rounds[r].strokes + \n              \" in \" + this.props.rounds[r].minutes + \":\" + \n              (this.props.rounds[r].seconds < 10 ?  \n                \"0\" + this.props.rounds[r].seconds :\n                this.props.rounds[r].seconds) + \")\"}\n        </td>\n        <td><button onClick={this.props.menuOpen ? null : () => \n          this.editRound(r)}>\n              <span className=\"fa fa-eye\"></span></button></td>\n        <td><button onClick={this.props.menuOpen ? null : \n          () => this.confirmDelete(r)}>\n              <span className=\"fa fa-trash\"></span></button></td>\n      </tr> \n    );\n  }\n  return table;\n  }\n\n  //render--render the entire rounds table with header, displaying a \"No\n  //Rounds Logged\" message in case the table is empty.\n  render() {\n    return(\n    <div className=\"padded-page\">\n      <h1></h1>\n      <table className=\"table table-hover\">\n        <thead className=\"thead-light\">\n        <tr>\n          <th>Date</th>\n          <th>Location</th>\n          <th>Weather Condition</th>\n          <th>Temperature</th>\n          <th>Wind Speed</th>\n          <th>Humidity</th>\n          {/* <th>View/Edit...</th> */}\n          <th>Delete</th>\n        </tr>\n        </thead>\n        <tbody>\n          {Object.keys(this.props.rounds).length === 0 ? \n          <tr>\n          <td colSpan=\"5\" style={{fontStyle: \"italic\"}}>No rounds logged</td>\n          </tr> : this.renderTable()\n          }\n        </tbody>\n      </table>\n      {this.state.showConfirmDelete ?\n        <ConfirmDeleteRound \n          close={() => this.setState({showConfirmDelete: false})} \n          deleteRound={this.deleteRound} /> : null}\n    </div>\n    );\n  }\n}\n\nexport default RoundsTable;\n","import React from 'react';\nimport AppMode from './../AppMode.js';\n\nclass RoundForm extends React.Component {\n  constructor(props) {\n  super(props);\n  //Create date object for today, taking time zone into consideration\n  let today = new Date(Date.now()-(new Date()).getTimezoneOffset()*60000);\n  //store date as ISO string\n  if (this.props.mode === AppMode.ROUNDS_LOGROUND) {\n    //If logging a new round, the starting state is a default round with\n    //today's date.\n    this.state = {date:  today.toISOString().substr(0,10), \n                  course: \"\",\n                  type: \"practice\",\n                  holes: \"18\",\n                  strokes: 80,\n                  minutes: 50,\n                  seconds: \"00\",\n                  notes: \"\",\n                  faIcon: \"fa fa-save\",\n                  btnLabel: \"Save Round Data\"}\n  } else {\n    //if editing an existing round, the starting state is the round's\n    //current data\n    let thisRound = {...this.props.startData};\n    delete thisRound.id;\n    thisRound.faIcon = \"fa fa-edit\";\n    thisRound.btnLabel = \"Update Round Data\";\n    this.state = thisRound;\n  }\n}\n  \n  \n    handleChange = (event) => {\n        const name = event.target.name;\n        if (name === \"seconds\") {\n          let newSec = (event.target.value.length < 2 ? \"0\" + \n            event.target.value : event.target.value);\n          let newSGS = this.computeSGS(this.state.strokes, this.state.minutes, \n                                       newSec);\n          this.setState({seconds: newSec, SGS: newSGS});\n        } else if (name === \"strokes\") {\n          let newStrokes = event.target.value;\n          let newSGS = this.computeSGS(newStrokes, this.state.minutes, \n            this.state.seconds);\n          this.setState({strokes: newStrokes, SGS: newSGS});\n        } else if (name === \"minutes\") {\n            let newMin = event.target.value;\n            let newSGS = this.computeSGS(this.state.strokes, newMin, \n              this.state.seconds);\n            this.setState({minutes: newMin, SGS: newSGS});\n        } else {\n          this.setState({[name]: event.target.value});\n        }\n    }\n  \n  \n    //handleSubmit -- When the user clicks on the button to save/update the\n    //round, start the spinner and invoke the parent component's saveRound\n    //method to do the actual work. Note that saveRound is set to the correct\n    //parent method based on whether the user is logging a new round or editing\n    //an existing round.\n    handleSubmit = (event) => {\n        //start spinner\n        this.setState({faIcon: \"fa fa-spin fa-spinner\",\n                        btnLabel: (this.props.mode === AppMode.ROUNDS_LOGROUND ? \n                                    \"Saving...\" : \"Updating...\")});\n        //Prepare current round data to be saved\n        let roundData = this.state;\n        delete roundData.faIcon;\n        delete roundData.btnLabel;\n        //call saveRound on 1 second delay to show spinning icon\n        setTimeout(this.props.saveRound,1000,roundData); \n        event.preventDefault(); \n        }\n  \n\n    computeSGS = (strokes, min, sec) => {\n      return (Number(strokes) + Number(min)) \n                  + \":\" + sec;\n    }\n  \n    render() {\n      return (\n        <form className=\"padded-page\" onSubmit={this.handleSubmit}>\n          <center>\n            <label>\n              Date:\n              <input name=\"date\" className=\"form-control form-center\" \n                type=\"date\" value={this.state.date} onChange={this.handleChange} />\n            </label>\n            <p></p>\n            <label>\n              Course:\n              <input name=\"course\" className=\"form-control form-center\" type=\"text\"\n                value={this.state.course} onChange={this.handleChange}\n                placeholder=\"Course played\" size=\"50\" maxLength=\"50\" />\n            </label>\n          <p></p>\n          <label>Type:\n          <select name=\"type\" value={this.state.type} \n            className=\"form-control form-center\" onChange={this.handleChange}>\n            <option value=\"practice\">Practice</option>\n            <option value=\"tournament\">Tournament</option>\n          </select> \n          </label>\n          <p></p>\n          <label># Holes:\n          <select name=\"holes\" value={this.state.holes} \n            className=\"form-control form-center\" onChange={this.handleChange}>\n            <option value=\"9\">9</option>\n            <option value=\"18\">18</option>\n          </select> \n          </label>\n          <p></p>\n          <label># Strokes:\n          <input name=\"strokes\" className=\"form-control form-center\" type=\"number\" \n            min=\"9\" max=\"200\" value={this.state.strokes} \n            onChange={this.handleChange} />\n          </label>\n          <p></p>\n          <label>Time: <br></br>\n          <input name=\"minutes\" type=\"number\" size=\"3\"\n            min=\"10\" max=\"400\" value={this.state.minutes}\n            onChange={this.handleChange} />:  \n          <input name=\"seconds\" type=\"number\" size=\"2\"\n            min=\"0\" max=\"60\" value={this.state.seconds} \n            onChange={this.handleChange} />\n          </label>\n          <p></p>\n          <label>Speedgolf Score: <br></br>\n              <input name=\"SGS\" className=\"form-center\" type=\"text\" size=\"6\" \n                disabled={true} value={this.computeSGS(this.state.strokes,this.state.minutes,this.state.seconds)} />\n          </label>\n          <p></p>\n          <label>Notes:\n              <textarea name=\"notes\" className=\"form-control\" rows=\"6\" cols=\"75\" \n                placeholder=\"Enter round notes\" value={this.state.notes} \n                onChange={this.handleChange} />\n          </label>\n          <p></p>\n          <p></p>\n          <button type=\"submit\" style={{width: \"70%\",fontSize: \"36px\"}} \n            className=\"btn btn-primary btn-color-theme\">\n              <span className={this.state.faIcon}/>&nbsp;{this.state.btnLabel}\n          </button>\n          </center>\n        </form>\n      );\n    }\n}\n\nexport default RoundForm;","import React from 'react';\n\nclass FloatingButton extends React.Component {\n    render() {\n      return(\n        <div className=\"floatbtn\" onClick={this.props.handleClick}>\n          <span className=\"floatbtn-icon fa fa-plus\"></span>\n        </div>  \n      );\n    }\n}\n\nexport default FloatingButton;\n","//Rounds -- A parent component for the app's \"rounds\" mode.\n//Manages the rounds data for the current user and conditionally renders the\n//appropriate rounds mode page based on App's mode, which is passed in as a prop.\n\nimport React from 'react';\nimport AppMode from './../AppMode.js';\nimport RoundsTable from './RoundsTable.js';\nimport RoundForm from './RoundForm.js';\nimport FloatingButton from './FloatingButton.js';\n\nclass Rounds extends React.Component {\n\n    //Initialize a Rounds object based on local storage\n    constructor() {\n        super();\n        this.deleteId = \"\";\n        this.editId = \"\";\n        this.state = {errorMsg: \"\"};           \n    }\n\n    //addRound -- Given an object newData containing a new round, use the \n    //server POST route to add the new round to the database. If the add is\n    //successful, call on the refreshOnUpdate() method to force the parent\n    //App component to refresh its state from the database and re-render itself,\n    //allowing the change to be propagated to the Rounds table. Then switch\n    //the mode back to AppMode.ROUNDS since the user is done adding a round.\n    addRound = async (newData) => {\n        const url = '/rounds/' + this.props.userObj.id;\n        const res = await fetch(url, {\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n                },\n            method: 'POST',\n            body: JSON.stringify(newData)}); \n        const msg = await res.text();\n        if (res.status != 200) {\n            this.setState({errorMsg: msg});\n            this.props.changeMode(AppMode.ROUNDS);\n        } else {\n            this.setState({errorMsg: \"\"});\n            this.props.refreshOnUpdate(AppMode.ROUNDS);\n        }\n    }\n\n    //editRound -- Given an object newData containing updated data on an\n    //existing round, update the current user's round in the database. \n    //toggle the mode back to AppMode.ROUNDS since the user is done editing the\n    //round. \n    editRound = async (newData) => {\n        const url = '/rounds/' + this.props.userObj.id + '/' + \n            this.props.userObj.rounds[this.editId]._id;\n        const res = await fetch(url, {\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n                },\n            method: 'PUT',\n            body: JSON.stringify(newData)}); \n        const msg = await res.text();\n        if (res.status != 200) {\n            this.setState({errorMsg: msg});\n            this.props.changeMode(AppMode.ROUNDS);\n        } else {\n            this.props.refreshOnUpdate(AppMode.ROUNDS);\n        }\n    }\n\n\n    //deleteRound -- Delete the current user's round uniquely identified by\n    //this.state.deleteId, delete from the database, and reset deleteId to empty.\n    deleteRound = async () => {\n        const url = '/rounds/' + this.props.userObj.id + '/' + \n            this.props.userObj.rounds[this.deleteId]._id;\n        const res = await fetch(url, {method: 'DELETE'}); \n        const msg = await res.text();\n        if (res.status != 200) {\n            this.setState({errorMsg: \"An error occurred when attempting to delete round from database: \" \n            + msg});\n            this.props.changeMode(AppMode.ROUNDS);\n        } else {\n            this.props.refreshOnUpdate(AppMode.ROUNDS);\n        }  \n    }\n \n    //setDeleteId -- Capture in this.state.deleteId the unique id of the item\n    //the user is considering deleting.\n    setDeleteId = (val) => {\n        this.deleteId = val;\n        this.setState({errorMsg: \"\"});\n    }\n\n    //setEditId -- Capture in this.state.editId the unique id of the item\n    //the user is considering editing.\n    setEditId = (val) => {\n        this.editId = val;\n        this.setState({errorMsg: \"\"});\n    }\n\n    closeErrorMsg = () => {\n        this.setState({errorMsg: \"\"});\n    }\n    \n    //render -- Conditionally render the Rounds mode page as either the rounds\n    //table, the rounds form set to obtain a new round, or the rounds form set\n    //to edit an existing round.\n    render() {\n        switch(this.props.mode) {\n            case AppMode.ROUNDS:\n                return (\n                    <>\n                    {this.state.errorMsg != \"\" ? <div className=\"status-msg\"><span>{this.state.errorMsg}</span>\n                       <button className=\"modal-close\" onClick={this.closeErrorMsg}>\n                          <span className=\"fa fa-times\"></span>\n                        </button></div>: null}\n                    <RoundsTable \n                        rounds={this.props.userObj.rounds}\n                        setEditId={this.setEditId}\n                        setDeleteId={this.setDeleteId}\n                        deleteRound={this.deleteRound}\n                        changeMode={this.props.changeMode}\n                        menuOpen={this.props.menuOpen} /> \n                    <FloatingButton\n                        handleClick={() => \n                        this.props.changeMode(AppMode.ROUNDS_LOGROUND)}\n                        menuOpen={this.props.menuOpen}\n                        icon={\"fa fa-plus\"} />\n                    </>\n                );\n            case AppMode.ROUNDS_LOGROUND:\n                return (\n                    <RoundForm\n                        mode={this.props.mode}\n                        startData={\"\"} \n                        saveRound={this.addRound} />\n                );\n            case AppMode.ROUNDS_EDITROUND:\n                let thisRound = {...this.props.userObj.rounds[this.editId]};\n                thisRound.date = thisRound.date.substr(0,10);\n                if (thisRound.seconds < 10) {\n                    thisRound.seconds = \"0\" + thisRound.seconds;\n                } \n                delete thisRound.SGS;\n                return (\n                    <RoundForm\n                        mode={this.props.mode}\n                        startData={thisRound} \n                        saveRound={this.editRound} />\n                );\n        }\n    }\n\n}   \n\nexport default Rounds;\n","import React from 'react';\nimport WeatherStation from './WeatherStation.js';\n\nclass CoursesPage extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {stations: [],\n                      stationCount: 0,\n                    initialFire: true\n                        };\n        this.removeStation = this.removeStation.bind(this);\n        this.moveStation = this.moveStation.bind(this);\n        \n      }\n\n    componentDidMount = () => {\n        //Initialize based on user's current location, if possible\n        if (this.state.initialFire && !this.props.savedStation) {\n            this.loadStations();\n         }\n         else {\n            navigator.geolocation.getCurrentPosition(this.getLocSuccess,this.getLocError);\n         } \n    }\n    \n     //Called when user agrees to give loc data. We set the first weather\n     //station to show conditions at the user's current position.\n    getLocSuccess = (position) =>  {\n            this.setState({stations: [{lat: 47.6062, \n                lon: -122.3321, \n                stationId: this.state.stationCount+1}],\n            stationCount: this.state.stationCount + 1});\n            \n    }\n  \n    //Called when user refuses to give access to loc data\n    //Initializes first weather station to Seattle in this case\n    getLocError = (err) => {\n        this.setState({stations: [{lat: 47.6062, \n                                   lon: -122.3321, \n                                   stationId: this.state.stationCount+1}],\n                       stationCount: this.state.stationCount + 1});\n                       \n   }\n\n   //addStation -- When user clicks on \"+\" button to add a new weather station,\n    //prompt the user for the location and attempt to add the requested station.\n    addStation = async() => {\n        \n        const newStation = prompt(\"Enter a City, State, and Country:\");\n        if (newStation != null) { //Need to see if we can find the station through the API \n          const response = await fetch('https://api.openweathermap.org/data/2.5/weather?q=' + \n              newStation +  '&appid=' + process.env.REACT_APP_API_KEY);\n          const stationData = await response.json();\n          //See if the requested station exists\n          if (stationData != null && stationData.hasOwnProperty('coord')) { \n              //Push new station into stations list\n            let newStations = [...this.state.stations];\n            newStations.push({lat: stationData.coord.lat, \n                                lon: stationData.coord.lon, \n                                stationId: this.state.stationCount + 1});\n\n            \n            this.setState({stations: newStations,\n                             stationCount: this.state.stationCount + 1}, () => {\n                                this.writeStations(this.state.stationCount, stationData.coord.lat, stationData.coord.lon);\n                             });\n                \n          } else { \n              alert(\"Sorry, that weather location could not be found.\");\n          }\n        }\n    }\n\n    //save the stations to localstorage\n    writeStations(ids, lats, longs) {\n        let thisUser = localStorage.getItem(\"userId\");\n        let data = JSON.parse(localStorage.getItem(thisUser));\n        \n        //Initialize empty JavaScript object to store new or updated station\n        let thisStation = {}; //iniitalize empty object for this station\n\n        for (let i = 0; i < ids.length; i++) {\n            //Store the data\n            thisStation.id = ids[i];\n            thisStation.latitude = lats[i];\n            thisStation.longitude = longs[i];\n\n            data.weatherStations[i + 1] = thisStation;\n            data.weatherStationCount = ids.length;\n            localStorage.setItem(thisUser,JSON.stringify(data));\n            thisStation = {};\n        }  \n    }\n\n    //remove stations from array of weatherstations\n    removeStation(stationId) {\n\n        let newStations = [...this.state.stations];\n        \n        for (let i = 0; i < newStations.length; i++) {\n\n            if (newStations[i].stationId == stationId) {\n                newStations.splice(i, 1);\n            }\n        }\n        \n        //update state\n        this.setState({stations: newStations,\n            stationCount: this.state.stationCount - 1}, () => {\n                \n            });\n    }\n\n    //move the station up or down based on direction/buton clicked\n    moveStation(stationId, direction) {\n\n        let newStations = [...this.state.stations];\n\n        if (direction == \"up\") {\n            \n            if (stationId != newStations[0].stationId) {\n\n                for (let i = 0; i < newStations.length; i++) {\n                    if (newStations[i].stationId == stationId) {\n\n                        var x = i;\n                        var y = i - 1;\n                        //swap\n                        [ newStations[x], newStations[y] ] = [ newStations[y], newStations[x] ];\n                    }\n                }\n\n                 //update array\n                this.setState({stations: newStations}, () => {\n                    \n                });\n            }\n        }\n        else {\n            if (stationId != newStations[newStations.length - 1].stationId) {\n                for (let i = 0; i < newStations.length; i++) {\n                    if (newStations[i].stationId == stationId) {\n                        var x = i;\n                        var y = i + 1;\n\n                        //swap\n                        [ newStations[x], newStations[y] ] = [ newStations[y], newStations[x] ];\n                        break;\n                        \n                    }\n                }\n\n                //update array\n                this.setState({stations: newStations}, () => {\n\n                });\n            }\n        }\n\n        \n    }\n\n    //load stations from localstorage into array of weather stations\n    loadStations() {\n        \n\n        let thisUser = localStorage.getItem(\"userId\");\n        let data = JSON.parse(localStorage.getItem(thisUser));\n\n        //check if null if first time logging in\n        if (data != null) {\n            let rows = [];\n\n        \n            for (let i = 0; i < data.weatherStationCount; i++) {\n                var keyid = i + 1;\n                rows.push({\n                    lat: Number.parseFloat(data.weatherStations[keyid].latitude),\n                    lon: Number.parseFloat(data.weatherStations[keyid].longitude),\n                    stationId: keyid,\n                });\n            }\n            console.log(rows);\n            \n            //set the new array to state\n            this.setState({stations: rows,\n                            stationCount: rows.length,\n                            initialFire: false}, () => {\n                                \n                            });\n        }\n        \n\n        \n    }\n  \n    render() {\n\n        let rows = [];\n        let ids = [];\n        let lats = [];\n        let longs = [];\n\n        for (let i = 0; i < this.state.stations.length; i++) {\n            ids.push(this.state.stations[i].stationId);\n            lats.push(this.state.stations[i].lat);\n            longs.push(this.state.stations[i].lon);\n\n            rows.push(<WeatherStation key={this.state.stations[i].stationId} \n                    latitude={this.state.stations[i].lat} \n                    longitude={this.state.stations[i].lon}\n                    stationId={this.state.stations[i].stationId}\n                    moveStation={this.moveStation}\n                    removeStation={this.removeStation} />);\n        }\n        \n       \n\n        \n        if (this.state.initialFire == false) {\n\n            let thisUser = localStorage.getItem(\"userId\");\n            let data = JSON.parse(localStorage.getItem(thisUser));\n\n            //set to null and resave to make things easier\n            data = null;\n            this.writeStations(ids, lats, longs);\n        }\n\n       //if theres no stations, we want to fire componentDidMount\n       if (this.state.stationCount == 0) {\n            this.componentDidMount();\n       }\n\n        return (\n            <div id=\"main\">\n                <div id=\"weatherStations\">\n                    {rows}\n                </div>\n                <div className=\"floatButton\" id=\"floatBtnDiv\">\n                    <a className=\"float\" id=\"addStationBtn\" onClick={this.addStation}>\n                        <span className=\"float-btn-icon fa fa-plus\" id=\"floatBtnIcon\"></span>\n                    </a>\n                </div>  \n            </div>\n            \n        );\n    }\n}\nexport default CoursesPage;","import React from 'react';\n\nclass AboutBox extends React.Component {\n\nrender() {\n    return (\n        <div className=\"modal\" role=\"dialog\">\n        <div className=\"modal-dialog modal-lg\">\n            <div className=\"modal-content\">\n            <div className=\"modal-header\">\n                <h3>About SpeedScore</h3>\n                <button className=\"modal-close\" onClick={this.props.close}>\n                    &times;\n                </button>\n            </div>\n            <div className=\"modal-body\">\n                <img\n                src=\"https://dl.dropboxusercontent.com/s/awuwr1vpuw1lkyl/SpeedScore4SplashLogo.png\"\n                height=\"200\" width=\"200\"/>\n                <h3>The World's First and Only Suite of Apps for\n                Speedgolf</h3>\n                <p>Version CptS 489 Fa20 Complete (MERN)<br/>\n                &copy; 2017-20 The Professor of Speedgolf. All rights\n                reserved.\n                </p>\n                <div style={{textAlign: \"left\"}}>\n                <p>SpeedScore apps support</p>\n                <ul>\n                <li>live touranment scoring (<i>SpeedScore Live&reg;</i>)</li>\n                <li>tracking personal speedgolf rounds and sharing results\n                (<i>SpeedScore Track&reg;</i>)</li>\n                <li>finding speedgolf-friendly courses, booking tee times, and\n                paying to play speedgolf by the minute (<i>SpeedScore\n                Play&reg;</i>)</li>\n                </ul>\n                <p>SpeedScore was first developed by Dr. Chris Hundhausen,\n                associate professor of computer science at Washington State\n                University and the <i>Professor of Speedgolf</i>, with support\n                from Scott Dawley, CEO of Speedgolf USA, LLC.</p>\n                <p>For more information on SpeedScore, visit <a\n                href=\"http://speedscore.live\" target=\"_blank\">SpeedScore's web\n                site</a>. For more information on speedgolf, visit <a\n                href=\"http://playspeedgolf.com\"\n                target=\"_blank\">playspeedgolf.com</a> and <a\n                href=\"http://usaspeedgolf.com\" target=\"_blank\">Speedgolf\n                USA</a>.</p>\n                </div>\n            </div>\n            <div className=\"modal-footer\">\n                <button className=\"btn btn-primary btn-color-theme\"\n                onClick={this.props.close}>OK</button>\n                </div>\n            </div>\n        </div>\n        </div>\n    );\n    }\n}\n\nexport default AboutBox;","import React from 'react';\nimport NavBar from './NavBar.js';\nimport SideMenu from './SideMenu.js';\nimport ModeBar from './ModeBar.js';\nimport CreateEditAccountDialog from './CreateEditAccountDialog.js'\nimport LoginPage from './LoginPage.js';\nimport AppMode from \"./../AppMode.js\"\nimport FeedPage from './FeedPage.js';\nimport Rounds from './Rounds.js';\nimport CoursesPage from './CoursesPage.js';\nimport AboutBox from './AboutBox.js';\n\nconst modeTitle = {};\n\nmodeTitle[AppMode.LOGIN] = \"Welcome to Some Weather App\";\nmodeTitle[AppMode.FEED] = \"Search\";\nmodeTitle[AppMode.ROUNDS] = \"Favorites\";\nmodeTitle[AppMode.ROUNDS_LOGROUND] = \"New Favorite\";\nmodeTitle[AppMode.ROUNDS_EDITROUND] = \"Edit Favorites\";\nmodeTitle[AppMode.COURSES] = \"Weather History\";\n\n\nconst modeToPage = {};\nmodeToPage[AppMode.LOGIN] = LoginPage;\nmodeToPage[AppMode.FEED] = FeedPage;\nmodeToPage[AppMode.ROUNDS] = Rounds;\nmodeToPage[AppMode.ROUNDS_LOGROUND] = Rounds;\nmodeToPage[AppMode.ROUNDS_EDITROUND] = Rounds;\nmodeToPage[AppMode.COURSES] = CoursesPage;\n\n\nclass App extends React.Component {\n\n  constructor() {\n    super();\n    this.state = {mode: AppMode.LOGIN,\n                  menuOpen: false,\n                  authenticated: false,\n                  userObj: {displayName: \"\", profilePicURL: \"\"},\n                  editAccount: false,\n                  showEditAccountDialog: false,\n                  statusMsg: \"\",\n                  showAboutDialog: false\n                 };\n  }\n\n  //componentDidMount\n  componentDidMount() {\n    if (!this.state.authenticated) { \n      //Use /auth/test route to (re)-test authentication and obtain user data\n      fetch(\"/auth/test\")\n        .then((response) => response.json())\n        .then((obj) => {\n          if (obj.isAuthenticated) {\n            this.setState({\n              userObj: obj.user,\n              authenticated: true,\n              mode: AppMode.FEED //We're authenticated so can get into the app.\n            });\n          }\n        }\n      )\n    } \n  }\n\n  //refreshOnUpdate(newMode) -- Called by child components when user data changes in \n  //the database. The function calls the users/:userid (GET) route to update \n  //the userObj state var based on the latest database changes, and sets the \n  //mode state var is set to newMode. After this method is called, the\n  //App will re-render itself, forcing the new data to \n  //propagate to the child components when they are re-rendered.\n  refreshOnUpdate = async(newMode) => {\n    let response = await fetch(\"/users/\" + this.state.userObj.id);\n    response = await response.json();\n    const obj = JSON.parse(response);\n    this.setState({\n      userObj: obj,\n      mode: newMode\n    });\n  }\n\n\n  handleChangeMode = (newMode) => {\n    this.setState({mode: newMode});\n  }\n\n  openMenu = () => {\n    this.setState({menuOpen : true});\n  }\n  \n  closeMenu = () => {\n    this.setState({menuOpen : false});\n  }\n\n  toggleMenuOpen = () => {\n    this.setState(prevState => ({menuOpen: !prevState.menuOpen}));\n  }\n\n  setUserId = (Id) => {\n    this.setState({userId: Id,\n                   authenticated: true});\n  }\n\n  showEditAccount = () => {\n    this.setState({showEditAccountDialog: true});\n\n  }\n\n  cancelEditAccount = () => {\n    this.setState({showEditAccountDialog: false});\n  }\n\n  //editAccountDone -- called after successful edit or\n  //deletion of user account. msg contains the status\n  //message and deleted indicates whether an account was\n  //edited (deleted == false) or deleted (deleted == true)\n  editAccountDone = (msg, deleted) => {\n    if (deleted) {\n      this.setState({showEditAccountDialog: false,\n                     statusMsg: msg,\n                     mode: AppMode.LOGIN});\n      } else {\n        this.setState({showEditAccountDialog: false,\n          statusMsg: msg});\n      }\n  }\n\n  closeStatusMsg = () => {\n    this.setState({statusMsg: \"\"});\n  }\n\n  render() {\n    const ModePage = modeToPage[this.state.mode];\n    return (\n      <div className=\"padded-page\">\n        {this.state.showAboutDialog ? \n          <AboutBox close={() => this.setState({showAboutDialog: false})}/> : null}\n        {this.state.statusMsg != \"\" ? <div className=\"status-msg\">\n              <span>{this.state.statusMsg}</span>\n              <button className=\"modal-close\" onClick={this.closeStatusMsg}>\n                  <span className=\"fa fa-times\"></span></button></div> : null}\n        {this.state.showEditAccountDialog ? \n            <CreateEditAccountDialog \n              create={false} \n              userId={this.state.userObj.id} \n              done={this.editAccountDone} \n              cancel={this.cancelEditAccount}/> : null}\n        <NavBar \n          title={modeTitle[this.state.mode]} \n          mode={this.state.mode}\n          changeMode={this.handleChangeMode}\n          menuOpen={this.state.menuOpen}\n          toggleMenuOpen={this.toggleMenuOpen}/>\n          <SideMenu \n            menuOpen = {this.state.menuOpen}\n            mode={this.state.mode}\n            toggleMenuOpen={this.toggleMenuOpen}\n            displayName={this.state.userObj.displayName}\n            profilePicURL={this.state.userObj.profilePicURL}\n            localAccount={this.state.userObj.authStrategy === \"local\"}\n            editAccount={this.showEditAccount}\n            logOut={() => this.handleChangeMode(AppMode.LOGIN)}\n            showAbout={() => {this.setState({showAboutDialog: true})}}/>\n          <ModeBar \n            mode={this.state.mode} \n            changeMode={this.handleChangeMode}\n            menuOpen={this.state.menuOpen}/>\n          <ModePage \n            menuOpen={this.state.menuOpen}\n            mode={this.state.mode}\n            changeMode={this.handleChangeMode}\n            userObj={this.state.userObj}\n            refreshOnUpdate={this.refreshOnUpdate}/>\n      </div>\n    );  \n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap-social/bootstrap-social.css';\nimport 'font-awesome/css/font-awesome.min.css';\nimport './styles/index.css';\nimport App from './components/App.js';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}