{"version":3,"sources":["AppMode.js","components/NavBar.js","components/SideMenu.js","components/ModeBar.js","components/ConfirmDeleteAccount.js","components/CreateEditAccountDialog.js","components/ResetPasswordDialog.js","components/LookUpAccountDialog.js","components/SecurityQuestionDialog.js","components/LoginPage.js","components/WeatherStation.js","components/FeedPage.js","components/ConfirmDeleteRound.js","components/RoundsTable.js","components/RoundForm.js","components/FloatingButton.js","components/Rounds.js","components/CoursesPage.js","components/AboutBox.js","components/App.js","serviceWorker.js","index.js"],"names":["AppMode","LOGIN","FEED","ROUNDS","ROUNDS_LOGROUND","ROUNDS_EDITROUND","COURSES","Object","freeze","NavBar","getMenuBtnIcon","props","mode","menuOpen","handleMenuBtnClick","changeMode","toggleMenuOpen","className","onClick","this","id","src","alt","height","width","title","React","Component","SideMenu","renderModeMenuItems","profilePicURL","displayName","localAccount","userObj","editAccount","showAbout","logOut","ModeBar","ConfirmDeleteAccount","handleChange","match","emailRef","current","value","email","state","emailMatches","setState","createRef","focus","role","close","type","ref","onChange","deleteAccount","disabled","CreateEditAccountDialog","checkDataValidity","password","passwordRepeat","repeatPassRef","setCustomValidity","event","formUpdated","origAccountInfo","formIsUpdated","target","name","length","self","reader","FileReader","readAsDataURL","profilePicRef","files","addEventListener","result","updateField","updateVal","securityQuestion","securityAnswer","setDefaultDisplayName","handleSubmit","a","preventDefault","userData","url","accountName","create","fetch","headers","method","body","JSON","stringify","res","status","done","text","resText","confirmDelete","confirmDeleteAccount","e","newUserRef","userId","json","parse","cancel","onSubmit","autocomplete","size","placeholder","pattern","required","onBlur","accept","profilePic","profilePicDataURL","rows","cols","maxLength","ResetPasswordDialog","resetPasswordRef","resetPasswordRepeatRef","resetPassword","errorMsg","checkForSubmit","code","cancelResetPassword","onKeyUp","LookUpAccountDialog","handleLookUpAccount","response","obj","authStrategy","getSecurityAnswer","ErrMsg","errMsg","SecurityQuestionDialog","securityAnswerRef","answer","getNewPassword","readOnly","question","LoginPage","handleLoginSubmit","loginBtnIcon","loginBtnLabel","emailInputRef","passwordInputRef","console","log","window","open","localStorage","setItem","statusMsg","accountCreateDone","msg","showCreateAccountDialog","cancelCreateAccount","resetUserId","resetQ","resetA","showLookUpAccountDialog","showSecurityQuestionDialog","showResetPaswordDialog","handleOAuthLogin","provider","handleOAuthLoginClick","setTimeout","handleGuestLoginClick","pw","showResetPasswordDialog","deleted","closeStatusMsg","githubIcon","githubLabel","guestLabel","guestIcon","googleIcon","googleLabel","facebookIcon","facebookLabel","loginMsg","newAccountCreated","htmlFor","style","padding","fontSize","require","config","WeatherStation","componentDidMount","getCurrentObservations","latitude","longitude","currWeather","iconCode","getIcon","weather","iconUrl","lonSymbol","latSymbol","coord","lat","lon","place","sys","country","Math","abs","retrieved","Date","toLocaleDateString","toLocaleTimeString","conditions","main","visibility","visibilityUnit","temp","round","tempUnit","humidity","wind","speed","deg","favoriteStation","stationId","today","now","getTimezoneOffset","newStation","toUTCString","toString","addWeatherStation","setHistory","count","countHistory","Histories","push","Location","Condition","Visibility","Temperature","Humidity","WindSpeed","windUnit","WindDirection","windDirection","windDirectionUnit","history","prepareHistory","assign","H","weatherIcon","units","addHistory","newData","toggleUnits","parseFloat","toFixed","daytime","align","moveStation","class","removeStation","FeedPage","initialFire","savedStation","loadStations","navigator","geolocation","getCurrentPosition","getLocSuccess","getLocError","position","stations","stationCount","err","addNewStation","document","getElementById","stationData","hasOwnProperty","newStations","station","alert","searchForLocation","reset","refreshOnUpdate","bind","ids","lats","longs","thisUser","getItem","data","thisStation","i","weatherStations","weatherStationCount","splice","direction","x","y","keyid","Number","key","ConfirmDeleteRound","deleteHistory","RoundsTable","editRound","setEditId","deleteRound","showConfirmDelete","setDeleteId","renderTable","table","r","keys","colSpan","fontStyle","RoundForm","newSec","newSGS","computeSGS","strokes","minutes","seconds","SGS","newStrokes","newMin","faIcon","btnLabel","roundData","saveRound","min","sec","date","toISOString","substr","course","holes","notes","thisRound","startData","max","FloatingButton","handleClick","Rounds","addRound","rounds","editId","_id","deleteId","histories","val","closeErrorMsg","icon","CoursesPage","addStation","prompt","writeStations","deleteWeatherStation","weathers","AboutBox","textAlign","href","modeTitle","modeToPage","App","newMode","createLocalStorageForGuest","hasSavedStations","handleChangeMode","openMenu","closeMenu","prevState","setUserId","Id","authenticated","showEditAccount","showEditAccountDialog","cancelEditAccount","editAccountDone","concat","showAboutDialog","then","isAuthenticated","user","ModePage","Boolean","location","hostname","ReactDOM","render","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a41b3843.chunk.js","sourcesContent":["/* AppMode: The enumerated type for AppMode. */\r\n\r\nconst AppMode = {\r\n    LOGIN: \"LoginMode\",\r\n    FEED: \"FeedMode\",\r\n    ROUNDS: \"RoundsMode\",\r\n    ROUNDS_LOGROUND: \"RoundsMode-LogRound\",\r\n    ROUNDS_EDITROUND: \"RoundsMode-EditRound\",\r\n    COURSES: \"CoursesMode\"\r\n};\r\n\r\nObject.freeze(AppMode); //This ensures that the object is immutable.\r\n\r\nexport default AppMode;","import React from 'react';\r\nimport AppMode from '../AppMode';\r\n\r\nclass NavBar extends React.Component {\r\n\r\n  getMenuBtnIcon = () => {\r\n      if (this.props.mode === AppMode.ROUNDS_LOGROUND || \r\n          this.props.mode === AppMode.ROUNDS_EDITROUND)\r\n          return \"fa fa-arrow-left\";\r\n      if (this.props.menuOpen)\r\n        return \"fa fa-times\";\r\n      return \"fa fa-bars\";\r\n  }\r\n\r\n  handleMenuBtnClick = () => {\r\n    if (this.props.mode === AppMode.ROUNDS_LOGROUND ||\r\n        this.props.mode === AppMode.ROUNDS_EDITROUND) {\r\n      this.props.changeMode(AppMode.ROUNDS);\r\n    } else if (this.props.mode != AppMode.LOGIN) {\r\n      this.props.toggleMenuOpen();\r\n    }\r\n  }\r\n\r\n    \r\n  render() {\r\n    return (\r\n    <div className=\"navbar\">  \r\n    <span className=\"navbar-items\">\r\n      <button className=\"sidemenu-btn\" onClick={this.handleMenuBtnClick}>\r\n        <span id=\"menuBtnIcon\" className={\"sidemenu-btn-icon \" + this.getMenuBtnIcon()}>\r\n        </span>\r\n      </button>\r\n      <img src=\"https://openrepeater.com/wp-content/uploads/2019/12/icon-weather-sunrainheavy-512.png\" alt=\"Weather Tracker Logo\" height=\"38px\" width=\"38px\" />\r\n      <span className=\"navbar-title\">\r\n        &nbsp;{this.props.title}\r\n      </span>\r\n    </span>\r\n  </div>\r\n); \r\n}\r\n}\r\n\r\nexport default NavBar;\r\n","import React from 'react';\r\nimport AppMode from './../AppMode.js'\r\n\r\nclass SideMenu extends React.Component {\r\n\r\n//renderModeItems -- Renders correct subset of mode menu items based on\r\n//current mode, which is stored in this.prop.mode. Uses switch statement to\r\n//determine mode.\r\nrenderModeMenuItems = () => {\r\n  switch (this.props.mode) {\r\n    case AppMode.FEED:\r\n      return(\r\n        <div>\r\n          <a className=\"sidemenu-item\">\r\n            <span className=\"fa fa-plus\"></span>&nbsp;Favorites</a>\r\n\r\n          <a className=\"sidemenu-item\">\r\n            <span className=\"fa fa-search\"></span>&nbsp;History</a>\r\n        </div>\r\n      );\r\n    break;\r\n    case AppMode.ROUNDS:\r\n      return(\r\n        <div>\r\n          <a className=\"sidemenu-item\">\r\n            <span className=\"fa fa-plus\" ></span>&nbsp;Search</a>\r\n\r\n          <a className=\"sidemenu-item\">\r\n            <span className=\"fa fa-search\"></span>&nbsp;Favorites</a>\r\n        </div>\r\n      );\r\n    break;\r\n    case AppMode.COURSES:\r\n      return(\r\n        <div>\r\n        <a className=\"sidemenu-item\">\r\n            <span className=\"fa fa-plus\"></span>&nbsp;Search</a>\r\n        <a className=\"sidemenu-item\">\r\n            <span className=\"fa fa-search\"></span>&nbsp;History</a>\r\n        </div>\r\n      );\r\n    default:\r\n        return null;\r\n    }\r\n}\r\n\r\n    render() {\r\n       return (\r\n        <div className={\"sidemenu \" + (this.props.menuOpen ? \"sidemenu-open\" : \"sidemenu-closed\")}\r\n             onClick={this.props.toggleMenuOpen}>\r\n          {/* SIDE MENU TITLE */}\r\n          <div className=\"sidemenu-title\">\r\n            <img src={this.props.profilePicURL} height='60' width='60' />\r\n            <span id=\"userID\" className=\"sidemenu-userID\">&nbsp;{this.props.displayName}</span>\r\n        </div>\r\n          {/* MENU CONTENT */}\r\n          {this.renderModeMenuItems()}\r\n          {/* The following menu items are present regardless of mode */}\r\n          {this.props.localAccount && this.props.userObj.id !== \"guest@mail.com\" ? \r\n            <a id=\"accountBtn\" className=\"sidemenu-item\" onClick={this.props.editAccount}>\r\n              <span className=\"fa fa-user\"></span>&nbsp;Account</a> : null}\r\n\r\n\r\n          <a id=\"aboutBtn\" className=\"sidemenu-item\" onClick={this.props.showAbout}>\r\n            <span className=\"fa fa-info-circle\"></span>&nbsp;About</a>\r\n          <a id=\"logOutBtn\" className=\"sidemenu-item\" onClick={this.props.logOut}>\r\n            <span className=\"fa fa-sign-out-alt\"></span>&nbsp;Log Out</a>\r\n        </div>\r\n       );\r\n    }\r\n}\r\n\r\nexport default SideMenu;\r\n","import React from 'react';\r\nimport AppMode from '../AppMode.js';\r\n\r\n\r\nclass ModeBar extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className={\"modebar\" + (this.props.mode === AppMode.LOGIN ?\r\n        \" invisible\" : (this.props.menuOpen ? \" ignore-click visible\" : \" visible\"))}>\r\n        <a className={(this.props.mode === AppMode.FEED ? \" item-selected\" : null)}\r\n          onClick={() => this.props.changeMode(AppMode.FEED)}>\r\n          <span className=\"modebaricon fa fa-search\" id=\"searchTab\"></span>\r\n          <span className=\"modebar-text\">Search Location</span>\r\n        </a>\r\n        <a className={(this.props.mode === AppMode.COURSES ? \" item-selected\" : null)}\r\n          onClick={() => this.props.changeMode(AppMode.COURSES)}>\r\n          <span className=\"modebar-icon  fa fa-star\" id=\"favoritesTab\"></span>\r\n          <span className=\"modebar-text\">Favorites</span>\r\n        </a>\r\n\r\n        <a className={(this.props.mode === AppMode.ROUNDS ||\r\n          this.props.mode === AppMode.ROUNDS_EDITROUND ||\r\n          this.props.mode === AppMode.ROUNDS_LOGROUND ?\r\n          \" item-selected\" : null)}\r\n          onClick={() => this.props.changeMode(AppMode.ROUNDS)}>\r\n          <span className=\"modebar-icon fa fa-book\" id=\"historyTab\"></span>\r\n          <span className=\"modebar-text\">Weather History</span>\r\n        </a>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ModeBar;\r\n","import React from 'react';\r\n\r\nclass ConfirmDeleteAccount extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.emailRef = React.createRef();\r\n        this.state = {emailMatches: false};\r\n    }\r\n    \r\n    componentDidMount() {\r\n        this.emailRef.current.focus();\r\n    }\r\n\r\n    handleChange = () => {\r\n        const match = (this.emailRef.current.value === this.props.email);\r\n        if (match != this.state.emailMatches) {\r\n            this.setState({emailMatches: match});\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n        <div id=\"aboutModal\" className=\"modal\" role=\"dialog\">\r\n        <div className=\"modal-content\">\r\n            <div className=\"modal-header\">\r\n              <center>\r\n                <h3 className=\"modal-title\"><b>Confirm Account Deletion</b></h3>\r\n              </center>\r\n               <button id=\"modalClose\" className=\"modal-close\" onClick={this.props.close}>\r\n                 &times;</button>\r\n            </div>\r\n            <div className=\"modal-body\">\r\n              <p>Do you really want to delete your account? <br />\r\n                 <i>This action cannot be undone.</i></p>\r\n              <label>\r\n                Confirm Email ({this.props.email}):\r\n                <br/>\r\n                <input \r\n                    className=\"form-center\"\r\n                    type=\"text\"\r\n                    ref={this.emailRef}\r\n                    onChange={this.handleChange} />\r\n                </label>\r\n                <br />\r\n            </div>\r\n            <div className=\"modal-footer\">\r\n                  <button className=\"btn btn-danger\" onClick={this.props.deleteAccount} disabled={!this.state.emailMatches}>\r\n                  Yes, Delete My Account</button>\r\n                  <button className=\"btn btn-secondary\" onClick={this.props.close}>\r\n                  No, Cancel</button>\r\n            </div>\r\n        </div>\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ConfirmDeleteAccount;","import React from 'react';\r\nimport ConfirmDeleteAccount from './ConfirmDeleteAccount.js';\r\nimport confirmDeleteAccount from './ConfirmDeleteAccount.js';\r\n\r\nclass CreateEditAccountDialog extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.origAccountInfo = null;\r\n        //Create a ref for the email input DOM element\r\n        this.newUserRef = React.createRef();\r\n        this.repeatPassRef = React.createRef();\r\n        this.profilePicRef = React.createRef();\r\n        this.state = {accountName: \"\",\r\n                      displayName: \"\",\r\n                      profilePicURL: \"https://icon-library.net//images/default-profile-icon/default-profile-icon-24.jpg\",\r\n                      password: \"\",\r\n                      passwordRepeat: \"\",\r\n                      securityQuestion: \"\",\r\n                      securityAnswer: \"\",\r\n                      formUpdated: false,\r\n                      confirmDelete: false};\r\n    } \r\n\r\n    //componentDidMount -- If we are editing an existing user acccount, we need to grab the data from\r\n    //the database and push them into the state.\r\n    async componentDidMount() {\r\n        if (!this.props.create) {\r\n            //obtain current user data from database and push into state\r\n            const url = \"/users/\" + this.props.userId;\r\n            const res = await fetch(url);\r\n            const json = await res.json();\r\n            const userData = JSON.parse(json);\r\n            this.origAccountInfo = userData; //This determines whether update can occur\r\n            this.origAccountInfo.passwordRepeat = userData.password;\r\n            this.setState({accountName: this.props.userId,\r\n                           displayName: userData.displayName,\r\n                           profilePicURL: userData.profilePicURL,\r\n                           password: userData.password,\r\n                           passwordRepeat: userData.password,\r\n                           securityQuestion: userData.securityQuestion,\r\n                           securityAnswer: userData.securityAnswer});\r\n        }\r\n    }\r\n\r\n    //checkDataValidity -- Callback function invoked after a form element in\r\n    //the 'Create Account' dialog box changes and component state has been\r\n    //updated. We first check whether the passwords match. If they do not, \r\n    //we set a custom validity message to be displayed when the user clicks the\r\n    //'Create Account' button. Otherwise, we reset the custom validity message\r\n    //to empty so that it will NOT fire when the user clicks 'Create Account'.\r\n    //Second, we check whether anything in the form changed from the original.\r\n    //If so, we update the 'formUpdated' state var, so that the form's submit\r\n    //button is enabled.\r\n    checkDataValidity = () => {\r\n        if (this.state.password != this.state.passwordRepeat) {\r\n            //Passwords don't match\r\n            this.repeatPassRef.current.setCustomValidity(\r\n            \"This password must match password entered in previous field.\");\r\n        } else {\r\n            this.repeatPassRef.current.setCustomValidity(\"\");\r\n        }\r\n    }\r\n\r\n    //handleChange--Called when a field in a dialog box form changes.\r\n    handleChange = (event) => {\r\n        const formUpdated = (this.origAccountInfo == null ? true : this.formIsUpdated(event.target.name,event.target.value));\r\n        if (event.target.name === \"profilePic\") {\r\n            if (event.target.value.length == 0) { //The user canceled the file selection -- set back to default\r\n                this.setState({profilePicURL: \"https://icon-library.net//images/default-profile-icon/default-profile-icon-24.jpg\",\r\n                               formUpdated: formUpdated},\r\n                               this.checkDataValidity);\r\n            } else { //The user selected a file\r\n                const self = this;\r\n                const reader = new FileReader();\r\n                reader.readAsDataURL(this.profilePicRef.current.files[0]);\r\n                reader.addEventListener(\"load\",function() {\r\n                    self.setState({profilePicURL:  this.result,\r\n                                   formUpdated: formUpdated},this.checkDataValidity);\r\n                });\r\n                \r\n            }\r\n        } else {\r\n            this.setState({[event.target.name]: event.target.value,\r\n                           formUpdated: formUpdated},this.checkDataValidity);\r\n        }\r\n    } \r\n\r\n    //formisUpdated-- Checks whether any form data element has changed from the original. If so, \r\n    //returns true. Returns false otherwise. Note that in case of editing new account, always returns\r\n    //true since this.origAccountInfo is set to null.\r\n    //Should be called whenever the user makes a change to form data.\r\n    formIsUpdated = (updateField,updateVal) => {\r\n        if (this.origAccountInfo[updateField] != updateVal) {return true;}\r\n        if (updateField != \"displayName\" && \r\n             this.state.displayName != this.origAccountInfo.displayName) \r\n             {return true;}\r\n        if (updateField != \"profilePicURL\" && \r\n             this.state.profilePicURL != this.origAccountInfo.profilePicURL) \r\n             {return true;}\r\n        if (updateField != \"password\" &&\r\n            this.state.password !== this.origAccountInfo.password)\r\n            {return true;}\r\n        if (updateField != \"passwordRepeat\" &&\r\n            this.state.passwordRepeat !== this.origAccountInfo.passwordRepeat)\r\n            {return true;}\r\n        if (updateField != \"securityQuestion\" &&\r\n            this.state.securityQuestion !== this.origAccountInfo.securityQuestion)\r\n            {return true;}\r\n        if (updateField != \"securityAnswer\" &&\r\n            this.state.securityAnswer !== this.origAccountInfo.securityAnswer)\r\n            {return true;}\r\n        return false;\r\n    }\r\n\r\n    //setDefaultDisplayName -- Triggered by onBlur() event of Email field.\r\n    //Sets default value of display name to value entered into Email field \r\n    //as a courtesy.\r\n    setDefaultDisplayName = (event) => {\r\n      if (event.target.value.length > 0 && this.state.displayName === \"\") {\r\n        this.setState({displayName: event.target.value});\r\n      }\r\n    }\r\n\r\n    //handleSubmit -- Triggered when user clicks on submit button to\r\n    //either create or edit account.\r\n    //Custom data checking ensures user account under this email does not \r\n    //already exist and that the rest of the info is valid. We create a new  \r\n    // object for user, save it to localStorage and take user to app's \r\n    //landing page. \r\n    handleSubmit = async(event) => {\r\n        event.preventDefault();\r\n        //Initialize user account\r\n        let userData = {\r\n            displayName: this.state.displayName,\r\n            password: this.state.password,\r\n            profilePicURL: this.state.profilePicURL,\r\n            securityQuestion: this.state.securityQuestion,\r\n            securityAnswer: this.state.securityAnswer\r\n        };\r\n        const url = '/users/' + this.state.accountName;\r\n        let res;\r\n        if (this.props.create) { //use POST route to create new user account\r\n            res = await fetch(url, {\r\n                headers: {\r\n                    'Accept': 'application/json',\r\n                    'Content-Type': 'application/json'\r\n                    },\r\n                method: 'POST',\r\n                body: JSON.stringify(userData)}); \r\n            if (res.status == 200) { //successful account creation!\r\n                this.props.done(\"New account created! Enter credentials to log in.\",false);\r\n            } else { //Unsuccessful account creation\r\n                //Grab textual error message\r\n                const resText = await res.text();\r\n                this.props.done(resText,false);\r\n            }\r\n        } else { //use PUT route to update existing user account\r\n            res = await fetch(url, {\r\n                headers: {\r\n                    'Accept': 'application/json',\r\n                    'Content-Type': 'application/json'\r\n                    },\r\n                method: 'PUT',\r\n                body: JSON.stringify(userData)}); \r\n            if (res.status == 200) { //successful account creation!\r\n                this.props.done(\"User Account Updated!\",false);\r\n            } else { //Unsuccessful account update\r\n                //Grab textual error message\r\n                const resText = await res.text();\r\n                this.props.done(resText,false);\r\n            }\r\n        }\r\n    }\r\n\r\n    //deleteAccount -- Called after confirms account deletion. \r\n    //Uses DELETE server route to perform server deletion. \r\n    //Calls on done with status message and\r\n    //true if delete was succesful, false otherwise.\r\n    deleteAccount = async() => {\r\n       const url = '/users/' + this.state.accountName;\r\n       const res = await fetch(url, \r\n                    {method: 'DELETE'}); \r\n        if (res.status == 200) { //successful account deletion!\r\n            this.props.done(\"Account '\" + this.state.accountName + \"' has been deleted.\",true);\r\n        } else { //Unsuccessful account deletion\r\n            //Grab textual error message\r\n            const resText = await res.text();\r\n            this.props.done(resText,false);\r\n        }\r\n        this.setState({confirmDelete: false});\r\n    }\r\n\r\n    //confirmDeleteAccount -- Called when user clicks on \"Delete Account...\"\r\n    //button to indicate intention to delete account. Presents the Confirm\r\n    //Delete dialog box.\r\n    confirmDeleteAccount = (e) => {\r\n        e.preventDefault();\r\n        this.setState({confirmDelete: true});\r\n    }\r\n\r\n    render() {\r\n    return (  \r\n    <div className=\"modal\" role=\"dialog\">\r\n    <div className=\"modal-dialog modal-lg\"></div>\r\n        <div className=\"modal-content form-center\">\r\n            <div className=\"modal-header\">\r\n              <h3><b>{this.props.create ? \"Create New Account\" : \"Edit Account\"}</b></h3>\r\n              <button className=\"modal-close\" \r\n                       onClick={this.props.cancel}>\r\n                &times;</button>\r\n            </div>\r\n            <div className=\"modal-body\">\r\n            <form onSubmit={this.handleSubmit}>\r\n            <label>\r\n                Email: \r\n                <input  \r\n                autocomplete=\"off\"\r\n                disabled={!this.props.create}\r\n                className=\"form-control form-text form-center\"\r\n                name=\"accountName\"\r\n                type=\"email\"\r\n                size=\"35\"\r\n                placeholder=\"Enter Email Address\"\r\n                pattern=\"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}\"\r\n                required={true}\r\n                ref={this.newUserRef}\r\n                value={this.state.accountName}\r\n                onChange={this.handleChange}\r\n                onBlur={this.setDefaultDisplayName}\r\n                />\r\n            </label>\r\n            <br/>\r\n            <label>\r\n                Password:\r\n                <input\r\n                autocomplete=\"off\"\r\n                className=\"form-control form-text form-center\"\r\n                name=\"password\"\r\n                type=\"password\"\r\n                size=\"35\"\r\n                placeholder=\"Enter Password\"\r\n                pattern=\r\n                \"(?=^.{8,}$)((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z])(?=.*[a-z]).*$\"\r\n                required={true}\r\n                value={this.state.password}\r\n                onChange={this.handleChange}\r\n                />\r\n            </label>\r\n            <br/>\r\n            <label>\r\n                Repeat Password:\r\n                <input\r\n                className=\"form-control form-text form-center\"\r\n                name=\"passwordRepeat\"\r\n                type=\"password\"\r\n                size=\"35\"\r\n                placeholder=\"Repeat Password\"\r\n                required={true}\r\n                ref={this.repeatPassRef}\r\n                value={this.state.passwordRepeat}\r\n                onChange={this.handleChange}\r\n                />\r\n            </label>\r\n            <br/>\r\n            <label>\r\n                Display Name:\r\n                <input\r\n                className=\"form-control form-text form-center\"\r\n                name=\"displayName\"\r\n                type=\"text\"\r\n                size=\"30\"\r\n                placeholder=\"Display Name\"\r\n                required={true}\r\n                value={this.state.displayName}\r\n                onChange={this.handleChange}\r\n                />\r\n            </label>\r\n            <br/>\r\n            <label>\r\n                Profile Picture:<br/>\r\n                <input\r\n                className=\"form-control form-text form-center\"\r\n                name=\"profilePic\"\r\n                type=\"file\"\r\n                accept=\"image/x-png,image/gif,image/jpeg\" \r\n                ref={this.profilePicRef}\r\n                value={this.state.profilePic}\r\n                onChange={this.handleChange}\r\n                />\r\n                <img src={this.state.profilePicURL != \"\" ? \r\n                            this.state.profilePicURL :\r\n                            this.state.profilePicDataURL} \r\n                        height=\"60\" width=\"60\" \r\n                 />\r\n            </label> \r\n            <br/>\r\n            <label>\r\n                Security Question:\r\n                <textarea\r\n                className=\"form-control form-text form-center\"\r\n                name=\"securityQuestion\"\r\n                size=\"35\"\r\n                placeholder=\"Security Question\"\r\n                rows=\"2\"\r\n                cols=\"35\"\r\n                maxLength=\"100\"\r\n                required={true}\r\n                value={this.state.securityQuestion}\r\n                onChange={this.handleChange}\r\n                />\r\n            </label>\r\n            <br/>\r\n            <label>\r\n                Answer to Security Question:\r\n                <textarea\r\n                className=\"form-control form-text form-center\"\r\n                name=\"securityAnswer\"\r\n                type=\"text\"\r\n                placeholder=\"Answer\"\r\n                rows=\"2\"\r\n                cols=\"35\"\r\n                maxLength=\"100\"\r\n                required={true}\r\n                value={this.state.securityAnswer}\r\n                onChange={this.handleChange}\r\n                />\r\n            </label>\r\n            <br/>\r\n            {!this.props.create ?  \r\n            <button className=\"btn btn-small btn-danger\" onClick={this.confirmDeleteAccount}>\r\n                Delete Account...\r\n            </button> : null}\r\n            <br/><br/>\r\n            <button role=\"submit\" \r\n                disabled={!this.state.formUpdated}\r\n                className=\"btn btn-primary btn-color-theme modal-submit-btn\">\r\n                <span className={this.props.create ? \"fa fa-user-plus\" : \"fa fa-user\"}></span>\r\n                &nbsp;{this.props.create ? \"Create Account\" : \"Update Account\"}\r\n            </button>\r\n            </form>\r\n            </div>\r\n        </div>\r\n        {this.state.confirmDelete ? \r\n          <ConfirmDeleteAccount email={this.state.accountName}\r\n                                deleteAccount={this.deleteAccount}\r\n                                close={() => (this.setState({confirmDelete: false}))}\r\n         /> : null}\r\n    </div>\r\n    );\r\n}\r\n}\r\n\r\nexport default CreateEditAccountDialog;","import React from 'react'\r\n\r\nclass ResetPasswordDialog extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.resetPasswordRef = React.createRef();\r\n        this.resetPasswordRepeatRef = React.createRef();\r\n        this.state = {errorMsg: \"\"};\r\n    }\r\n\r\n    //handleSubmit -- When the user submits the form, ensure that the passwords match.\r\n    //If so, call on resetPassword in parent component to actually reset the password.\r\n    //Otherwise, display an error message prompting the user to try again.\r\n    handleSubmit= (event) => {\r\n        event.preventDefault();\r\n        if (this.resetPasswordRef.current.value === this.resetPasswordRepeatRef.current.value) {\r\n            this.props.resetPassword(this.resetPasswordRef.current.value);\r\n        } else {\r\n            this.resetPasswordRepeatRef.current.focus();\r\n            this.setState({errorMsg: \"The passwords you entered do not match. Please try again.\"});\r\n        }\r\n    }\r\n\r\n    checkForSubmit = (e) => {\r\n        if (e.code === \"Enter\") {\r\n            e.preventDefault();\r\n            this.handleSubmit();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"modal\" role=\"dialog\">\r\n              <div className=\"modal-dialog modal-lg\">\r\n                <div className=\"modal-content\">\r\n                  <div className=\"modal-header\">\r\n                    <h3 className=\"modal-title\"><b>Reset Password</b>\r\n                    </h3>\r\n                    <button className=\"modal-close\" \r\n                        onClick={this.props.cancelResetPassword}>\r\n                        &times;\r\n                    </button>\r\n                  </div>\r\n                  <div className=\"modal-body\">\r\n                    {this.state.errorMsg != \"\" ? <p className=\"emphasis\">{this.state.errorMsg}</p> : null} \r\n                    <form onSubmit={this.handleSubmit}>\r\n                    <label>\r\n                        New Password: \r\n                        <input\r\n                        type=\"password\"\r\n                        placeholder=\"Enter new password\"\r\n                pattern=\"(?=^.{8,}$)((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z])(?=.*[a-z]).*$\"\r\n                        className=\"form-control form-text\"\r\n                        ref={this.resetPasswordRef}\r\n                        />\r\n                    </label>\r\n                    <label>\r\n                        Repeat New Password: \r\n                        <input\r\n                        type=\"password\"\r\n                        placeholder=\"Repeat new password\"\r\n                        className=\"form-control form-text\"\r\n                        onKeyUp={this.checkForSubmit}\r\n                        ref={this.resetPasswordRepeatRef}\r\n                        />\r\n                    </label>\r\n                    <button role=\"submit\" \r\n                     className=\"btn btn-primary btn-color-theme form-submit-btn\">\r\n                        <span className=\"fa fa-key\"></span>&nbsp;Reset Password\r\n                    </button>\r\n                    </form>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          );\r\n        \r\n    }\r\n}\r\n\r\nexport default ResetPasswordDialog;","import React from 'react';\r\nimport AppMode from '../AppMode.js';\r\n\r\nclass LookUpAccountDialog extends React.Component {\r\n\r\n    constructor() {\r\n        super();\r\n        this.emailRef = React.createRef();\r\n        this.state = {errorMsg: \"\"};\r\n    }\r\n\r\n    //handleLookUpAccount: When the user clicks on the \"Look Up Account\" dialog box\r\n    //button, we check whether the account exists. If it does, we update the state,\r\n    //setting the resetEmail var to the email entered, hiding the current dialog box\r\n    //and showing the security question dialog box.\r\n    handleLookUpAccount = async(event) => {\r\n        event.preventDefault();\r\n        let response = await fetch(\"/users/\" + this.emailRef.current.value);\r\n        if (response.status == 200) {\r\n            const json = await response.json();\r\n            const obj = JSON.parse(json);\r\n            if (obj.authStrategy === \"local\") {\r\n                this.props.getSecurityAnswer(obj.id,obj.securityQuestion, obj.securityAnswer);\r\n            } else { //Account exists but was created through OAuth so password can't be reset \r\n                this.setState({ErrMsg: \"That account is authenticated through \" + obj.authStrategy + \". \" +\r\n                               \"Please log in to \" + obj.authStrategy + \" to reset the password.\"});\r\n            }\r\n        } else {\r\n            this.setState({errorMsg: \"Sorry, there is no account associated with '\" + this.emailRef.current.value + \"'.\"});\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"modal\" role=\"dialog\">\r\n              <div className=\"modal-dialog modal-lg\">\r\n                <div className=\"modal-content\">\r\n                  <div className=\"modal-header\">\r\n                    <h3 className=\"modal-title\"><b>Look Up Account</b></h3>\r\n                    <button className=\"modal-close\" \r\n                        onClick={() => {this.props.cancelResetPassword()}}>\r\n                        &times;\r\n                    </button>\r\n                  </div>\r\n                  <div className=\"modal-body\">\r\n                    {this.state.errMsg != \"\" ? <p className=\"emphasis\">{this.state.errorMsg}</p> : null}\r\n                    <form onSubmit={this.handleLookUpAccount}>\r\n                    <label>\r\n                        Account Email Address: \r\n                        <input\r\n                        ref={this.emailRef}\r\n                        className=\"form-control form-text\"\r\n                        type=\"email\"\r\n                        size=\"35\"\r\n                        placeholder=\"Enter Email Address\"\r\n                        pattern=\"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}\"\r\n                        ref={this.emailRef}\r\n                        required={true}\r\n                        />\r\n                    </label>\r\n                    <button type=\"submit\" \r\n                        className=\"btn btn-primary btn-color-theme form-submit-btn\">\r\n                        <span className=\"fa fa-search\"></span>&nbsp;Look Up Account\r\n                    </button>\r\n                    </form>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>  \r\n        );   \r\n    }\r\n\r\n}\r\n\r\nexport default LookUpAccountDialog;\r\n","import React from 'react';\r\n\r\nclass SecurityQuestionDialog extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.securityAnswerRef = React.createRef();\r\n        this.state = {errorMsg: \"\"};\r\n    }\r\n\r\n    //Focus cursor in email secrity answer field when mounted\r\n    componentDidMount() {\r\n        this.securityAnswerRef.current.focus();\r\n    }  \r\n\r\n    handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        if (this.securityAnswerRef.current.value === this.props.answer) {\r\n            this.props.getNewPassword();\r\n        } else {\r\n            this.securityAnswerRef.current.focus();\r\n            this.setState({errorMsg: \"Sorry, that is not the correct answer to the security question. Try again.\"});\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"modal\" role=\"dialog\">\r\n              <div className=\"modal-dialog modal-lg\">\r\n                <div className=\"modal-content\">\r\n                  <div className=\"modal-header\">\r\n                    <h3 className=\"modal-title\"><b>Answer Security Question</b>\r\n                    </h3>\r\n                    <button className=\"modal-close\" \r\n                        onClick={this.props.cancelResetPassword}>\r\n                        &times;\r\n                    </button>\r\n                  </div>\r\n                  <div className=\"modal-body\">\r\n                    {this.state.errorMsg != \"\" ? <p className=\"emphasis\">{this.state.errorMsg}</p> : null} \r\n                    <form onSubmit={this.handleSubmit}>\r\n                    <label>\r\n                        Security Question: \r\n                        <textarea\r\n                        readOnly={true}\r\n                        value={this.props.question}\r\n                        className=\"form-control form-text\"\r\n                        rows=\"3\"\r\n                        cols=\"35\"\r\n                        />\r\n                    </label>\r\n                    <label>\r\n                        Security Answer: \r\n                        <textarea\r\n                        className=\"form-control form-text\"\r\n                        placeholder=\"Enter Security Question Answer\"\r\n                        ref={this.securityAnswerRef}\r\n                        rows=\"3\"\r\n                        cols=\"35\"\r\n                        />\r\n                    </label>\r\n                    <button role=\"submit\" \r\n                      className=\"btn btn-primary btn-color-theme form-submit-btn\">\r\n                        <span className=\"fa fa-check\"></span>&nbsp;Verify Answer\r\n                    </button>\r\n                    </form>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          );        \r\n    }\r\n}\r\n export default SecurityQuestionDialog;","import React from 'react';\r\nimport CreateEditAccountDialog from './CreateEditAccountDialog.js';\r\nimport ResetPasswordDialog from './ResetPasswordDialog.js';\r\nimport LookUpAccountDialog from './LookUpAccountDialog.js';\r\nimport SecurityQuestionDialog from './SecurityQuestionDialog.js';\r\n\r\nclass LoginPage extends React.Component {\r\n\r\nconstructor() {\r\n    super();\r\n    //Create a ref for the email input DOM element\r\n    this.emailInputRef = React.createRef();\r\n    this.resetUserId = \"\";\r\n    this.resetQ = \"\";\r\n    this.resetA = \"\";\r\n    this.passwordInputRef = React.createRef();\r\n    this.state = {statusMsg: \"\",\r\n                  loginBtnIcon: \"fa fa-sign-in\",\r\n                  loginBtnLabel: \"Log In\",\r\n                  showLookUpAccountDialog: false,\r\n                  showSecurityQuestionDialog: false,\r\n                  showResetPaswordDialog: false,\r\n                  githubIcon: \"fa fa-github\",\r\n                  githubLabel: \"Sign in with GitHub\",\r\n                  guestLabel: \"Sign in as guest\",\r\n                  guestIcon: \"fa fa-user-alt\",\r\n                  googleIcon: \"fa fa-google\",\r\n                  googleLabel: \"Sign in with Google\",\r\n                  facebookIcon: \"fa fa-facebook-f\",\r\n                  facebookLabel: \"Sign in with Facebook\",\r\n                  loginMsg: \"\",\r\n                  newAccountCreated: false\r\n                  };\r\n} \r\n    \r\n//Focus cursor in email input field when mounted\r\ncomponentDidMount() {\r\n    this.emailInputRef.current.focus();\r\n}  \r\n\r\n//handleLoginSubmit -- Called when user clicks on login button.\r\nhandleLoginSubmit = async (event) => {\r\n    event.preventDefault();\r\n    this.setState({loginBtnIcon: \"fa fa-spin fa-spinner\",\r\n                   loginBtnLabel: \"Logging In...\"});\r\n    const url = \"auth/login?username=\" + this.emailInputRef.current.value +\r\n                \"&password=\" + this.passwordInputRef.current.value;\r\n\r\n    console.log(\"user: \" + this.emailInputRef.current.value);\r\n    console.log(\"pass: \" + this.passwordInputRef.current.value);\r\n\r\n    const res = await fetch(url, {method: 'POST'}); \r\n    if (res.status == 200) { //successful login!\r\n        window.open(\"/\",\"_self\");\r\n\r\n    localStorage.setItem(\"userId\", this.emailInputRef.current.value);\r\n\r\n    } else { //Unsuccessful login\r\n      const resText = await res.text();\r\n      this.setState({loginBtnIcon: \"fa fa-sign-in\",\r\n                     loginBtnLabel: \"Log In\",\r\n                     statusMsg: resText});\r\n    }\r\n}\r\n\r\n  //accountCreateDone -- Called by child CreateAccountDialog component when \r\n  //user attempted to create new account. Hide the dialog and display \r\n  //a message indicating result of the attempt.\r\n  accountCreateDone = (msg) => {\r\n      this.setState({statusMsg: msg,\r\n                     showCreateAccountDialog: false});\r\n  }\r\n\r\n  //cancelCreateAccount -- Called by child CreateAccountDialog componenet when user decides\r\n  //to cancel creation of new account by clicking the \"X\" in top-right of dialog.\r\n  cancelCreateAccount = () => {\r\n      this.setState({showCreateAccountDialog: false});\r\n  }\r\n\r\n//cancelResetPassword -- Called by one of the child three child dialog box components when\r\n//the user decides to cancel resetting their password. Toggles state so that all three\r\n//of the dialog boxes are hidden\r\ncancelResetPassword = () => {\r\n    this.resetUserId = \"\";\r\n    this.resetQ = \"\";\r\n    this.resetA = \"\";\r\n    this.setState({showLookUpAccountDialog: false,\r\n                   showSecurityQuestionDialog: false,\r\n                   showResetPaswordDialog: false});             \r\n}\r\n\r\n//handleOAuthLogin -- Callback function that initiates contact with OAuth\r\n//provider\r\nhandleOAuthLogin = (provider) => {\r\n    window.open(`/auth/${provider}`,\"_self\");\r\n}\r\n\r\n//handleOAuthLoginClick -- Called whent the user clicks on button to\r\n//authenticate via a third-party OAuth service. The name of the provider is\r\n//passed in as a parameter.\r\nhandleOAuthLoginClick = (provider) => {\r\n   this.setState({[provider + \"Icon\"] : \"fa fa-spin fa-spinner\",\r\n                  [provider + \"Label\"] : \"Connecting...\"});\r\n   setTimeout(() => this.handleOAuthLogin(provider),1000);\r\n}\r\n\r\nhandleGuestLoginClick = async (event) => {\r\n    event.preventDefault();\r\n    this.setState({loginBtnIcon: \"fa fa-spin fa-spinner\",\r\n                   loginBtnLabel: \"Logging In...\"});\r\n    const url = \"auth/login?username=\" + \"guest@mail.com\" +\r\n                \"&password=\" + \"Guest123123\";\r\n    const res = await fetch(url, {method: 'POST'}); \r\n    if (res.status == 200) { //successful login!\r\n        window.open(\"/\",\"_self\");\r\n        localStorage.setItem(\"userId\", \"guest@mail.com\");\r\n    } else { //Unsuccessful login\r\n      const resText = await res.text();\r\n      this.setState({loginBtnIcon: \"fa fa-sign-in\",\r\n                     loginBtnLabel: \"Log In\",\r\n                     statusMsg: resText});\r\n    }\r\n}\r\n\r\n//getSecurityAnswer: Given the id, security question, and security answer obtained\r\n//from the LookUpAccountDialog component, update state such that the user will\r\n//next be prompted to enter security question and answer for verification\r\ngetSecurityAnswer = (userId, question, answer) => {\r\n    this.resetUserId = userId;\r\n    this.resetQ = question;\r\n    this.resetA = answer;\r\n    this.setState({showLookUpAccountDialog: false,\r\n                   showSecurityQuestionDialog: true\r\n                });\r\n}\r\n\r\n//getNewPassword-- Called after user successfully provides correct answer\r\n//to security question. Presents the \"Reset Password\" dialog box.\r\ngetNewPassword = () => {\r\n    this.setState({showSecurityQuestionDialog: false,\r\n                    showResetPaswordDialog: true});\r\n}\r\n\r\n//resetPassword--Called after the user successfully enters a new (acceptable)\r\n//password. pw contains the new password. Call on the Update (PUT) server\r\n//route to update the user's password in the database.\r\nresetPassword = async(pw) => {\r\n    const url = \"/users/\" + this.resetUserId;\r\n    const res = await fetch(url, {\r\n        headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json'\r\n            },\r\n        method: 'PUT',\r\n        body: JSON.stringify({password: pw})}); \r\n    if (res.status == 200) { //successful update creation!\r\n        this.setState({showResetPaswordDialog: false,\r\n                       statusMsg: \"Password successfully reset!\"});\r\n    } else { //Unsuccessful account creation\r\n        //Grab textual error message\r\n        const resText = await res.text();\r\n        this.setState({showResetPasswordDialog: false,\r\n                      statusMsg: resText});\r\n    }\r\n    \r\n}\r\n\r\n//newAccountCreated -- Called after successful creation of a new account\r\naccountCreateDone = (msg,deleted) => {\r\n    this.setState({statusMsg: msg,\r\n                   showCreateAccountDialog: false});\r\n}\r\n\r\n//closeStatusMsg -- Called when user clicks on \"x\" to dismiss status message\r\ncloseStatusMsg = () => {\r\n    this.setState({statusMsg: \"\"});\r\n}\r\n\r\n//cancelCreateAccount -- called to hide Create Account dialog without creating acct\r\ncancelCreateAccount = () => {\r\n    this.setState({showCreateAccountDialog: false});\r\n}\r\n\r\n  render() {\r\n    return(\r\n        <div>\r\n        <center>\r\n        {this.state.statusMsg != \"\" ? <div className=\"status-msg\"><span>{this.state.statusMsg}</span>\r\n                       <button className=\"modal-close\" onClick={this.closeStatusMsg}>\r\n                          <span className=\"fa fa-times\"></span>\r\n                        </button></div>: null}\r\n            {this.state.showLookUpAccountDialog ? \r\n              <LookUpAccountDialog cancelResetPassword={this.cancelResetPassword}\r\n                                   getSecurityAnswer={this.getSecurityAnswer}/> : null}\r\n            {this.state.showSecurityQuestionDialog ? \r\n               <SecurityQuestionDialog cancelResetPassword={this.cancelResetPassword}\r\n                                       question={this.resetQ}\r\n                                       answer={this.resetA}\r\n                                       getNewPassword={this.getNewPassword}/> : null}\r\n            {this.state.showResetPaswordDialog ? \r\n              <ResetPasswordDialog cancelResetPassword={this.cancelResetPassword}\r\n                                   resetPassword={this.resetPassword} /> : null}\r\n            <form id=\"loginInterface\" onSubmit={this.handleLoginSubmit}>\r\n            <label htmlFor=\"emailInput\" style={{ padding: 0, fontSize: 24 }}>\r\n                Email:\r\n                <input\r\n                ref={this.emailInputRef}\r\n                className=\"form-control login-text\"\r\n                type=\"email\"\r\n                placeholder=\"Enter Email Address\"\r\n                id=\"emailInput\"\r\n                pattern=\"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}\"\r\n                required={true}\r\n                />\r\n            </label>\r\n            <p />\r\n            <label htmlFor=\"passwordInput\" style={{ padding: 0, fontSize: 24 }}>\r\n                Password:\r\n                <input\r\n                ref={this.passwordInputRef}\r\n                className=\"form-control login-text\"\r\n                type=\"password\"\r\n                placeholder=\"Enter Password\"\r\n                id=\"passwordInput\"\r\n                pattern=\"[A-Za-z0-9!@#$%^&*()_+\\-]+\"\r\n                required={true}\r\n                />\r\n            </label>\r\n            <p className=\"bg-danger\" id=\"feedback\" style={{ fontSize: 16 }} />\r\n            <button\r\n                type=\"submit\"\r\n                className=\"btn-color-theme btn btn-primary btn-block login-btn\">\r\n                <span id=\"login-btn-icon\" className={this.state.loginBtnIcon}/>\r\n                &nbsp;{this.state.loginBtnLabel}\r\n            </button>\r\n            <p>\r\n            <button type=\"button\" className=\"btn btn-link login-link\" \r\n                    onClick={() => {this.setState({showCreateAccountDialog: true});}}>\r\n                Create an account</button> | \r\n                <button type=\"button\" className=\"btn btn-link login-link\"\r\n                        onClick={() => {this.setState({showLookUpAccountDialog: true});}}>\r\n                Reset your password</button>\r\n            </p>  \r\n            <button type=\"button\" className=\"btn btn-github\"\r\n               onClick={() => this.handleOAuthLoginClick(\"github\")}>\r\n              <span className={this.state.githubIcon}></span>&nbsp;\r\n                {this.state.githubLabel}\r\n            </button>\r\n\r\n            <button id=\"google-login-btn\" type=\"button\" className=\"btn btn-github\"\r\n               onClick={() => this.handleOAuthLoginClick(\"google\")}>\r\n              <span className={this.state.googleIcon}></span>&nbsp;\r\n                {this.state.googleLabel}\r\n            </button>\r\n\r\n            <button id=\"facebook-login-btn\" type=\"button\" className=\"btn btn-github\"\r\n               onClick={() => this.handleOAuthLoginClick(\"facebook\")}>\r\n              <span className={this.state.facebookIcon}></span>&nbsp;\r\n                {this.state.facebookLabel}\r\n            </button>\r\n\r\n            <button id=\"guest-login-btn\" type=\"button\" className=\"btn btn-github\"\r\n               onClick={this.handleGuestLoginClick}>\r\n              <span className={this.state.guestIcon}></span>&nbsp;\r\n                {this.state.guestLabel}\r\n            </button>\r\n\r\n            <p>\r\n                <i>Version CptS 489</i>\r\n            </p>\r\n            </form>\r\n            {this.state.showCreateAccountDialog ? \r\n              <CreateEditAccountDialog\r\n                create={true} \r\n                done={this.accountCreateDone}\r\n                cancel={this.cancelCreateAccount} /> : null}\r\n            {this.state.showResetPasswordDialog ? <ResetPasswordDialog /> : null}\r\n        </center>\r\n        </div>\r\n        )\r\n    }\r\n} \r\n\r\nexport default LoginPage;\r\n","//this component holds the weather station api data\r\n//parent: WeatherFeed\r\n//child: none\r\nimport { deleteModel } from 'mongoose';\r\nimport React from 'react';\r\nimport AppMode from '../AppMode';\r\nimport App from './App';\r\nrequire('dotenv').config();\r\n\r\nclass WeatherStation extends React.Component {\r\n\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            latitude: this.props.latitude,\r\n            longitude: this.props.longitude,\r\n            Histories: []\r\n        };\r\n        this.count = 0;\r\n    }\r\n\r\n\r\n\r\n    componentDidMount = () => {\r\n\r\n        this.getCurrentObservations();\r\n\r\n    }\r\n\r\n    getCurrentObservations = async () => {\r\n\r\n        console.log(\"lat now fetching: \" + this.state.latitude + \" long now fetching: \" + this.state.longitude);\r\n        const response = await fetch('https://api.openweathermap.org/data/2.5/weather?lat=' +\r\n            this.state.latitude + '&lon=' +\r\n            this.state.longitude + '&appid=' + process.env.REACT_APP_API_KEY);\r\n        const currWeather = await response.json();\r\n\r\n        var iconCode = this.getIcon(currWeather.weather[0].id, true);\r\n        var iconUrl = \"http://openweathermap.org/img/wn/\" + iconCode + \"@4x.png\";\r\n\r\n        console.log(\"icon code: \" + iconCode);\r\n        console.log(\"icon url: \" + iconUrl);\r\n\r\n        let lonSymbol = \"N\";\r\n        let latSymbol = \"E\";\r\n\r\n\r\n        if(currWeather.coord.lat > 0)\r\n        {\r\n            latSymbol = \"N\";\r\n        }\r\n        else\r\n        {\r\n            latSymbol = \"S\";\r\n        }\r\n\r\n        if(currWeather.coord.lon > 0)\r\n        {\r\n            lonSymbol = \"E\";\r\n        }\r\n        else\r\n        {\r\n            lonSymbol = \"W\";\r\n        }\r\n        \r\n\r\n        this.setState({\r\n            place: currWeather.name + \", \" + currWeather.sys.country, \r\n \r\n            coord: Math.abs(currWeather.coord.lat) + latSymbol + \", \" + Math.abs(currWeather.coord.lon) + lonSymbol,\r\n\r\n            retrieved: (new Date()).toLocaleDateString() + \" at \" + (new Date()).toLocaleTimeString(),\r\n            conditions: currWeather.weather[0].main,\r\n            visibility: currWeather.weather.visibility,\r\n            visibilityUnit: \"Meters\",\r\n            temp: Math.round(currWeather.main.temp - 273.15),\r\n            tempUnit: \"C\",\r\n            humidity: currWeather.main.humidity,\r\n            visibility: currWeather.visibility,\r\n            wind: currWeather.wind.speed,\r\n            windUnit: \"Meters/sec\",\r\n            windDirection: currWeather.wind.deg,\r\n            windDirectionUnit: \"Degrees\",\r\n            units: \"Metric\",\r\n            weatherIcon: iconUrl\r\n        });\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n    favoriteStation = (stationId) => {\r\n        // var userId = localStorage.getItem(\"userId\");\r\n        // console.log(userId);\r\n        // var data = JSON.parse(localStorage.getItem(userId));\r\n        // console.log(data);\r\n        let today = new Date(Date.now() - (new Date()).getTimezoneOffset() * 60000);\r\n        var newStation = {}; // empty object\r\n        console.log(today.toUTCString());\r\n        newStation.id = today.toUTCString();\r\n        newStation.latitude = this.state.latitude.toString();\r\n        newStation.longitude = this.state.longitude.toString();\r\n        // console.log(\"data.weatherStations.length = \" + data.weatherStations.length);\r\n        // data.weatherStations[data.weatherStationCount + 1] = newStation;\r\n        // data.weatherStationCount++;\r\n\r\n        // localStorage.setItem(userId, JSON.stringify(data));\r\n        setTimeout(this.props.addWeatherStation, 100, newStation);\r\n\r\n    }\r\n    setHistory = async () => {\r\n        // if (this.state.Histories.length !== 0){\r\n        //     delete this.state.Histories;\r\n        // }\r\n        this.count = this.count + 1;\r\n        console.log(\"Counting...\" + this.count);\r\n        this.setState({ countHistory: 1 });\r\n        let Histories = []\r\n        Histories.push({\r\n            Date: this.state.retrieved,\r\n            Location: this.state.place,\r\n            Condition: this.state.conditions,\r\n            Visibility: this.state.visibility + \" \" + this.state.visibilityUnit,\r\n            Temperature: this.state.temp + \" \" + this.state.tempUnit,\r\n            Humidity: this.state.humidity,\r\n            WindSpeed: this.state.wind + \" \" + this.state.windUnit,\r\n            WindDirection: this.state.windDirection + \" \" + this.state.windDirectionUnit,\r\n            countHistory: this.count\r\n        });\r\n        await this.setState({ Histories });\r\n        console.log(\"Weather Station\")\r\n        console.log(this.state.Histories);\r\n        this.props.history(this.state.Histories);\r\n\r\n        await this.setState({\r\n            Date: this.state.retrieved,\r\n            Location: this.state.place,\r\n            Condition: this.state.conditions,\r\n            Visibility: this.state.visibility + \" \" + this.state.visibilityUnit,\r\n            Temperature: this.state.temp + \" \" + this.state.tempUnit,\r\n            Humidity: this.state.humidity,\r\n            WindSpeed: this.state.wind + \" \" + this.state.windUnit,\r\n            WindDirection: this.state.windDirection + \" \" + this.state.windDirectionUnit,\r\n            countHistory: this.count\r\n        });\r\n        // let Histories = this.state;\r\n        // console.log(\"Weather Station\")\r\n        // console.log(Histories);\r\n        // this.props.history(Histories)\r\n\r\n        this.prepareHistory();\r\n\r\n        //this.addHistory(H);\r\n    }\r\n    prepareHistory = async () => {\r\n        const H = await Object.assign({}, this.state);\r\n        console.log(H);\r\n        delete H.weatherIcon;\r\n        delete H.Histories;\r\n        delete H.latitude;\r\n        delete H.longitude;\r\n        delete H.place;\r\n        delete H.retrieved;\r\n        delete H.conditions;\r\n        delete H.visibility;\r\n        delete H.visibilityUnit;\r\n        delete H.temp;\r\n        delete H.tempUnit;\r\n        delete H.wind;\r\n        delete H.windUnit;\r\n        delete H.windDirection;\r\n        delete H.windDirectionUnit;\r\n        delete H.units;\r\n        delete H.humidity;\r\n\r\n        this.addHistory(H);\r\n    }\r\n\r\n    addHistory = async (newData) => {\r\n        // console.log(\"Weather data format:\")\r\n        console.log(newData)\r\n        // console.log(this.props.userObj)\r\n        const url = '/histories/' + this.props.userObj.id;\r\n        const res = await fetch(url, {\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n            },\r\n            method: 'POST',\r\n            body: JSON.stringify(newData)\r\n        });\r\n        const msg = await res.text();\r\n        if (res.status != 200) {\r\n            this.setState({ errorMsg: msg });\r\n            //this.props.changeMode(AppMode.ROUNDS);\r\n        } else {\r\n            this.setState({ errorMsg: \"\" });\r\n            //this.props.refreshOnUpdate(AppMode.ROUNDS);\r\n        }\r\n    }\r\n\r\n\r\n    toggleUnits = () => {\r\n        if (this.state.units == \"Imperial\") {\r\n            this.setState({\r\n                units: \"Metric\",\r\n                tempUnit: \"C\",\r\n                temp: Math.round((this.state.temp - 32) * 5 / 9),\r\n                visibility: Math.round(this.state.visibility / 3.28084),\r\n                visibilityUnit: \"Meters\",\r\n                wind: parseFloat(this.state.wind / 3.28084).toFixed(2),\r\n                windUnit: \"Meters/sec\"\r\n            });\r\n        } else {\r\n            this.setState({\r\n                units: \"Imperial\",\r\n                tempUnit: \"F\",\r\n                temp: Math.round((this.state.temp * 9 / 5) + 32),\r\n                visibility: Math.round(this.state.visibility * 3.28084),\r\n                visibilityUnit: \"Feet\",\r\n                wind: parseFloat(this.state.wind * 3.28084).toFixed(2),\r\n                windUnit: \"Feet/sec\"\r\n            });\r\n        }\r\n    }\r\n\r\n    getIcon = (code, daytime) => {\r\n\r\n        var iconCode = \"\";\r\n\r\n        if (code >= 200 && code < 300) {\r\n            iconCode = \"11d\"\r\n\r\n        }\r\n        else if (code >= 300 && code < 400) {\r\n            iconCode = \"09d\";\r\n        }\r\n        else if (code >= 500 && code < 600) {\r\n\r\n            if (code >= 500 && code <= 504) {\r\n                iconCode = \"10d\";\r\n            }\r\n            else if (code == 511) {\r\n                iconCode = \"13d\";\r\n            }\r\n            else {\r\n                iconCode = \"09d\";\r\n            }\r\n        }\r\n        else if (code >= 600 && code < 700) {\r\n            iconCode = \"13d\";\r\n        }\r\n        else if (code >= 700 && code < 800) {\r\n            iconCode = \"50d\";\r\n        }\r\n        else if (code >= 800 && code < 900) {\r\n            if (code == 800) {\r\n                if (daytime == true) {\r\n                    iconCode = \"01d\"\r\n                }\r\n                else {\r\n                    iconCode = \"01n\"\r\n                }\r\n            }\r\n            else if (code == 800) {\r\n                iconCode = \"01n\";\r\n            }\r\n            else if (code >= 801 && code <= 804) {\r\n                if (code == 801) {\r\n\r\n                    if (daytime == true) {\r\n                        iconCode = \"02d\";\r\n                    }\r\n                    else {\r\n                        iconCode = \"02n\";\r\n                    }\r\n                }\r\n                else if (code == 802) {\r\n                    if (daytime == true) {\r\n                        iconCode = \"03d\";\r\n                    }\r\n                    else {\r\n                        iconCode = \"03nd\";\r\n                    }\r\n                }\r\n                else if (code == 803) {\r\n                    if (daytime == true) {\r\n                        iconCode = \"04d\";\r\n                    }\r\n                    else {\r\n                        iconCode = \"04d\";\r\n                    }\r\n                }\r\n                else if (code == 804) {\r\n                    if (daytime == true) {\r\n                        iconCode = \"04d\";\r\n                    }\r\n                    else {\r\n                        iconCode = \"04d\";\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return iconCode;\r\n    }\r\n    render() {\r\n        return (\r\n            <div align=\"center\" className=\"jumbotron\">\r\n\r\n                {/* shift up icon */}\r\n                {this.props.mode != AppMode.FEED ?\r\n                    <span className=\"shift-icon fa fa-arrow-up fa-2x\" onClick={() => this.props.moveStation(this.props.stationId, \"up\")}></span>\r\n                    : null}\r\n\r\n\r\n                <div class=\"weatherStation\">\r\n\r\n                    {/* History icon */}\r\n                    {/* <span className={this.state.historied ? \"history-icon fas fa-history\" : \"history-icon fa fa-history\"} onClick={()=>{this.setHistory()}}></span> */}\r\n\r\n                    {/* Delete icon */}\r\n                    {/* <span className=\"delete-icon fa fa-times\" onClick={() => this.props.removeStation(this.props.stationId)}></span> */}\r\n\r\n                    {/* <div class=\"weatherStation\"> */}\r\n\r\n\r\n                    <h2>Weather Conditions at {this.state.place} </h2>\r\n\r\n                    <h5>Coordinates: {this.state.coord} </h5>\r\n\r\n                    <h6><i>Last updated: {this.state.retrieved}</i>\r\n                        {/* Refresh icon */}\r\n                &nbsp; <span className=\"refresh-icon fa fa-retweet\"\r\n                            onClick={() => this.getCurrentObservations()}></span>\r\n                    </h6>\r\n\r\n\r\n                    <img src={this.state.weatherIcon} alt=\"weatherIcon\" />\r\n                    <h5>Conditions: {this.state.conditions}</h5>\r\n                    <h5>Visibility: {this.state.visibility + \" \" + this.state.visibilityUnit}</h5>\r\n                    <h5>Temp: {this.state.temp}&deg;&nbsp;{this.state.tempUnit}</h5>\r\n                    <h5>Humidity: {this.state.humidity}%</h5>\r\n                    <h5>Wind Speed: {this.state.wind + \" \" + this.state.windUnit}</h5>\r\n                    <h5>Wind Direction: {this.state.windDirection + \" \" + this.state.windDirectionUnit}</h5>\r\n                    <div className=\"custom-control custom-switch\">\r\n                        <input type=\"checkbox\" className=\"custom-control-input\" id={\"switch-\" + this.props.stationId}\r\n                            onClick={this.toggleUnits} />\r\n                        <label className=\"custom-control-label\" htmlFor={\"switch-\" + this.props.stationId}>&nbsp;{this.state.units}</label>\r\n                    </div>\r\n                </div>\r\n\r\n\r\n                {/* image */}\r\n\r\n                {/* shift down icon */}\r\n                {this.props.mode != AppMode.FEED ?\r\n                    <span className=\"shift-icon fa fa-arrow-down fa-2x\" onClick={() => this.props.moveStation(this.props.stationId, \"down\")}></span>\r\n                    : null\r\n                }\r\n                <div >\r\n                    {/* History icon */}\r\n                    <span id=\"history-icon-btn\" className=\"history-icon fa fa-history fa-2x\" onClick={() => { this.setHistory() }}></span>\r\n\r\n                    {/* Favorite icon */}\r\n                    {this.props.mode != AppMode.COURSES ?\r\n                        <span id=\"favorite-icon-btn\" className=\"favorite-icon fa fa-star fa-2x\" onClick={() => { this.favoriteStation(this.props.stationId) }}></span>\r\n                        : null}\r\n                                            {/* Delete icon */}\r\n                    {this.props.mode != AppMode.FEED ?\r\n                        <span id=\"delete-icon-btn\" className=\"delete-icon fa fa-times fa-2x\" onClick={() => this.props.removeStation(this.props.stationId)}></span>\r\n                        : null}\r\n\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default WeatherStation;","import { json } from 'body-parser';\r\nimport React from 'react';\r\nimport WeatherStation from './WeatherStation.js';\r\nimport AppMode from '../AppMode.js';\r\n\r\nclass FeedPage extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            stations: [],\r\n            station: {},\r\n            stationCount: 0,\r\n            initialFire: true,\r\n        };\r\n        this.removeStation = this.removeStation.bind(this);\r\n        this.moveStation = this.moveStation.bind(this);\r\n\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        //Initialize based on user's current location, if possible\r\n        if (this.state.initialFire && !this.props.savedStation) {\r\n            this.loadStations();\r\n        }\r\n        else {\r\n            navigator.geolocation.getCurrentPosition(this.getLocSuccess, this.getLocError);\r\n        }\r\n    }\r\n\r\n    //Called when user agrees to give loc data. We set the first weather\r\n    //station to show conditions at the user's current position.\r\n    getLocSuccess = (position) => {\r\n        this.setState({\r\n            stations: [{\r\n                lat: 47.6062,\r\n                lon: -122.3321,\r\n                stationId: this.state.stationCount + 1\r\n            }],\r\n            stationCount: this.state.stationCount + 1\r\n        });\r\n\r\n    }\r\n\r\n    //Called when user refuses to give access to loc data\r\n    //Initializes first weather station to Seattle in this case\r\n    getLocError = (err) => {\r\n        this.setState({\r\n            stations: [{\r\n                lat: 47.6062,\r\n                lon: -122.3321,\r\n                stationId: this.state.stationCount + 1\r\n            }],\r\n            stationCount: this.state.stationCount + 1\r\n        });\r\n\r\n    }\r\n\r\n    //addStation -- When user clicks on \"+\" button to add a new weather station,\r\n    //prompt the user for the location and attempt to add the requested station.\r\n    // addStation = async () => {\r\n\r\n    //     const newStation = prompt(\"Enter a City, State, and Country:\");\r\n    //     if (newStation != null) { //Need to see if we can find the station through the API \r\n    //         const response = await fetch('https://api.openweathermap.org/data/2.5/weather?q=' +\r\n    //             newStation + '&appid=' + process.env.REACT_APP_API_KEY);\r\n    //         const stationData = await response.json();\r\n    //         //See if the requested station exists\r\n    //         if (stationData != null && stationData.hasOwnProperty('coord')) {\r\n    //             //Push new station into stations list\r\n    //             let newStations = [...this.state.stations];\r\n    //             newStations.push({\r\n    //                 lat: stationData.coord.lat,\r\n    //                 lon: stationData.coord.lon,\r\n    //                 stationId: this.state.stationCount + 1\r\n    //             });\r\n\r\n\r\n    //             this.setState({\r\n    //                 stations: newStations,\r\n    //                 stationCount: this.state.stationCount + 1\r\n    //             }, () => {\r\n    //                 this.writeStations(this.state.stationCount, stationData.coord.lat, stationData.coord.lon);\r\n    //             });\r\n\r\n    //         } else {\r\n    //             alert(\"Sorry, that weather location could not be found.\");\r\n    //         }\r\n    //     }\r\n    // }\r\n\r\n    addNewStation = async (event) => {\r\n\r\n        event.preventDefault();\r\n        // const newStation = prompt(\"Enter a City, State, and Country:\");\r\n        const newStation = document.getElementById('inputStation').value;\r\n        if (newStation != null) { //Need to see if we can find the station through the API \r\n\r\n            const response = await fetch('https://api.openweathermap.org/data/2.5/weather?q=' +\r\n                newStation + '&appid=' + process.env.REACT_APP_API_KEY);\r\n            const stationData = await response.json();\r\n            //See if the requested station exists\r\n            if (stationData != null && stationData.hasOwnProperty('coord')) {\r\n                //Push new station into stations list\r\n                let newStations = [...this.state.stations];\r\n                newStations.push({\r\n                    lat: stationData.coord.lat,\r\n                    lon: stationData.coord.lon,\r\n                    stationId: this.state.stationCount + 1\r\n                });\r\n                let newStation = {};\r\n                newStation.lat = stationData.coord.lat;\r\n                newStation.lon = stationData.coord.lon;\r\n                newStation.stationId = this.state.stationCount + 1;\r\n\r\n\r\n                this.setState({\r\n                    stations: newStations,\r\n                    station: newStation,    // only have one station\r\n                    stationCount: this.state.stationCount + 1\r\n                }, \r\n                    // () => { this.writeStations(this.state.stationCount, stationData.coord.lat, stationData.coord.lon);}  // don't write to localStorage\r\n                );\r\n\r\n            } else {\r\n                alert(\"Sorry, that weather location could not be found.\");\r\n            }\r\n\r\n        }\r\n        document.searchForLocation.reset()\r\n\r\n    }\r\n\r\n\r\n    //save the stations to localstorage\r\n    writeStations(ids, lats, longs) {\r\n\r\n        let thisUser = localStorage.getItem(\"userId\");\r\n        let data = JSON.parse(localStorage.getItem(thisUser));\r\n\r\n        //Initialize empty JavaScript object to store new or updated station\r\n        let thisStation = {}; //iniitalize empty object for this station\r\n\r\n        \r\n        for (let i = 0; i < ids.length; i++) {\r\n            //Store the data\r\n            thisStation.id = i + 1;\r\n            thisStation.latitude = lats[i];\r\n            thisStation.longitude = longs[i];\r\n\r\n            data.weatherStations[i + 1] = thisStation;\r\n            data.weatherStationCount = ids.length;\r\n\r\n            localStorage.setItem(thisUser, JSON.stringify(data));\r\n\r\n            thisStation = {};\r\n        }\r\n    }\r\n\r\n    //remove stations from array of weatherstations\r\n    removeStation(stationId) {\r\n\r\n        let newStations = [...this.state.stations];\r\n\r\n        for (let i = 0; i < newStations.length; i++) {\r\n\r\n            if (newStations[i].stationId == stationId) {\r\n                newStations.splice(i, 1);\r\n            }\r\n        }\r\n\r\n        //update state\r\n        this.setState({\r\n            stations: newStations,\r\n            stationCount: this.state.stationCount - 1\r\n        }, () => {\r\n\r\n        });\r\n    }\r\n\r\n    //move the station up or down based on direction/buton clicked\r\n    moveStation(stationId, direction) {\r\n\r\n        let newStations = [...this.state.stations];\r\n\r\n        if (direction == \"up\") {\r\n\r\n            if (stationId != newStations[0].stationId) {\r\n\r\n                for (let i = 0; i < newStations.length; i++) {\r\n                    if (newStations[i].stationId == stationId) {\r\n\r\n                        var x = i;\r\n                        var y = i - 1;\r\n                        //swap\r\n                        [newStations[x], newStations[y]] = [newStations[y], newStations[x]];\r\n                    }\r\n                }\r\n\r\n                //update array\r\n                this.setState({ stations: newStations }, () => {\r\n\r\n                });\r\n            }\r\n        }\r\n        else {\r\n            if (stationId != newStations[newStations.length - 1].stationId) {\r\n                for (let i = 0; i < newStations.length; i++) {\r\n                    if (newStations[i].stationId == stationId) {\r\n                        var x = i;\r\n                        var y = i + 1;\r\n\r\n                        //swap\r\n                        [newStations[x], newStations[y]] = [newStations[y], newStations[x]];\r\n                        break;\r\n\r\n                    }\r\n                }\r\n\r\n                //update array\r\n                this.setState({ stations: newStations }, () => {\r\n\r\n                });\r\n            }\r\n        }\r\n\r\n\r\n    }\r\n\r\n    //load stations from localstorage into array of weather stations\r\n    loadStations() {\r\n\r\n\r\n        let thisUser = localStorage.getItem(\"userId\");\r\n        let data = JSON.parse(localStorage.getItem(thisUser));\r\n\r\n\r\n        //check if null if first time logging in\r\n        if (data != null) {\r\n            let rows = [];\r\n\r\n\r\n            for (let i = 0; i < data.weatherStationCount; i++) {\r\n                var keyid = i + 1;\r\n                rows.push({\r\n                    lat: Number.parseFloat(data.weatherStations[keyid].latitude),\r\n                    lon: Number.parseFloat(data.weatherStations[keyid].longitude),\r\n                    stationId: keyid,\r\n                });\r\n            }\r\n            console.log(rows);\r\n\r\n            //set the new array to state\r\n            this.setState({\r\n                stations: rows,\r\n                stationCount: rows.length,\r\n                initialFire: false\r\n            }, () => {\r\n\r\n            });\r\n        }\r\n\r\n\r\n\r\n    }\r\n\r\n    setHistory = (history) =>{\r\n        //console.log(history);\r\n        this.setState({Histories: history});\r\n        console.log(this.state.Histories);\r\n        this.props.history(history);\r\n    }\r\n\r\n\r\n    addWeatherStation = async (newData) => {\r\n        const url = '/weathers/' + this.props.userObj.id;\r\n        const res = await fetch(url, {\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n                },\r\n            method: 'POST',\r\n            body: JSON.stringify(newData)}); \r\n        const msg = await res.text();\r\n        if (res.status != 200) {\r\n            //this.setState({errorMsg: msg});\r\n            //this.props.changeMode(AppMode.ROUNDS);\r\n            console.log(\"failure\");\r\n        } else {\r\n            //this.setState({errorMsg: \"\"});\r\n            this.props.refreshOnUpdate(AppMode.FEED);\r\n            console.log(\"success\");\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        let rows = [];\r\n        let ids = [];\r\n        let lats = [];\r\n        let longs = [];\r\n\r\n        for (let i = 0; i < this.state.stations.length; i++) {\r\n            ids.push(this.state.stations[i].stationId);\r\n            lats.push(this.state.stations[i].lat);\r\n            longs.push(this.state.stations[i].lon);\r\n\r\n            rows.push(<WeatherStation key={this.state.stations[i].stationId}\r\n                latitude={this.state.stations[i].lat}\r\n                longitude={this.state.stations[i].lon}\r\n                stationId={this.state.stations[i].stationId}\r\n                moveStation={this.moveStation}\r\n                history={this.setHistory}\r\n                userObj={this.state.userObj}\r\n                removeStation={this.removeStation} />);\r\n        }\r\n \r\n        if (this.state.stations.length >= 1) {\r\n\r\n\r\n            let thisUser = localStorage.getItem(\"userId\");\r\n            let data = JSON.parse(localStorage.getItem(thisUser));\r\n\r\n            //set to null and resave to make things easier\r\n            data = null;\r\n            // this.writeStations(ids, lats, longs);\r\n        }\r\n\r\n        //if theres no stations, we want to fire componentDidMount\r\n        if (this.state.stationCount == 0) {\r\n            this.componentDidMount();\r\n        }\r\n\r\n        return (\r\n            <div id=\"main\">\r\n                {/* <div className=\"floatButton\" id=\"floatBtnDiv\">\r\n                    <a className=\"float\" id=\"addStationBtn\" onClick={this.addStation}>\r\n                        <span className=\"float-btn-icon fa fa-plus\" id=\"floatBtnIcon\"></span>\r\n\r\n                    </a>\r\n                </div> */}\r\n\r\n                <form name=\"searchForLocation\" onSubmit={this.addNewStation}>\r\n                    {/* <button onClick={this.addNewStation}><span className=\"fa fa-search\"></span></button> */}\r\n                    <input type=\"newLocation\" id=\"inputStation\" placeholder=\"Enter a City, State, and Country...\"></input>\r\n\r\n                </form>\r\n\r\n                <div id=\"weatherStations\">\r\n                    {/* {rows} */}\r\n                    {JSON.stringify(this.state.station) != JSON.stringify({}) ?                        \r\n                    <WeatherStation \r\n                        userObj={this.props.userObj}\r\n                        key={this.state.station.stationId}\r\n                        latitude={this.state.station.lat}\r\n                        longitude={this.state.station.lon}\r\n                        stationId={this.state.station.stationId}\r\n                        moveStation={this.moveStation}\r\n                        history={this.setHistory}\r\n                        removeStation={this.removeStation} \r\n                        addWeatherStation={this.addWeatherStation} \r\n                        mode={this.props.mode}/> : null\r\n                        }\r\n                    \r\n                </div>\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\nexport default FeedPage;","import React from 'react';\r\n\r\nclass ConfirmDeleteRound extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n        <div id=\"aboutModal\" className=\"modal\" role=\"dialog\">\r\n        <div className=\"modal-content\">\r\n            <div className=\"modal-header\">\r\n              <center>\r\n                <h3 className=\"modal-title\"><b>Confirm Round Deletion</b></h3>\r\n              </center>\r\n               <button id=\"modalClose\" className=\"modal-close\" onClick={this.props.close}>\r\n                 &times;</button>\r\n            </div>\r\n            <div className=\"modal-body\">\r\n              <p>Do you really want to delete this round?</p>\r\n            </div>\r\n            <div className=\"modal-footer\">\r\n                  <button className=\"btn btn-danger\" onClick={this.props.deleteHistory}>\r\n                  Yes, Delete</button>\r\n                  <button className=\"btn btn-secondary\" onClick={this.props.close}>\r\n                  No, Cancel</button>\r\n            </div>\r\n        </div>\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ConfirmDeleteRound;","import React from 'react';\r\nimport ConfirmDeleteRound from './ConfirmDeleteRound.js';\r\nimport AppMode from './../AppMode.js';\r\n\r\nclass RoundsTable extends React.Component {\r\n\r\n  constructor() {\r\n    super();\r\n    this.state = {showConfirmDelete: false};\r\n  }\r\n\r\n  //editRound -- Triggered when the user clicks the edit button for a given\r\n  //round. The id param is the unique property that identifies the round.\r\n  //Set the state variable representing the id of the round to be edited and\r\n  //then switch to the ROUNDS_EDITROUND mode to allow the user to edit the\r\n  //chosen round.\r\n  editRound = (id) => {\r\n    this.props.setEditId(id);\r\n    this.props.changeMode(AppMode.ROUNDS_EDITROUND);\r\n  }\r\n\r\n  //deleteRound -- Triggered when the user clicks on the \"Yes, Delete\"\r\n  //button in the Confirm Delete dialog box. It executes the deletion and\r\n  //closes the dialog box.\r\n  deleteRound = () => {\r\n    this.props.deleteRound();\r\n    this.setState({showConfirmDelete: false});\r\n  }\r\n\r\n  deleteHistory = () => {\r\n    this.props.deleteHistory();\r\n    this.setState({showConfirmDelete: false});\r\n  }\r\n\r\n  //confirmDelete -- Triggered when the user clicks the delete button\r\n  //for a given round. The id paam is the unique property that \r\n  //identifies the round. Set the state variable representing the id\r\n  //of the round to be deleted and then present a dialog box asking\r\n  //the user to confirm the deletion.\r\n  confirmDelete = (id) => {\r\n    this.props.setDeleteId(id);\r\n    this.setState({showConfirmDelete: true});\r\n  }\r\n\r\n\r\n  //renderTable -- render an HTML table displaying the rounds logged\r\n  //by the current user and providing buttons to view/edit and delete each round.\r\n  renderTable = () => {\r\n  let table = [];\r\n  for (let r = 0; r < this.props.Histories.length; ++r) {\r\n    table.push(\r\n      <tr key={r}>\r\n        <td>{this.props.Histories[r].Date}</td>\r\n        <td>{this.props.Histories[r].Location}</td>\r\n        <td>{this.props.Histories[r].Condition}</td>\r\n        <td>{this.props.Histories[r].Visibility}</td>\r\n        <td>{this.props.Histories[r].Temperature}</td>\r\n        <td>{this.props.Histories[r].Humidity}</td>\r\n        <td>{this.props.Histories[r].WindSpeed}</td>\r\n        <td>{this.props.Histories[r].WindDirection}</td>\r\n        {/* <td>{this.props.Histories[r].Condition) + \r\n              Number(this.props.Histories[r].minutes)) +\r\n              \":\" + (this.props.Histories[r].seconds < 10 ?  \r\n                \"0\" + this.props.Histories[r].seconds :\r\n                this.props.Histories[r].seconds) + \" (\" + \r\n              this.props.Histories[r].strokes + \r\n              \" in \" + this.props.Histories[r].minutes + \":\" + \r\n              (this.props.Histories[r].seconds < 10 ?  \r\n                \"0\" + this.props.Histories[r].seconds :\r\n                this.props.Histories[r].seconds) + \")\"}\r\n        </td> */}\r\n        {/* <td><button onClick={this.props.menuOpen ? null : () => \r\n          this.editRound(r)}>\r\n              <span className=\"fa fa-eye\"></span></button></td> */}\r\n        <td><button onClick={this.props.menuOpen ? null : \r\n          () => this.confirmDelete(r)}>\r\n              <span className=\"fa fa-trash\"></span></button></td>\r\n      </tr> \r\n    );\r\n  }\r\n  return table;\r\n  }\r\n\r\n  //render--render the entire rounds table with header, displaying a \"No\r\n  //Rounds Logged\" message in case the table is empty.\r\n  render() {\r\n    return(\r\n    <div className=\"padded-page\">\r\n      <h1></h1>\r\n      <table className=\"table table-hover\">\r\n        <thead className=\"thead-light\">\r\n        <tr>\r\n          <th>Date</th>\r\n          <th>Location</th>\r\n          <th>Weather Condition</th>\r\n          <th>Visibility</th>\r\n          <th>Temperature</th>\r\n          <th>Humidity</th>\r\n          <th>Wind Speed</th>\r\n          <th>Wind Direction</th>\r\n          {/* <th>View/Edit...</th> */}\r\n          <th>Delete</th>\r\n        </tr>\r\n        </thead>\r\n        <tbody>\r\n          {Object.keys(this.props.Histories).length === 0 ? \r\n          <tr>\r\n          <td colSpan=\"5\" style={{fontStyle: \"italic\"}}>No rounds logged</td>\r\n          </tr> : this.renderTable()\r\n          }\r\n        </tbody>\r\n      </table>\r\n      {this.state.showConfirmDelete ?\r\n        <ConfirmDeleteRound \r\n          close={() => this.setState({showConfirmDelete: false})} \r\n          deleteHistory={this.deleteHistory} /> : null}\r\n    </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default RoundsTable;\r\n","import React from 'react';\r\nimport AppMode from './../AppMode.js';\r\n\r\nclass RoundForm extends React.Component {\r\n  constructor(props) {\r\n  super(props);\r\n  //Create date object for today, taking time zone into consideration\r\n  let today = new Date(Date.now()-(new Date()).getTimezoneOffset()*60000);\r\n  //store date as ISO string\r\n  if (this.props.mode === AppMode.ROUNDS_LOGROUND) {\r\n    //If logging a new round, the starting state is a default round with\r\n    //today's date.\r\n    this.state = {date:  today.toISOString().substr(0,10), \r\n                  course: \"\",\r\n                  type: \"practice\",\r\n                  holes: \"18\",\r\n                  strokes: 80,\r\n                  minutes: 50,\r\n                  seconds: \"00\",\r\n                  notes: \"\",\r\n                  faIcon: \"fa fa-save\",\r\n                  btnLabel: \"Save Round Data\"}\r\n  } else {\r\n    //if editing an existing round, the starting state is the round's\r\n    //current data\r\n    let thisRound = {...this.props.startData};\r\n    delete thisRound.id;\r\n    thisRound.faIcon = \"fa fa-edit\";\r\n    thisRound.btnLabel = \"Update Round Data\";\r\n    this.state = thisRound;\r\n  }\r\n}\r\n  \r\n  \r\n    handleChange = (event) => {\r\n        const name = event.target.name;\r\n        if (name === \"seconds\") {\r\n          let newSec = (event.target.value.length < 2 ? \"0\" + \r\n            event.target.value : event.target.value);\r\n          let newSGS = this.computeSGS(this.state.strokes, this.state.minutes, \r\n                                       newSec);\r\n          this.setState({seconds: newSec, SGS: newSGS});\r\n        } else if (name === \"strokes\") {\r\n          let newStrokes = event.target.value;\r\n          let newSGS = this.computeSGS(newStrokes, this.state.minutes, \r\n            this.state.seconds);\r\n          this.setState({strokes: newStrokes, SGS: newSGS});\r\n        } else if (name === \"minutes\") {\r\n            let newMin = event.target.value;\r\n            let newSGS = this.computeSGS(this.state.strokes, newMin, \r\n              this.state.seconds);\r\n            this.setState({minutes: newMin, SGS: newSGS});\r\n        } else {\r\n          this.setState({[name]: event.target.value});\r\n        }\r\n    }\r\n  \r\n  \r\n    //handleSubmit -- When the user clicks on the button to save/update the\r\n    //round, start the spinner and invoke the parent component's saveRound\r\n    //method to do the actual work. Note that saveRound is set to the correct\r\n    //parent method based on whether the user is logging a new round or editing\r\n    //an existing round.\r\n    handleSubmit = (event) => {\r\n        //start spinner\r\n        this.setState({faIcon: \"fa fa-spin fa-spinner\",\r\n                        btnLabel: (this.props.mode === AppMode.ROUNDS_LOGROUND ? \r\n                                    \"Saving...\" : \"Updating...\")});\r\n        //Prepare current round data to be saved\r\n        let roundData = this.state;\r\n        delete roundData.faIcon;\r\n        delete roundData.btnLabel;\r\n        //call saveRound on 1 second delay to show spinning icon\r\n        setTimeout(this.props.saveRound,1000,roundData); \r\n        event.preventDefault(); \r\n        }\r\n  \r\n\r\n    computeSGS = (strokes, min, sec) => {\r\n      return (Number(strokes) + Number(min)) \r\n                  + \":\" + sec;\r\n    }\r\n  \r\n    render() {\r\n      return (\r\n        <form className=\"padded-page\" onSubmit={this.handleSubmit}>\r\n          <center>\r\n            <label>\r\n              Date:\r\n              <input name=\"date\" className=\"form-control form-center\" \r\n                type=\"date\" value={this.state.date} onChange={this.handleChange} />\r\n            </label>\r\n            <p></p>\r\n            <label>\r\n              Course:\r\n              <input name=\"course\" className=\"form-control form-center\" type=\"text\"\r\n                value={this.state.course} onChange={this.handleChange}\r\n                placeholder=\"Course played\" size=\"50\" maxLength=\"50\" />\r\n            </label>\r\n          <p></p>\r\n          <label>Type:\r\n          <select name=\"type\" value={this.state.type} \r\n            className=\"form-control form-center\" onChange={this.handleChange}>\r\n            <option value=\"practice\">Practice</option>\r\n            <option value=\"tournament\">Tournament</option>\r\n          </select> \r\n          </label>\r\n          <p></p>\r\n          <label># Holes:\r\n          <select name=\"holes\" value={this.state.holes} \r\n            className=\"form-control form-center\" onChange={this.handleChange}>\r\n            <option value=\"9\">9</option>\r\n            <option value=\"18\">18</option>\r\n          </select> \r\n          </label>\r\n          <p></p>\r\n          <label># Strokes:\r\n          <input name=\"strokes\" className=\"form-control form-center\" type=\"number\" \r\n            min=\"9\" max=\"200\" value={this.state.strokes} \r\n            onChange={this.handleChange} />\r\n          </label>\r\n          <p></p>\r\n          <label>Time: <br></br>\r\n          <input name=\"minutes\" type=\"number\" size=\"3\"\r\n            min=\"10\" max=\"400\" value={this.state.minutes}\r\n            onChange={this.handleChange} />:  \r\n          <input name=\"seconds\" type=\"number\" size=\"2\"\r\n            min=\"0\" max=\"60\" value={this.state.seconds} \r\n            onChange={this.handleChange} />\r\n          </label>\r\n          <p></p>\r\n          <label>Speedgolf Score: <br></br>\r\n              <input name=\"SGS\" className=\"form-center\" type=\"text\" size=\"6\" \r\n                disabled={true} value={this.computeSGS(this.state.strokes,this.state.minutes,this.state.seconds)} />\r\n          </label>\r\n          <p></p>\r\n          <label>Notes:\r\n              <textarea name=\"notes\" className=\"form-control\" rows=\"6\" cols=\"75\" \r\n                placeholder=\"Enter round notes\" value={this.state.notes} \r\n                onChange={this.handleChange} />\r\n          </label>\r\n          <p></p>\r\n          <p></p>\r\n          <button type=\"submit\" style={{width: \"70%\",fontSize: \"36px\"}} \r\n            className=\"btn btn-primary btn-color-theme\">\r\n              <span className={this.state.faIcon}/>&nbsp;{this.state.btnLabel}\r\n          </button>\r\n          </center>\r\n        </form>\r\n      );\r\n    }\r\n}\r\n\r\nexport default RoundForm;","import React from 'react';\r\n\r\nclass FloatingButton extends React.Component {\r\n    render() {\r\n      return(\r\n        <div className=\"floatbtn\" onClick={this.props.handleClick}>\r\n          <span className=\"floatbtn-icon fa fa-plus\"></span>\r\n        </div>  \r\n      );\r\n    }\r\n}\r\n\r\nexport default FloatingButton;\r\n","//Rounds -- A parent component for the app's \"rounds\" mode.\r\n//Manages the rounds data for the current user and conditionally renders the\r\n//appropriate rounds mode page based on App's mode, which is passed in as a prop.\r\n\r\nimport React from 'react';\r\nimport AppMode from './../AppMode.js';\r\nimport RoundsTable from './RoundsTable.js';\r\nimport RoundForm from './RoundForm.js';\r\nimport FloatingButton from './FloatingButton.js';\r\n\r\nclass Rounds extends React.Component {\r\n\r\n    //Initialize a Rounds object based on local storage\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {Histories: this.props.Histories}\r\n        this.deleteId = \"\";\r\n        this.editId = \"\";\r\n        this.state = {errorMsg: \"\"};           \r\n    }\r\n\r\n    // componentDidMount(){\r\n    //     this.addHistory(this.props.Histories);\r\n    // }\r\n    //addRound -- Given an object newData containing a new round, use the \r\n    //server POST route to add the new round to the database. If the add is\r\n    //successful, call on the refreshOnUpdate() method to force the parent\r\n    //App component to refresh its state from the database and re-render itself,\r\n    //allowing the change to be propagated to the Rounds table. Then switch\r\n    //the mode back to AppMode.ROUNDS since the user is done adding a round.\r\n    addRound = async (newData) => {\r\n        const url = '/rounds/' + this.props.userObj.id;\r\n        const res = await fetch(url, {\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n                },\r\n            method: 'POST',\r\n            body: JSON.stringify(newData)}); \r\n        const msg = await res.text();\r\n        if (res.status != 200) {\r\n            this.setState({errorMsg: msg});\r\n            this.props.changeMode(AppMode.ROUNDS);\r\n        } else {\r\n            this.setState({errorMsg: \"\"});\r\n            this.props.refreshOnUpdate(AppMode.ROUNDS);\r\n        }\r\n    }\r\n\r\n    // addHistory = async (newData) => {\r\n    //     console.log(\"Rounds data format:\")\r\n    //     console.log(newData)\r\n    //     const data = newData;\r\n    //     const url = '/histories/' + this.props.userObj.id;\r\n    //     const res = await fetch(url, {\r\n    //         headers: {\r\n    //             'Accept': 'application/json',\r\n    //             'Content-Type': 'application/json'\r\n    //             },\r\n    //         method: 'POST',\r\n    //         body: JSON.stringify(newData)}); \r\n    //     const msg = await res.text();\r\n    //     if (res.status != 200) {\r\n    //         this.setState({errorMsg: msg});\r\n    //         this.props.changeMode(AppMode.ROUNDS);\r\n    //     } else {\r\n    //         this.setState({errorMsg: \"\"});\r\n    //         this.props.refreshOnUpdate(AppMode.ROUNDS);\r\n    //     }\r\n    // }\r\n\r\n    //editRound -- Given an object newData containing updated data on an\r\n    //existing round, update the current user's round in the database. \r\n    //toggle the mode back to AppMode.ROUNDS since the user is done editing the\r\n    //round. \r\n    editRound = async (newData) => {\r\n        const url = '/rounds/' + this.props.userObj.id + '/' + \r\n            this.props.userObj.rounds[this.editId]._id;\r\n        const res = await fetch(url, {\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n                },\r\n            method: 'PUT',\r\n            body: JSON.stringify(newData)}); \r\n        const msg = await res.text();\r\n        if (res.status != 200) {\r\n            this.setState({errorMsg: msg});\r\n            this.props.changeMode(AppMode.ROUNDS);\r\n        } else {\r\n            this.props.refreshOnUpdate(AppMode.ROUNDS);\r\n        }\r\n    }\r\n\r\n\r\n    //deleteRound -- Delete the current user's round uniquely identified by\r\n    //this.state.deleteId, delete from the database, and reset deleteId to empty.\r\n    deleteRound = async () => {\r\n        const url = '/rounds/' + this.props.userObj.id + '/' + \r\n            this.props.userObj.rounds[this.deleteId]._id;\r\n        const res = await fetch(url, {method: 'DELETE'}); \r\n        const msg = await res.text();\r\n        if (res.status != 200) {\r\n            this.setState({errorMsg: \"An error occurred when attempting to delete round from database: \" \r\n            + msg});\r\n            this.props.changeMode(AppMode.ROUNDS);\r\n        } else {\r\n            this.props.refreshOnUpdate(AppMode.ROUNDS);\r\n        }  \r\n    }\r\n\r\n    deleteHistory = async () => {\r\n        const url = '/histories/' + this.props.userObj.id + '/' + \r\n            this.props.userObj.histories[this.deleteId]._id;\r\n        console.log(this.props.userObj.histories[this.deleteId]._id)\r\n        const res = await fetch(url, {method: 'DELETE'}); \r\n        const msg = await res.text();\r\n        if (res.status != 200) {\r\n            this.setState({errorMsg: \"An error occurred when attempting to delete round from database: \" \r\n            + msg});\r\n            //this.props.changeMode(AppMode.ROUNDS);\r\n        } else {\r\n            //this.props.refreshOnUpdate(AppMode.ROUNDS);\r\n        }  \r\n    }\r\n \r\n    //setDeleteId -- Capture in this.state.deleteId the unique id of the item\r\n    //the user is considering deleting.\r\n    setDeleteId = (val) => {\r\n        this.deleteId = val;\r\n        this.props.setDeleteId(val);\r\n        console.log(\"Delete ID \", this.deleteId)\r\n        this.setState({errorMsg: \"\"});\r\n    }\r\n\r\n    //setEditId -- Capture in this.state.editId the unique id of the item\r\n    //the user is considering editing.\r\n    setEditId = (val) => {\r\n        this.editId = val;\r\n        this.setState({errorMsg: \"\"});\r\n    }\r\n\r\n    closeErrorMsg = () => {\r\n        this.setState({errorMsg: \"\"});\r\n    }\r\n    \r\n    //render -- Conditionally render the Rounds mode page as either the rounds\r\n    //table, the rounds form set to obtain a new round, or the rounds form set\r\n    //to edit an existing round.\r\n    render() {\r\n        switch(this.props.mode) {\r\n            case AppMode.ROUNDS:\r\n                return (\r\n                    <>\r\n                    {this.state.errorMsg != \"\" ? <div className=\"status-msg\"><span>{this.state.errorMsg}</span>\r\n                       <button className=\"modal-close\" onClick={this.closeErrorMsg}>\r\n                          <span className=\"fa fa-times\"></span>\r\n                        </button></div>: null}\r\n                    <RoundsTable \r\n                        rounds={this.props.userObj.rounds}\r\n                        setEditId={this.setEditId}\r\n                        setDeleteId={this.setDeleteId}\r\n                        deleteRound={this.deleteRound}\r\n                        deleteHistory={this.deleteHistory}\r\n                        Histories={this.props.Histories}\r\n                        changeMode={this.props.changeMode}\r\n                        menuOpen={this.props.menuOpen} /> \r\n                    <FloatingButton\r\n                        handleClick={() => \r\n                        this.props.changeMode(AppMode.ROUNDS_LOGROUND)}\r\n                        menuOpen={this.props.menuOpen}\r\n                        icon={\"fa fa-plus\"} />\r\n                    </>\r\n                );\r\n            case AppMode.ROUNDS_LOGROUND:\r\n                return (\r\n                    <RoundForm\r\n                        mode={this.props.mode}\r\n                        startData={\"\"} \r\n                        saveRound={this.addRound} />\r\n                );\r\n            case AppMode.ROUNDS_EDITROUND:\r\n                let thisRound = {...this.props.userObj.rounds[this.editId]};\r\n                thisRound.date = thisRound.date.substr(0,10);\r\n                if (thisRound.seconds < 10) {\r\n                    thisRound.seconds = \"0\" + thisRound.seconds;\r\n                } \r\n                delete thisRound.SGS;\r\n                return (\r\n                    <RoundForm\r\n                        mode={this.props.mode}\r\n                        startData={thisRound} \r\n                        saveRound={this.editRound} />\r\n                );\r\n        }\r\n    }\r\n\r\n}   \r\n\r\nexport default Rounds;\r\n","import React from 'react';\r\nimport WeatherStation from './WeatherStation.js';\r\nimport AppMode from '../AppMode.js';\r\n\r\nclass CoursesPage extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            stations: [],\r\n            stationCount: 0,\r\n            initialFire: true\r\n        };\r\n        this.removeStation = this.removeStation.bind(this);\r\n        this.moveStation = this.moveStation.bind(this);\r\n\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        //Initialize based on user's current location, if possible\r\n        if (this.state.initialFire && !this.props.savedStation) {\r\n            this.loadStations();\r\n        }\r\n        else {\r\n            // navigator.geolocation.getCurrentPosition(this.getLocSuccess, this.getLocError);\r\n        }\r\n    }\r\n\r\n    //Called when user agrees to give loc data. We set the first weather\r\n    //station to show conditions at the user's current position.\r\n    getLocSuccess = (position) => {\r\n        this.setState({\r\n            stations: [{\r\n                lat: 47.6062,\r\n                lon: -122.3321,\r\n                stationId: this.state.stationCount + 1\r\n            }],\r\n            stationCount: this.state.stationCount + 1\r\n        });\r\n\r\n    }\r\n\r\n    //Called when user refuses to give access to loc data\r\n    //Initializes first weather station to Seattle in this case\r\n    getLocError = (err) => {\r\n        this.setState({\r\n            stations: [{\r\n                lat: 47.6062,\r\n                lon: -122.3321,\r\n                stationId: this.state.stationCount + 1\r\n            }],\r\n            stationCount: this.state.stationCount + 1\r\n        });\r\n\r\n    }\r\n\r\n    //addStation -- When user clicks on \"+\" button to add a new weather station,\r\n    //prompt the user for the location and attempt to add the requested station.\r\n    addStation = async () => {\r\n\r\n        const newStation = prompt(\"Enter a City, State, and Country:\");\r\n        if (newStation != null) { //Need to see if we can find the station through the API \r\n            const response = await fetch('https://api.openweathermap.org/data/2.5/weather?q=' +\r\n                newStation + '&appid=' + process.env.REACT_APP_API_KEY);\r\n            const stationData = await response.json();\r\n            //See if the requested station exists\r\n            if (stationData != null && stationData.hasOwnProperty('coord')) {\r\n                //Push new station into stations list\r\n                let newStations = [...this.state.stations];\r\n                newStations.push({\r\n                    lat: stationData.coord.lat,\r\n                    lon: stationData.coord.lon,\r\n                    stationId: this.state.stationCount + 1\r\n                });\r\n\r\n\r\n                this.setState({\r\n                    stations: newStations,\r\n                    stationCount: this.state.stationCount + 1\r\n                }, () => {\r\n                    this.writeStations(this.state.stationCount, stationData.coord.lat, stationData.coord.lon);\r\n                });\r\n\r\n            } else {\r\n                alert(\"Sorry, that weather location could not be found.\");\r\n            }\r\n        }\r\n    }\r\n\r\n    //save the stations to localstorage\r\n    // writeStations(ids, lats, longs) {\r\n    //     let thisUser = localStorage.getItem(\"userId\");\r\n    //     let data = JSON.parse(localStorage.getItem(thisUser));\r\n\r\n    //     //Initialize empty JavaScript object to store new or updated station\r\n    //     let thisStation = {}; //iniitalize empty object for this station\r\n\r\n    //     for (let i = 0; i < ids.length; i++) {\r\n    //         //Store the data\r\n    //         thisStation.id = ids[i];\r\n    //         thisStation.latitude = lats[i];\r\n    //         thisStation.longitude = longs[i];\r\n\r\n    //         data.weatherStations[i + 1] = thisStation;\r\n    //         data.weatherStationCount = ids.length;\r\n    //         localStorage.setItem(thisUser, JSON.stringify(data));\r\n    //         thisStation = {};\r\n    //     }\r\n    // }\r\n\r\n    deleteWeatherStation = async (newData) => {\r\n        // const url = '/weathers/' + this.props.userObj.id;\r\n        // const res = await fetch(url, {\r\n        //     headers: {\r\n        //         'Accept': 'application/json',\r\n        //         'Content-Type': 'application/json'\r\n        //         },\r\n        //     method: 'POST',\r\n        //     body: JSON.stringify(newData)}); \r\n        // const msg = await res.text();\r\n        // if (res.status != 200) {\r\n        //     //this.setState({errorMsg: msg});\r\n        //     //this.props.changeMode(AppMode.ROUNDS);\r\n        //     console.log(\"failure\");\r\n        // } else {\r\n        //     //this.setState({errorMsg: \"\"});\r\n        //     //this.props.refreshOnUpdate(AppMode.ROUNDS);\r\n        //     console.log(\"success\");\r\n        // }\r\n        console.log(\"delete station\");\r\n        console.log(\"stationId: \" + newData.id);\r\n    }\r\n\r\n    // deleteRound = async () => {\r\n    //     const url = '/rounds/' + this.props.userObj.id + '/' + \r\n    //         this.props.userObj.rounds[this.deleteId]._id;\r\n    //     const res = await fetch(url, {method: 'DELETE'}); \r\n    //     const msg = await res.text();\r\n    //     if (res.status != 200) {\r\n    //         this.setState({errorMsg: \"An error occurred when attempting to delete round from database: \" \r\n    //         + msg});\r\n    //         this.props.changeMode(AppMode.ROUNDS);\r\n    //     } else {\r\n    //         this.props.refreshOnUpdate(AppMode.ROUNDS);\r\n    //     }  \r\n    // }\r\n\r\n\r\n    //remove stations from array of weatherstations\r\n    removeStation = async (stationId) => {\r\n\r\n        console.log(\"stationId: \" + stationId);\r\n\r\n        let newStations = [...this.state.stations];\r\n\r\n        for (let i = 0; i < newStations.length; i++) {\r\n\r\n            if (newStations[i].stationId == stationId) {\r\n                newStations.splice(i, 1);\r\n            }\r\n        }\r\n\r\n        //update state\r\n        this.setState({stations: newStations,\r\n            stationCount: this.state.stationCount - 1}, () => {\r\n\r\n        });\r\n\r\n        const url = '/weathers/' + this.props.userObj.id + '/' + stationId.toString();\r\n        const res = await fetch(url, { method: 'DELETE' });\r\n        const msg = await res.text();\r\n        if (res.status != 200) {\r\n            this.setState({\r\n                errorMsg: \"An error occurred when attempting to delete round from database: \"\r\n                    + msg\r\n            });\r\n            this.props.changeMode(AppMode.COURSES);\r\n        } else {\r\n            this.props.refreshOnUpdate(AppMode.COURSES);\r\n        }\r\n\r\n    }\r\n\r\n    //move the station up or down based on direction/buton clicked\r\n    moveStation(stationId, direction) {\r\n\r\n        let newStations = [...this.state.stations];\r\n\r\n        if (direction == \"up\") {\r\n\r\n            if (stationId != newStations[0].stationId) {\r\n\r\n                for (let i = 0; i < newStations.length; i++) {\r\n                    if (newStations[i].stationId == stationId) {\r\n\r\n                        var x = i;\r\n                        var y = i - 1;\r\n                        //swap\r\n                        [newStations[x], newStations[y]] = [newStations[y], newStations[x]];\r\n                    }\r\n                }\r\n\r\n                //update array\r\n                this.setState({ stations: newStations }, () => {\r\n\r\n                });\r\n            }\r\n        }\r\n        else {\r\n            if (stationId != newStations[newStations.length - 1].stationId) {\r\n                for (let i = 0; i < newStations.length; i++) {\r\n                    if (newStations[i].stationId == stationId) {\r\n                        var x = i;\r\n                        var y = i + 1;\r\n\r\n                        //swap\r\n                        [newStations[x], newStations[y]] = [newStations[y], newStations[x]];\r\n                        break;\r\n\r\n                    }\r\n                }\r\n\r\n                //update array\r\n                this.setState({ stations: newStations }, () => {\r\n\r\n                });\r\n            }\r\n        }\r\n\r\n\r\n    }\r\n\r\n    //load stations from localstorage into array of weather stations\r\n    loadStations() {\r\n        this.props.refreshOnUpdate(AppMode.COURSES);\r\n\r\n        // let thisUser = localStorage.getItem(\"userId\");\r\n        // JSON.parse(localStorage.getItem(thisUser));\r\n        let data = this.props.userObj;\r\n\r\n        //check if null if first time logging in\r\n        if (data != null) {\r\n            let rows = [];\r\n\r\n\r\n            for (let i = 0; i < data.weathers.length; i++) {\r\n                // var keyid = i + 1;\r\n                rows.push({\r\n                    lat: Number.parseFloat(data.weathers[i].latitude),\r\n                    lon: Number.parseFloat(data.weathers[i].longitude),\r\n                    stationId: data.weathers[i].id,\r\n                });\r\n            }\r\n            console.log(rows);\r\n\r\n            //set the new array to state\r\n            this.setState({\r\n                stations: rows,\r\n                stationCount: rows.length,\r\n                initialFire: false\r\n            }, () => {\r\n\r\n            });\r\n        }\r\n\r\n\r\n\r\n    }\r\n\r\n    setHistory = (history) =>{\r\n        //console.log(history);\r\n        this.setState({Histories: history});\r\n        console.log(this.state.Histories);\r\n        this.props.history(history);\r\n    }\r\n\r\n    render() {\r\n\r\n        let rows = [];\r\n        let ids = [];\r\n        let lats = [];\r\n        let longs = [];\r\n\r\n        for (let i = 0; i < this.state.stations.length; i++) {\r\n            ids.push(this.state.stations[i].stationId);\r\n            lats.push(this.state.stations[i].lat);\r\n            longs.push(this.state.stations[i].lon);\r\n\r\n            rows.push(<WeatherStation key={this.state.stations[i].stationId}\r\n                latitude={this.state.stations[i].lat}\r\n                longitude={this.state.stations[i].lon}\r\n                stationId={this.state.stations[i].stationId}\r\n                moveStation={this.moveStation}\r\n                history={this.setHistory}\r\n                removeStation={this.removeStation}\r\n                addWeatherStation={this.deleteWeatherStation} \r\n                mode={this.props.mode}/>);\r\n        }\r\n\r\n\r\n        if (this.state.initialFire == false) {\r\n\r\n            let thisUser = localStorage.getItem(\"userId\");\r\n            let data = JSON.parse(localStorage.getItem(thisUser));\r\n\r\n            //set to null and resave to make things easier\r\n            data = null;\r\n            //this.writeStations(ids, lats, longs);\r\n        }\r\n\r\n        //if theres no stations, we want to fire componentDidMount\r\n        if (this.state.stationCount == 0) {\r\n            this.componentDidMount();\r\n        }\r\n\r\n        return (\r\n            <div id=\"main\">\r\n                <div id=\"weatherStations\">\r\n                    {rows}\r\n                </div>\r\n                {/* <div className=\"floatButton\" id=\"floatBtnDiv\">\r\n                    <a className=\"float\" id=\"addStationBtn\" onClick={this.addStation}>\r\n                        <span className=\"float-btn-icon fa fa-plus\" id=\"floatBtnIcon\"></span>\r\n                    </a>\r\n                </div> */}\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\nexport default CoursesPage;","import React from 'react';\r\n\r\nclass AboutBox extends React.Component {\r\n\r\nrender() {\r\n    return (\r\n        <div className=\"modal\" role=\"dialog\">\r\n        <div className=\"modal-dialog modal-lg\">\r\n            <div className=\"modal-content\">\r\n            <div className=\"modal-header\">\r\n                <h3>About SpeedScore</h3>\r\n                <button className=\"modal-close\" onClick={this.props.close}>\r\n                    &times;\r\n                </button>\r\n            </div>\r\n            <div className=\"modal-body\">\r\n                <img\r\n                src=\"https://dl.dropboxusercontent.com/s/awuwr1vpuw1lkyl/SpeedScore4SplashLogo.png\"\r\n                height=\"200\" width=\"200\"/>\r\n                <h3>The World's First and Only Suite of Apps for\r\n                Speedgolf</h3>\r\n                <p>Version CptS 489 Fa20 Complete (MERN)<br/>\r\n                &copy; 2017-20 The Professor of Speedgolf. All rights\r\n                reserved.\r\n                </p>\r\n                <div style={{textAlign: \"left\"}}>\r\n                <p>SpeedScore apps support</p>\r\n                <ul>\r\n                <li>live touranment scoring (<i>SpeedScore Live&reg;</i>)</li>\r\n                <li>tracking personal speedgolf rounds and sharing results\r\n                (<i>SpeedScore Track&reg;</i>)</li>\r\n                <li>finding speedgolf-friendly courses, booking tee times, and\r\n                paying to play speedgolf by the minute (<i>SpeedScore\r\n                Play&reg;</i>)</li>\r\n                </ul>\r\n                <p>SpeedScore was first developed by Dr. Chris Hundhausen,\r\n                associate professor of computer science at Washington State\r\n                University and the <i>Professor of Speedgolf</i>, with support\r\n                from Scott Dawley, CEO of Speedgolf USA, LLC.</p>\r\n                <p>For more information on SpeedScore, visit <a\r\n                href=\"http://speedscore.live\" target=\"_blank\">SpeedScore's web\r\n                site</a>. For more information on speedgolf, visit <a\r\n                href=\"http://playspeedgolf.com\"\r\n                target=\"_blank\">playspeedgolf.com</a> and <a\r\n                href=\"http://usaspeedgolf.com\" target=\"_blank\">Speedgolf\r\n                USA</a>.</p>\r\n                </div>\r\n            </div>\r\n            <div className=\"modal-footer\">\r\n                <button className=\"btn btn-primary btn-color-theme\"\r\n                onClick={this.props.close}>OK</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        </div>\r\n    );\r\n    }\r\n}\r\n\r\nexport default AboutBox;","import React from 'react';\r\nimport NavBar from './NavBar.js';\r\nimport SideMenu from './SideMenu.js';\r\nimport ModeBar from './ModeBar.js';\r\nimport CreateEditAccountDialog from './CreateEditAccountDialog.js'\r\nimport LoginPage from './LoginPage.js';\r\nimport AppMode from \"./../AppMode.js\"\r\nimport FeedPage from './FeedPage.js';\r\nimport Rounds from './Rounds.js';\r\nimport CoursesPage from './CoursesPage.js';\r\nimport AboutBox from './AboutBox.js';\r\n\r\nconst modeTitle = {};\r\n\r\nmodeTitle[AppMode.LOGIN] = \"Welcome to Weather App\";\r\nmodeTitle[AppMode.FEED] = \"Search\";\r\nmodeTitle[AppMode.ROUNDS] = \"Weather History\";\r\nmodeTitle[AppMode.ROUNDS_LOGROUND] = \"New Weather History\";\r\nmodeTitle[AppMode.ROUNDS_EDITROUND] = \"Edit Weather History\";\r\nmodeTitle[AppMode.COURSES] = \"Favorites\";\r\n\r\n\r\nconst modeToPage = {};\r\nmodeToPage[AppMode.LOGIN] = LoginPage;\r\nmodeToPage[AppMode.FEED] = FeedPage;\r\nmodeToPage[AppMode.ROUNDS] = Rounds;\r\nmodeToPage[AppMode.ROUNDS_LOGROUND] = Rounds;\r\nmodeToPage[AppMode.ROUNDS_EDITROUND] = Rounds;\r\nmodeToPage[AppMode.COURSES] = CoursesPage;\r\n\r\n\r\nclass App extends React.Component {\r\n\r\n  constructor() {\r\n    super();\r\n    this.state = {mode: AppMode.LOGIN,\r\n                  menuOpen: false,\r\n                  authenticated: false,\r\n                  userObj: {displayName: \"\", profilePicURL: \"\"},\r\n                  editAccount: false,\r\n                  showEditAccountDialog: false,\r\n                  statusMsg: \"\",\r\n                  showAboutDialog: false,\r\n                  Histories: []\r\n                 };\r\n  }\r\n\r\n  //componentDidMount\r\n  componentDidMount() {\r\n    if (!this.state.authenticated) { \r\n      //Use /auth/test route to (re)-test authentication and obtain user data\r\n      fetch(\"/auth/test\")\r\n        .then((response) => response.json())\r\n        .then((obj) => {\r\n          if (obj.isAuthenticated) {\r\n           \r\n            this.setState({\r\n              userObj: obj.user,\r\n              authenticated: true,\r\n              mode: AppMode.FEED //We're authenticated so can get into the app.\r\n            }, () => {\r\n              this.createLocalStorageForGuest();\r\n            });\r\n          }\r\n        }\r\n      )\r\n    } \r\n  }\r\n\r\n  //refreshOnUpdate(newMode) -- Called by child components when user data changes in \r\n  //the database. The function calls the users/:userid (GET) route to update \r\n  //the userObj state var based on the latest database changes, and sets the \r\n  //mode state var is set to newMode. After this method is called, the\r\n  //App will re-render itself, forcing the new data to \r\n  //propagate to the child components when they are re-rendered.\r\n  refreshOnUpdate = async(newMode) => {\r\n    let response = await fetch(\"/users/\" + this.state.userObj.id);\r\n    response = await response.json();\r\n    const obj = JSON.parse(response);\r\n    this.setState({\r\n      userObj: obj,\r\n      mode: newMode\r\n    });\r\n  }\r\n\r\n  createLocalStorageForGuest = () => {\r\n    \r\n    var id = this.state.userObj.id\r\n    if (id == \"guest@mail.com\") {\r\n      localStorage.setItem(\"userId\", id);\r\n\r\n      //Check whether we have saved data on this SpeedScore user:\r\n      let data = localStorage.getItem(id);\r\n      if (data == null) { \r\n          localStorage.setItem(id, JSON.stringify({\"weatherStations\" : {}, \"weatherStationCount\": 0}));  \r\n          this.setState({hasSavedStations: false});\r\n          \r\n      } \r\n      else {\r\n          this.setState({hasSavedStations: true}, () => {\r\n              console.log(\"Has data!!\");\r\n          });\r\n      }\r\n    }\r\n    \r\n  }\r\n\r\n\r\n  handleChangeMode = (newMode) => {\r\n    this.setState({mode: newMode});\r\n  }\r\n\r\n  openMenu = () => {\r\n    this.setState({menuOpen : true});\r\n  }\r\n  \r\n  closeMenu = () => {\r\n    this.setState({menuOpen : false});\r\n  }\r\n\r\n  toggleMenuOpen = () => {\r\n    this.setState(prevState => ({menuOpen: !prevState.menuOpen}));\r\n  }\r\n\r\n  setUserId = (Id) => {\r\n    this.setState({userId: Id,\r\n                   authenticated: true});\r\n  }\r\n\r\n  showEditAccount = () => {\r\n    this.setState({showEditAccountDialog: true});\r\n\r\n  }\r\n\r\n  cancelEditAccount = () => {\r\n    this.setState({showEditAccountDialog: false});\r\n  }\r\n\r\n  //editAccountDone -- called after successful edit or\r\n  //deletion of user account. msg contains the status\r\n  //message and deleted indicates whether an account was\r\n  //edited (deleted == false) or deleted (deleted == true)\r\n  editAccountDone = (msg, deleted) => {\r\n    if (deleted) {\r\n      this.setState({showEditAccountDialog: false,\r\n                     statusMsg: msg,\r\n                     mode: AppMode.LOGIN});\r\n      } else {\r\n        this.setState({showEditAccountDialog: false,\r\n          statusMsg: msg});\r\n      }\r\n  }\r\n\r\n  closeStatusMsg = () => {\r\n    this.setState({statusMsg: \"\"});\r\n  }\r\n\r\n  setHistory = (history) =>{\r\n    if (this.state.Histories.length === 0){\r\n      this.setState({Histories: history});\r\n    }\r\n    else {\r\n      history.countHistory = this.state.Histories.countHistory + 1;\r\n      this.setState(prevState => ({ Histories: prevState.Histories.concat(history)}));\r\n    }\r\n    console.log(\"Root\");\r\n    console.log(this.state.Histories);\r\n  }\r\n  setDeleteId = (val) =>{\r\n    delete this.state.Histories[val];\r\n  }\r\n\r\n  render() {\r\n    const ModePage = modeToPage[this.state.mode];\r\n    return (\r\n      <div className=\"padded-page\">\r\n        {this.state.showAboutDialog ? \r\n          <AboutBox close={() => this.setState({showAboutDialog: false})}/> : null}\r\n        {this.state.statusMsg != \"\" ? <div className=\"status-msg\">\r\n              <span>{this.state.statusMsg}</span>\r\n              <button className=\"modal-close\" onClick={this.closeStatusMsg}>\r\n                  <span className=\"fa fa-times\"></span></button></div> : null}\r\n        {this.state.showEditAccountDialog ? \r\n            <CreateEditAccountDialog \r\n              create={false} \r\n              userId={this.state.userObj.id} \r\n              done={this.editAccountDone} \r\n              cancel={this.cancelEditAccount}/> : null}\r\n        <NavBar \r\n          title={modeTitle[this.state.mode]} \r\n          mode={this.state.mode}\r\n          changeMode={this.handleChangeMode}\r\n          menuOpen={this.state.menuOpen}\r\n          toggleMenuOpen={this.toggleMenuOpen}/>\r\n          <SideMenu \r\n            menuOpen = {this.state.menuOpen}\r\n            mode={this.state.mode}\r\n            toggleMenuOpen={this.toggleMenuOpen}\r\n            displayName={this.state.userObj.displayName}\r\n            profilePicURL={this.state.userObj.profilePicURL}\r\n            localAccount={this.state.userObj.authStrategy === \"local\"}\r\n            userObj={this.state.userObj}\r\n            editAccount={this.showEditAccount}\r\n            logOut={() => {this.handleChangeMode(AppMode.LOGIN); localStorage.setItem(\"userId\", null)}}\r\n            showAbout={() => {this.setState({showAboutDialog: true})}}/>\r\n          <ModeBar \r\n            mode={this.state.mode} \r\n            changeMode={this.handleChangeMode}\r\n            menuOpen={this.state.menuOpen}/>\r\n          <ModePage \r\n            menuOpen={this.state.menuOpen}\r\n            mode={this.state.mode}\r\n            Histories={this.state.Histories}\r\n            changeMode={this.handleChangeMode}\r\n            setDeleteId={this.setDeleteId}\r\n            userObj={this.state.userObj}\r\n            history={this.setHistory}\r\n            refreshOnUpdate={this.refreshOnUpdate}/>\r\n      </div>\r\n    );  \r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport 'bootstrap-social/bootstrap-social.css';\r\nimport 'font-awesome/css/font-awesome.min.css';\r\nimport './styles/index.css';\r\nimport App from './components/App.js';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}