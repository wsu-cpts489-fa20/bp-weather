{"version":3,"sources":["AppMode.js","components/NavBar.js","components/SideMenu.js","components/ModeBar.js","components/ConfirmDeleteAccount.js","components/CreateEditAccountDialog.js","components/ResetPasswordDialog.js","components/LookUpAccountDialog.js","components/SecurityQuestionDialog.js","components/LoginPage.js","components/WeatherStation.js","components/FeedPage.js","components/ConfirmDeleteRound.js","components/RoundsTable.js","components/RoundForm.js","components/FloatingButton.js","components/Rounds.js","components/CoursesPage.js","components/AboutBox.js","components/App.js","serviceWorker.js","index.js"],"names":["AppMode","LOGIN","FEED","ROUNDS","ROUNDS_LOGROUND","ROUNDS_EDITROUND","COURSES","Object","freeze","NavBar","getMenuBtnIcon","props","mode","menuOpen","handleMenuBtnClick","changeMode","toggleMenuOpen","className","onClick","this","id","src","alt","height","width","title","React","Component","SideMenu","renderModeMenuItems","profilePicURL","displayName","localAccount","editAccount","showAbout","logOut","ModeBar","ConfirmDeleteAccount","handleChange","match","emailRef","current","value","email","state","emailMatches","setState","createRef","focus","role","close","type","ref","onChange","deleteAccount","disabled","CreateEditAccountDialog","checkDataValidity","password","passwordRepeat","repeatPassRef","setCustomValidity","event","formUpdated","origAccountInfo","formIsUpdated","target","name","length","self","reader","FileReader","readAsDataURL","profilePicRef","files","addEventListener","result","updateField","updateVal","securityQuestion","securityAnswer","setDefaultDisplayName","handleSubmit","a","preventDefault","userData","url","accountName","create","fetch","headers","method","body","JSON","stringify","res","status","done","text","resText","confirmDelete","confirmDeleteAccount","e","newUserRef","userId","json","parse","cancel","onSubmit","autocomplete","size","placeholder","pattern","required","onBlur","accept","profilePic","profilePicDataURL","rows","cols","maxLength","ResetPasswordDialog","resetPasswordRef","resetPasswordRepeatRef","resetPassword","errorMsg","checkForSubmit","code","cancelResetPassword","onKeyUp","LookUpAccountDialog","handleLookUpAccount","response","obj","authStrategy","getSecurityAnswer","ErrMsg","errMsg","SecurityQuestionDialog","securityAnswerRef","answer","getNewPassword","readOnly","question","LoginPage","handleLoginSubmit","loginBtnIcon","loginBtnLabel","emailInputRef","passwordInputRef","window","open","statusMsg","accountCreateDone","msg","showCreateAccountDialog","cancelCreateAccount","resetUserId","resetQ","resetA","showLookUpAccountDialog","showSecurityQuestionDialog","showResetPaswordDialog","handleOAuthLogin","provider","handleOAuthLoginClick","setTimeout","pw","showResetPasswordDialog","deleted","closeStatusMsg","githubIcon","githubLabel","loginMsg","newAccountCreated","htmlFor","style","padding","fontSize","require","config","WeatherStation","componentDidMount","getCurrentObservations","console","log","latitude","longitude","currWeather","place","retrieved","Date","toLocaleDateString","toLocaleTimeString","conditions","weather","main","visibility","visibilityUnit","temp","Math","round","tempUnit","humidity","wind","speed","deg","toggleUnits","units","parseFloat","toFixed","windUnit","align","moveStation","stationId","removeStation","windDirection","windDirectionUnit","FeedPage","initialFire","savedStation","loadStations","navigator","geolocation","getCurrentPosition","getLocSuccess","getLocError","position","stations","lat","lon","stationCount","err","addNewStation","newStation","document","getElementById","stationData","hasOwnProperty","newStations","push","coord","writeStations","alert","searchForLocation","reset","bind","ids","lats","longs","thisUser","localStorage","getItem","data","thisStation","i","weatherStations","weatherStationCount","setItem","splice","direction","x","y","keyid","Number","key","ConfirmDeleteRound","deleteRound","RoundsTable","editRound","setEditId","showConfirmDelete","setDeleteId","renderTable","table","r","rounds","date","substring","course","strokes","minutes","seconds","keys","colSpan","fontStyle","RoundForm","newSec","newSGS","computeSGS","SGS","newStrokes","newMin","faIcon","btnLabel","roundData","saveRound","min","sec","today","now","getTimezoneOffset","toISOString","substr","holes","notes","thisRound","startData","max","FloatingButton","handleClick","Rounds","addRound","newData","userObj","refreshOnUpdate","editId","_id","deleteId","val","closeErrorMsg","icon","CoursesPage","AboutBox","textAlign","href","modeTitle","modeToPage","App","newMode","handleChangeMode","openMenu","closeMenu","prevState","setUserId","Id","authenticated","showEditAccount","showEditAccountDialog","cancelEditAccount","editAccountDone","showAboutDialog","then","isAuthenticated","user","ModePage","Boolean","location","hostname","ReactDOM","render","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e2e830a6.chunk.js","sourcesContent":["/* AppMode: The enumerated type for AppMode. */\r\n\r\nconst AppMode = {\r\n    LOGIN: \"LoginMode\",\r\n    FEED: \"FeedMode\",\r\n    ROUNDS: \"RoundsMode\",\r\n    ROUNDS_LOGROUND: \"RoundsMode-LogRound\",\r\n    ROUNDS_EDITROUND: \"RoundsMode-EditRound\",\r\n    COURSES: \"CoursesMode\"\r\n};\r\n\r\nObject.freeze(AppMode); //This ensures that the object is immutable.\r\n\r\nexport default AppMode;","import React from 'react';\r\nimport AppMode from '../AppMode';\r\n\r\nclass NavBar extends React.Component {\r\n\r\n  getMenuBtnIcon = () => {\r\n      if (this.props.mode === AppMode.ROUNDS_LOGROUND || \r\n          this.props.mode === AppMode.ROUNDS_EDITROUND)\r\n          return \"fa fa-arrow-left\";\r\n      if (this.props.menuOpen)\r\n        return \"fa fa-times\";\r\n      return \"fa fa-bars\";\r\n  }\r\n\r\n  handleMenuBtnClick = () => {\r\n    if (this.props.mode === AppMode.ROUNDS_LOGROUND ||\r\n        this.props.mode === AppMode.ROUNDS_EDITROUND) {\r\n      this.props.changeMode(AppMode.ROUNDS);\r\n    } else if (this.props.mode != AppMode.LOGIN) {\r\n      this.props.toggleMenuOpen();\r\n    }\r\n  }\r\n\r\n    \r\n  render() {\r\n    return (\r\n    <div className=\"navbar\">  \r\n    <span className=\"navbar-items\">\r\n      <button className=\"sidemenu-btn\" onClick={this.handleMenuBtnClick}>\r\n        <span id=\"menuBtnIcon\" className={\"sidemenu-btn-icon \" + this.getMenuBtnIcon()}>\r\n        </span>\r\n      </button>\r\n      <img src=\"http://tiny.cc/sslogo\" alt=\"Speed Score Logo\" height=\"38px\"\r\n      width=\"38px\" />\r\n      <span className=\"navbar-title\">\r\n        &nbsp;{this.props.title}\r\n      </span>\r\n    </span>\r\n  </div>\r\n); \r\n}\r\n}\r\n\r\nexport default NavBar;\r\n","import React from 'react';\r\nimport AppMode from './../AppMode.js'\r\n\r\nclass SideMenu extends React.Component {\r\n\r\n//renderModeItems -- Renders correct subset of mode menu items based on\r\n//current mode, which is stored in this.prop.mode. Uses switch statement to\r\n//determine mode.\r\nrenderModeMenuItems = () => {\r\n  switch (this.props.mode) {\r\n    case AppMode.FEED:\r\n      return(\r\n        <div>\r\n        <a className=\"sidemenu-item\">\r\n            <span className=\"fa fa-users\"></span>&nbsp;Followed Users</a>\r\n        <a className=\"sidemenu-item \">\r\n            <span className=\"fa fa-search\"></span>&nbsp;Search Feed</a>\r\n        </div>\r\n      );\r\n    break;\r\n    case AppMode.ROUNDS:\r\n      return(\r\n        <div>\r\n          <a className=\"sidemenu-item\">\r\n            <span className=\"fa fa-plus\"></span>&nbsp;Log New Round</a>\r\n          <a className=\"sidemenu-item\">\r\n            <span className=\"fa fa-search\"></span>&nbsp;Search Rounds</a>\r\n        </div>\r\n      );\r\n    break;\r\n    case AppMode.COURSES:\r\n      return(\r\n        <div>\r\n        <a className=\"sidemenu-item\">\r\n            <span className=\"fa fa-plus\"></span>&nbsp;Add a Course</a>\r\n        <a className=\"sidemenu-item\">\r\n            <span className=\"fa fa-search\"></span>&nbsp;Search Courses</a>\r\n        </div>\r\n      );\r\n    default:\r\n        return null;\r\n    }\r\n}\r\n\r\n    render() {\r\n       return (\r\n        <div className={\"sidemenu \" + (this.props.menuOpen ? \"sidemenu-open\" : \"sidemenu-closed\")}\r\n             onClick={this.props.toggleMenuOpen}>\r\n          {/* SIDE MENU TITLE */}\r\n          <div className=\"sidemenu-title\">\r\n            <img src={this.props.profilePicURL} height='60' width='60' />\r\n            <span id=\"userID\" className=\"sidemenu-userID\">&nbsp;{this.props.displayName}</span>\r\n        </div>\r\n          {/* MENU CONTENT */}\r\n          {this.renderModeMenuItems()}\r\n          {/* The following menu items are present regardless of mode */}\r\n          {this.props.localAccount ? \r\n            <a id=\"accountBtn\" className=\"sidemenu-item\" onClick={this.props.editAccount}>\r\n              <span className=\"fa fa-user\"></span>&nbsp;Account</a> : null}\r\n          <a id=\"aboutBtn\" className=\"sidemenu-item\" onClick={this.props.showAbout}>\r\n            <span className=\"fa fa-info-circle\"></span>&nbsp;About</a>\r\n          <a id=\"logOutBtn\" className=\"sidemenu-item\" onClick={this.props.logOut}>\r\n            <span className=\"fa fa-sign-out-alt\"></span>&nbsp;Log Out</a>\r\n        </div>\r\n       );\r\n    }\r\n}\r\n\r\nexport default SideMenu;\r\n","import React from 'react';\r\nimport AppMode from '../AppMode.js';\r\n\r\n\r\nclass ModeBar extends React.Component {\r\n    render() {\r\n      return(\r\n        <div className={\"modebar\" + (this.props.mode === AppMode.LOGIN ? \r\n          \" invisible\" : (this.props.menuOpen ? \" ignore-click visible\" : \" visible\"))}>\r\n        <a className={(this.props.mode === AppMode.FEED ? \" item-selected\" : null)}\r\n            onClick={()=>this.props.changeMode(AppMode.FEED)}>\r\n          <span className=\"modebaricon fa fa-search\" id=\"searchTab\"></span>\r\n          <span className=\"modebar-text\">Search Location</span>\r\n        </a>\r\n        <a className={(this.props.mode === AppMode.ROUNDS || \r\n               this.props.mode === AppMode.ROUNDS_EDITROUND || \r\n               this.props.mode === AppMode.ROUNDS_LOGROUND ? \r\n                  \" item-selected\" : null)}\r\n           onClick={()=>this.props.changeMode(AppMode.ROUNDS)}>\r\n          <span className=\"modebar-icon fa fa-heart\" id=\"favoritesTab\"></span>\r\n          <span className=\"modebar-text\">Favorites</span>\r\n        </a>\r\n        <a className={(this.props.mode === AppMode.COURSES ? \" item-selected\" : null)}\r\n          onClick={()=>this.props.changeMode(AppMode.COURSES)}>\r\n          <span className=\"modebar-icon  fa fa-flag\" id=\"historyTab\"></span>\r\n          <span className=\"modebar-text\">Weather History</span>\r\n        </a> \r\n        </div>\r\n      );\r\n    }\r\n}\r\n\r\nexport default ModeBar;\r\n","import React from 'react';\r\n\r\nclass ConfirmDeleteAccount extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.emailRef = React.createRef();\r\n        this.state = {emailMatches: false};\r\n    }\r\n    \r\n    componentDidMount() {\r\n        this.emailRef.current.focus();\r\n    }\r\n\r\n    handleChange = () => {\r\n        const match = (this.emailRef.current.value === this.props.email);\r\n        if (match != this.state.emailMatches) {\r\n            this.setState({emailMatches: match});\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n        <div id=\"aboutModal\" className=\"modal\" role=\"dialog\">\r\n        <div className=\"modal-content\">\r\n            <div className=\"modal-header\">\r\n              <center>\r\n                <h3 className=\"modal-title\"><b>Confirm Account Deletion</b></h3>\r\n              </center>\r\n               <button id=\"modalClose\" className=\"modal-close\" onClick={this.props.close}>\r\n                 &times;</button>\r\n            </div>\r\n            <div className=\"modal-body\">\r\n              <p>Do you really want to delete your account? <br />\r\n                 <i>This action cannot be undone.</i></p>\r\n              <label>\r\n                Confirm Email ({this.props.email}):\r\n                <br/>\r\n                <input \r\n                    className=\"form-center\"\r\n                    type=\"text\"\r\n                    ref={this.emailRef}\r\n                    onChange={this.handleChange} />\r\n                </label>\r\n                <br />\r\n            </div>\r\n            <div className=\"modal-footer\">\r\n                  <button className=\"btn btn-danger\" onClick={this.props.deleteAccount} disabled={!this.state.emailMatches}>\r\n                  Yes, Delete My Account</button>\r\n                  <button className=\"btn btn-secondary\" onClick={this.props.close}>\r\n                  No, Cancel</button>\r\n            </div>\r\n        </div>\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ConfirmDeleteAccount;","import React from 'react';\r\nimport ConfirmDeleteAccount from './ConfirmDeleteAccount.js';\r\nimport confirmDeleteAccount from './ConfirmDeleteAccount.js';\r\n\r\nclass CreateEditAccountDialog extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.origAccountInfo = null;\r\n        //Create a ref for the email input DOM element\r\n        this.newUserRef = React.createRef();\r\n        this.repeatPassRef = React.createRef();\r\n        this.profilePicRef = React.createRef();\r\n        this.state = {accountName: \"\",\r\n                      displayName: \"\",\r\n                      profilePicURL: \"https://icon-library.net//images/default-profile-icon/default-profile-icon-24.jpg\",\r\n                      password: \"\",\r\n                      passwordRepeat: \"\",\r\n                      securityQuestion: \"\",\r\n                      securityAnswer: \"\",\r\n                      formUpdated: false,\r\n                      confirmDelete: false};\r\n    } \r\n\r\n    //componentDidMount -- If we are editing an existing user acccount, we need to grab the data from\r\n    //the database and push them into the state.\r\n    async componentDidMount() {\r\n        if (!this.props.create) {\r\n            //obtain current user data from database and push into state\r\n            const url = \"/users/\" + this.props.userId;\r\n            const res = await fetch(url);\r\n            const json = await res.json();\r\n            const userData = JSON.parse(json);\r\n            this.origAccountInfo = userData; //This determines whether update can occur\r\n            this.origAccountInfo.passwordRepeat = userData.password;\r\n            this.setState({accountName: this.props.userId,\r\n                           displayName: userData.displayName,\r\n                           profilePicURL: userData.profilePicURL,\r\n                           password: userData.password,\r\n                           passwordRepeat: userData.password,\r\n                           securityQuestion: userData.securityQuestion,\r\n                           securityAnswer: userData.securityAnswer});\r\n        }\r\n    }\r\n\r\n    //checkDataValidity -- Callback function invoked after a form element in\r\n    //the 'Create Account' dialog box changes and component state has been\r\n    //updated. We first check whether the passwords match. If they do not, \r\n    //we set a custom validity message to be displayed when the user clicks the\r\n    //'Create Account' button. Otherwise, we reset the custom validity message\r\n    //to empty so that it will NOT fire when the user clicks 'Create Account'.\r\n    //Second, we check whether anything in the form changed from the original.\r\n    //If so, we update the 'formUpdated' state var, so that the form's submit\r\n    //button is enabled.\r\n    checkDataValidity = () => {\r\n        if (this.state.password != this.state.passwordRepeat) {\r\n            //Passwords don't match\r\n            this.repeatPassRef.current.setCustomValidity(\r\n            \"This password must match password entered in previous field.\");\r\n        } else {\r\n            this.repeatPassRef.current.setCustomValidity(\"\");\r\n        }\r\n    }\r\n\r\n    //handleChange--Called when a field in a dialog box form changes.\r\n    handleChange = (event) => {\r\n        const formUpdated = (this.origAccountInfo == null ? true : this.formIsUpdated(event.target.name,event.target.value));\r\n        if (event.target.name === \"profilePic\") {\r\n            if (event.target.value.length == 0) { //The user canceled the file selection -- set back to default\r\n                this.setState({profilePicURL: \"https://icon-library.net//images/default-profile-icon/default-profile-icon-24.jpg\",\r\n                               formUpdated: formUpdated},\r\n                               this.checkDataValidity);\r\n            } else { //The user selected a file\r\n                const self = this;\r\n                const reader = new FileReader();\r\n                reader.readAsDataURL(this.profilePicRef.current.files[0]);\r\n                reader.addEventListener(\"load\",function() {\r\n                    self.setState({profilePicURL:  this.result,\r\n                                   formUpdated: formUpdated},this.checkDataValidity);\r\n                });\r\n                \r\n            }\r\n        } else {\r\n            this.setState({[event.target.name]: event.target.value,\r\n                           formUpdated: formUpdated},this.checkDataValidity);\r\n        }\r\n    } \r\n\r\n    //formisUpdated-- Checks whether any form data element has changed from the original. If so, \r\n    //returns true. Returns false otherwise. Note that in case of editing new account, always returns\r\n    //true since this.origAccountInfo is set to null.\r\n    //Should be called whenever the user makes a change to form data.\r\n    formIsUpdated = (updateField,updateVal) => {\r\n        if (this.origAccountInfo[updateField] != updateVal) {return true;}\r\n        if (updateField != \"displayName\" && \r\n             this.state.displayName != this.origAccountInfo.displayName) \r\n             {return true;}\r\n        if (updateField != \"profilePicURL\" && \r\n             this.state.profilePicURL != this.origAccountInfo.profilePicURL) \r\n             {return true;}\r\n        if (updateField != \"password\" &&\r\n            this.state.password !== this.origAccountInfo.password)\r\n            {return true;}\r\n        if (updateField != \"passwordRepeat\" &&\r\n            this.state.passwordRepeat !== this.origAccountInfo.passwordRepeat)\r\n            {return true;}\r\n        if (updateField != \"securityQuestion\" &&\r\n            this.state.securityQuestion !== this.origAccountInfo.securityQuestion)\r\n            {return true;}\r\n        if (updateField != \"securityAnswer\" &&\r\n            this.state.securityAnswer !== this.origAccountInfo.securityAnswer)\r\n            {return true;}\r\n        return false;\r\n    }\r\n\r\n    //setDefaultDisplayName -- Triggered by onBlur() event of Email field.\r\n    //Sets default value of display name to value entered into Email field \r\n    //as a courtesy.\r\n    setDefaultDisplayName = (event) => {\r\n      if (event.target.value.length > 0 && this.state.displayName === \"\") {\r\n        this.setState({displayName: event.target.value});\r\n      }\r\n    }\r\n\r\n    //handleSubmit -- Triggered when user clicks on submit button to\r\n    //either create or edit account.\r\n    //Custom data checking ensures user account under this email does not \r\n    //already exist and that the rest of the info is valid. We create a new  \r\n    // object for user, save it to localStorage and take user to app's \r\n    //landing page. \r\n    handleSubmit = async(event) => {\r\n        event.preventDefault();\r\n        //Initialize user account\r\n        let userData = {\r\n            displayName: this.state.displayName,\r\n            password: this.state.password,\r\n            profilePicURL: this.state.profilePicURL,\r\n            securityQuestion: this.state.securityQuestion,\r\n            securityAnswer: this.state.securityAnswer\r\n        };\r\n        const url = '/users/' + this.state.accountName;\r\n        let res;\r\n        if (this.props.create) { //use POST route to create new user account\r\n            res = await fetch(url, {\r\n                headers: {\r\n                    'Accept': 'application/json',\r\n                    'Content-Type': 'application/json'\r\n                    },\r\n                method: 'POST',\r\n                body: JSON.stringify(userData)}); \r\n            if (res.status == 200) { //successful account creation!\r\n                this.props.done(\"New account created! Enter credentials to log in.\",false);\r\n            } else { //Unsuccessful account creation\r\n                //Grab textual error message\r\n                const resText = await res.text();\r\n                this.props.done(resText,false);\r\n            }\r\n        } else { //use PUT route to update existing user account\r\n            res = await fetch(url, {\r\n                headers: {\r\n                    'Accept': 'application/json',\r\n                    'Content-Type': 'application/json'\r\n                    },\r\n                method: 'PUT',\r\n                body: JSON.stringify(userData)}); \r\n            if (res.status == 200) { //successful account creation!\r\n                this.props.done(\"User Account Updated!\",false);\r\n            } else { //Unsuccessful account update\r\n                //Grab textual error message\r\n                const resText = await res.text();\r\n                this.props.done(resText,false);\r\n            }\r\n        }\r\n    }\r\n\r\n    //deleteAccount -- Called after confirms account deletion. \r\n    //Uses DELETE server route to perform server deletion. \r\n    //Calls on done with status message and\r\n    //true if delete was succesful, false otherwise.\r\n    deleteAccount = async() => {\r\n       const url = '/users/' + this.state.accountName;\r\n       const res = await fetch(url, \r\n                    {method: 'DELETE'}); \r\n        if (res.status == 200) { //successful account deletion!\r\n            this.props.done(\"Account '\" + this.state.accountName + \"' has been deleted.\",true);\r\n        } else { //Unsuccessful account deletion\r\n            //Grab textual error message\r\n            const resText = await res.text();\r\n            this.props.done(resText,false);\r\n        }\r\n        this.setState({confirmDelete: false});\r\n    }\r\n\r\n    //confirmDeleteAccount -- Called when user clicks on \"Delete Account...\"\r\n    //button to indicate intention to delete account. Presents the Confirm\r\n    //Delete dialog box.\r\n    confirmDeleteAccount = (e) => {\r\n        e.preventDefault();\r\n        this.setState({confirmDelete: true});\r\n    }\r\n\r\n    render() {\r\n    return (  \r\n    <div className=\"modal\" role=\"dialog\">\r\n    <div className=\"modal-dialog modal-lg\"></div>\r\n        <div className=\"modal-content form-center\">\r\n            <div className=\"modal-header\">\r\n              <h3><b>{this.props.create ? \"Create New Account\" : \"Edit Account\"}</b></h3>\r\n              <button className=\"modal-close\" \r\n                       onClick={this.props.cancel}>\r\n                &times;</button>\r\n            </div>\r\n            <div className=\"modal-body\">\r\n            <form onSubmit={this.handleSubmit}>\r\n            <label>\r\n                Email: \r\n                <input  \r\n                autocomplete=\"off\"\r\n                disabled={!this.props.create}\r\n                className=\"form-control form-text form-center\"\r\n                name=\"accountName\"\r\n                type=\"email\"\r\n                size=\"35\"\r\n                placeholder=\"Enter Email Address\"\r\n                pattern=\"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}\"\r\n                required={true}\r\n                ref={this.newUserRef}\r\n                value={this.state.accountName}\r\n                onChange={this.handleChange}\r\n                onBlur={this.setDefaultDisplayName}\r\n                />\r\n            </label>\r\n            <br/>\r\n            <label>\r\n                Password:\r\n                <input\r\n                autocomplete=\"off\"\r\n                className=\"form-control form-text form-center\"\r\n                name=\"password\"\r\n                type=\"password\"\r\n                size=\"35\"\r\n                placeholder=\"Enter Password\"\r\n                pattern=\r\n                \"(?=^.{8,}$)((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z])(?=.*[a-z]).*$\"\r\n                required={true}\r\n                value={this.state.password}\r\n                onChange={this.handleChange}\r\n                />\r\n            </label>\r\n            <br/>\r\n            <label>\r\n                Repeat Password:\r\n                <input\r\n                className=\"form-control form-text form-center\"\r\n                name=\"passwordRepeat\"\r\n                type=\"password\"\r\n                size=\"35\"\r\n                placeholder=\"Repeat Password\"\r\n                required={true}\r\n                ref={this.repeatPassRef}\r\n                value={this.state.passwordRepeat}\r\n                onChange={this.handleChange}\r\n                />\r\n            </label>\r\n            <br/>\r\n            <label>\r\n                Display Name:\r\n                <input\r\n                className=\"form-control form-text form-center\"\r\n                name=\"displayName\"\r\n                type=\"text\"\r\n                size=\"30\"\r\n                placeholder=\"Display Name\"\r\n                required={true}\r\n                value={this.state.displayName}\r\n                onChange={this.handleChange}\r\n                />\r\n            </label>\r\n            <br/>\r\n            <label>\r\n                Profile Picture:<br/>\r\n                <input\r\n                className=\"form-control form-text form-center\"\r\n                name=\"profilePic\"\r\n                type=\"file\"\r\n                accept=\"image/x-png,image/gif,image/jpeg\" \r\n                ref={this.profilePicRef}\r\n                value={this.state.profilePic}\r\n                onChange={this.handleChange}\r\n                />\r\n                <img src={this.state.profilePicURL != \"\" ? \r\n                            this.state.profilePicURL :\r\n                            this.state.profilePicDataURL} \r\n                        height=\"60\" width=\"60\" \r\n                 />\r\n            </label> \r\n            <br/>\r\n            <label>\r\n                Security Question:\r\n                <textarea\r\n                className=\"form-control form-text form-center\"\r\n                name=\"securityQuestion\"\r\n                size=\"35\"\r\n                placeholder=\"Security Question\"\r\n                rows=\"2\"\r\n                cols=\"35\"\r\n                maxLength=\"100\"\r\n                required={true}\r\n                value={this.state.securityQuestion}\r\n                onChange={this.handleChange}\r\n                />\r\n            </label>\r\n            <br/>\r\n            <label>\r\n                Answer to Security Question:\r\n                <textarea\r\n                className=\"form-control form-text form-center\"\r\n                name=\"securityAnswer\"\r\n                type=\"text\"\r\n                placeholder=\"Answer\"\r\n                rows=\"2\"\r\n                cols=\"35\"\r\n                maxLength=\"100\"\r\n                required={true}\r\n                value={this.state.securityAnswer}\r\n                onChange={this.handleChange}\r\n                />\r\n            </label>\r\n            <br/>\r\n            {!this.props.create ?  \r\n            <button className=\"btn btn-small btn-danger\" onClick={this.confirmDeleteAccount}>\r\n                Delete Account...\r\n            </button> : null}\r\n            <br/><br/>\r\n            <button role=\"submit\" \r\n                disabled={!this.state.formUpdated}\r\n                className=\"btn btn-primary btn-color-theme modal-submit-btn\">\r\n                <span className={this.props.create ? \"fa fa-user-plus\" : \"fa fa-user\"}></span>\r\n                &nbsp;{this.props.create ? \"Create Account\" : \"Update Account\"}\r\n            </button>\r\n            </form>\r\n            </div>\r\n        </div>\r\n        {this.state.confirmDelete ? \r\n          <ConfirmDeleteAccount email={this.state.accountName}\r\n                                deleteAccount={this.deleteAccount}\r\n                                close={() => (this.setState({confirmDelete: false}))}\r\n         /> : null}\r\n    </div>\r\n    );\r\n}\r\n}\r\n\r\nexport default CreateEditAccountDialog;","import React from 'react'\r\n\r\nclass ResetPasswordDialog extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.resetPasswordRef = React.createRef();\r\n        this.resetPasswordRepeatRef = React.createRef();\r\n        this.state = {errorMsg: \"\"};\r\n    }\r\n\r\n    //handleSubmit -- When the user submits the form, ensure that the passwords match.\r\n    //If so, call on resetPassword in parent component to actually reset the password.\r\n    //Otherwise, display an error message prompting the user to try again.\r\n    handleSubmit= (event) => {\r\n        event.preventDefault();\r\n        if (this.resetPasswordRef.current.value === this.resetPasswordRepeatRef.current.value) {\r\n            this.props.resetPassword(this.resetPasswordRef.current.value);\r\n        } else {\r\n            this.resetPasswordRepeatRef.current.focus();\r\n            this.setState({errorMsg: \"The passwords you entered do not match. Please try again.\"});\r\n        }\r\n    }\r\n\r\n    checkForSubmit = (e) => {\r\n        if (e.code === \"Enter\") {\r\n            e.preventDefault();\r\n            this.handleSubmit();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"modal\" role=\"dialog\">\r\n              <div className=\"modal-dialog modal-lg\">\r\n                <div className=\"modal-content\">\r\n                  <div className=\"modal-header\">\r\n                    <h3 className=\"modal-title\"><b>Reset Password</b>\r\n                    </h3>\r\n                    <button className=\"modal-close\" \r\n                        onClick={this.props.cancelResetPassword}>\r\n                        &times;\r\n                    </button>\r\n                  </div>\r\n                  <div className=\"modal-body\">\r\n                    {this.state.errorMsg != \"\" ? <p className=\"emphasis\">{this.state.errorMsg}</p> : null} \r\n                    <form onSubmit={this.handleSubmit}>\r\n                    <label>\r\n                        New Password: \r\n                        <input\r\n                        type=\"password\"\r\n                        placeholder=\"Enter new password\"\r\n                pattern=\"(?=^.{8,}$)((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z])(?=.*[a-z]).*$\"\r\n                        className=\"form-control form-text\"\r\n                        ref={this.resetPasswordRef}\r\n                        />\r\n                    </label>\r\n                    <label>\r\n                        Repeat New Password: \r\n                        <input\r\n                        type=\"password\"\r\n                        placeholder=\"Repeat new password\"\r\n                        className=\"form-control form-text\"\r\n                        onKeyUp={this.checkForSubmit}\r\n                        ref={this.resetPasswordRepeatRef}\r\n                        />\r\n                    </label>\r\n                    <button role=\"submit\" \r\n                     className=\"btn btn-primary btn-color-theme form-submit-btn\">\r\n                        <span className=\"fa fa-key\"></span>&nbsp;Reset Password\r\n                    </button>\r\n                    </form>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          );\r\n        \r\n    }\r\n}\r\n\r\nexport default ResetPasswordDialog;","import React from 'react';\r\nimport AppMode from '../AppMode.js';\r\n\r\nclass LookUpAccountDialog extends React.Component {\r\n\r\n    constructor() {\r\n        super();\r\n        this.emailRef = React.createRef();\r\n        this.state = {errorMsg: \"\"};\r\n    }\r\n\r\n    //handleLookUpAccount: When the user clicks on the \"Look Up Account\" dialog box\r\n    //button, we check whether the account exists. If it does, we update the state,\r\n    //setting the resetEmail var to the email entered, hiding the current dialog box\r\n    //and showing the security question dialog box.\r\n    handleLookUpAccount = async(event) => {\r\n        event.preventDefault();\r\n        let response = await fetch(\"/users/\" + this.emailRef.current.value);\r\n        if (response.status == 200) {\r\n            const json = await response.json();\r\n            const obj = JSON.parse(json);\r\n            if (obj.authStrategy === \"local\") {\r\n                this.props.getSecurityAnswer(obj.id,obj.securityQuestion, obj.securityAnswer);\r\n            } else { //Account exists but was created through OAuth so password can't be reset \r\n                this.setState({ErrMsg: \"That account is authenticated through \" + obj.authStrategy + \". \" +\r\n                               \"Please log in to \" + obj.authStrategy + \" to reset the password.\"});\r\n            }\r\n        } else {\r\n            this.setState({errorMsg: \"Sorry, there is no account associated with '\" + this.emailRef.current.value + \"'.\"});\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"modal\" role=\"dialog\">\r\n              <div className=\"modal-dialog modal-lg\">\r\n                <div className=\"modal-content\">\r\n                  <div className=\"modal-header\">\r\n                    <h3 className=\"modal-title\"><b>Look Up Account</b></h3>\r\n                    <button className=\"modal-close\" \r\n                        onClick={() => {this.props.cancelResetPassword()}}>\r\n                        &times;\r\n                    </button>\r\n                  </div>\r\n                  <div className=\"modal-body\">\r\n                    {this.state.errMsg != \"\" ? <p className=\"emphasis\">{this.state.errorMsg}</p> : null}\r\n                    <form onSubmit={this.handleLookUpAccount}>\r\n                    <label>\r\n                        Account Email Address: \r\n                        <input\r\n                        ref={this.emailRef}\r\n                        className=\"form-control form-text\"\r\n                        type=\"email\"\r\n                        size=\"35\"\r\n                        placeholder=\"Enter Email Address\"\r\n                        pattern=\"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}\"\r\n                        ref={this.emailRef}\r\n                        required={true}\r\n                        />\r\n                    </label>\r\n                    <button type=\"submit\" \r\n                        className=\"btn btn-primary btn-color-theme form-submit-btn\">\r\n                        <span className=\"fa fa-search\"></span>&nbsp;Look Up Account\r\n                    </button>\r\n                    </form>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>  \r\n        );   \r\n    }\r\n\r\n}\r\n\r\nexport default LookUpAccountDialog;\r\n","import React from 'react';\r\n\r\nclass SecurityQuestionDialog extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.securityAnswerRef = React.createRef();\r\n        this.state = {errorMsg: \"\"};\r\n    }\r\n\r\n    //Focus cursor in email secrity answer field when mounted\r\n    componentDidMount() {\r\n        this.securityAnswerRef.current.focus();\r\n    }  \r\n\r\n    handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        if (this.securityAnswerRef.current.value === this.props.answer) {\r\n            this.props.getNewPassword();\r\n        } else {\r\n            this.securityAnswerRef.current.focus();\r\n            this.setState({errorMsg: \"Sorry, that is not the correct answer to the security question. Try again.\"});\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"modal\" role=\"dialog\">\r\n              <div className=\"modal-dialog modal-lg\">\r\n                <div className=\"modal-content\">\r\n                  <div className=\"modal-header\">\r\n                    <h3 className=\"modal-title\"><b>Answer Security Question</b>\r\n                    </h3>\r\n                    <button className=\"modal-close\" \r\n                        onClick={this.props.cancelResetPassword}>\r\n                        &times;\r\n                    </button>\r\n                  </div>\r\n                  <div className=\"modal-body\">\r\n                    {this.state.errorMsg != \"\" ? <p className=\"emphasis\">{this.state.errorMsg}</p> : null} \r\n                    <form onSubmit={this.handleSubmit}>\r\n                    <label>\r\n                        Security Question: \r\n                        <textarea\r\n                        readOnly={true}\r\n                        value={this.props.question}\r\n                        className=\"form-control form-text\"\r\n                        rows=\"3\"\r\n                        cols=\"35\"\r\n                        />\r\n                    </label>\r\n                    <label>\r\n                        Security Answer: \r\n                        <textarea\r\n                        className=\"form-control form-text\"\r\n                        placeholder=\"Enter Security Question Answer\"\r\n                        ref={this.securityAnswerRef}\r\n                        rows=\"3\"\r\n                        cols=\"35\"\r\n                        />\r\n                    </label>\r\n                    <button role=\"submit\" \r\n                      className=\"btn btn-primary btn-color-theme form-submit-btn\">\r\n                        <span className=\"fa fa-check\"></span>&nbsp;Verify Answer\r\n                    </button>\r\n                    </form>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          );        \r\n    }\r\n}\r\n export default SecurityQuestionDialog;","import React from 'react';\r\nimport CreateEditAccountDialog from './CreateEditAccountDialog.js';\r\nimport ResetPasswordDialog from './ResetPasswordDialog.js';\r\nimport LookUpAccountDialog from './LookUpAccountDialog.js';\r\nimport SecurityQuestionDialog from './SecurityQuestionDialog.js';\r\n\r\nclass LoginPage extends React.Component {\r\n\r\nconstructor() {\r\n    super();\r\n    //Create a ref for the email input DOM element\r\n    this.emailInputRef = React.createRef();\r\n    this.resetUserId = \"\";\r\n    this.resetQ = \"\";\r\n    this.resetA = \"\";\r\n    this.passwordInputRef = React.createRef();\r\n    this.state = {statusMsg: \"\",\r\n                  loginBtnIcon: \"fa fa-sign-in\",\r\n                  loginBtnLabel: \"Log In\",\r\n                  showLookUpAccountDialog: false,\r\n                  showSecurityQuestionDialog: false,\r\n                  showResetPaswordDialog: false,\r\n                  githubIcon: \"fa fa-github\",\r\n                  githubLabel: \"Sign in with GitHub\",\r\n                  loginMsg: \"\",\r\n                  newAccountCreated: false\r\n                  };\r\n} \r\n    \r\n//Focus cursor in email input field when mounted\r\ncomponentDidMount() {\r\n    this.emailInputRef.current.focus();\r\n}  \r\n\r\n//handleLoginSubmit -- Called when user clicks on login button.\r\nhandleLoginSubmit = async (event) => {\r\n    event.preventDefault();\r\n    this.setState({loginBtnIcon: \"fa fa-spin fa-spinner\",\r\n                   loginBtnLabel: \"Logging In...\"});\r\n    const url = \"auth/login?username=\" + this.emailInputRef.current.value +\r\n                \"&password=\" + this.passwordInputRef.current.value;\r\n    const res = await fetch(url, {method: 'POST'}); \r\n    if (res.status == 200) { //successful login!\r\n        window.open(\"/\",\"_self\");\r\n    } else { //Unsuccessful login\r\n      const resText = await res.text();\r\n      this.setState({loginBtnIcon: \"fa fa-sign-in\",\r\n                     loginBtnLabel: \"Log In\",\r\n                     statusMsg: resText});\r\n    }\r\n}\r\n\r\n  //accountCreateDone -- Called by child CreateAccountDialog component when \r\n  //user attempted to create new account. Hide the dialog and display \r\n  //a message indicating result of the attempt.\r\n  accountCreateDone = (msg) => {\r\n      this.setState({statusMsg: msg,\r\n                     showCreateAccountDialog: false});\r\n  }\r\n\r\n  //cancelCreateAccount -- Called by child CreateAccountDialog componenet when user decides\r\n  //to cancel creation of new account by clicking the \"X\" in top-right of dialog.\r\n  cancelCreateAccount = () => {\r\n      this.setState({showCreateAccountDialog: false});\r\n  }\r\n\r\n//cancelResetPassword -- Called by one of the child three child dialog box components when\r\n//the user decides to cancel resetting their password. Toggles state so that all three\r\n//of the dialog boxes are hidden\r\ncancelResetPassword = () => {\r\n    this.resetUserId = \"\";\r\n    this.resetQ = \"\";\r\n    this.resetA = \"\";\r\n    this.setState({showLookUpAccountDialog: false,\r\n                   showSecurityQuestionDialog: false,\r\n                   showResetPaswordDialog: false});             \r\n}\r\n\r\n//handleOAuthLogin -- Callback function that initiates contact with OAuth\r\n//provider\r\nhandleOAuthLogin = (provider) => {\r\n    window.open(`/auth/${provider}`,\"_self\");\r\n}\r\n\r\n//handleOAuthLoginClick -- Called whent the user clicks on button to\r\n//authenticate via a third-party OAuth service. The name of the provider is\r\n//passed in as a parameter.\r\nhandleOAuthLoginClick = (provider) => {\r\n   this.setState({[provider + \"Icon\"] : \"fa fa-spin fa-spinner\",\r\n                  [provider + \"Label\"] : \"Connecting...\"});\r\n   setTimeout(() => this.handleOAuthLogin(provider),1000);\r\n}\r\n\r\n//getSecurityAnswer: Given the id, security question, and security answer obtained\r\n//from the LookUpAccountDialog component, update state such that the user will\r\n//next be prompted to enter security question and answer for verification\r\ngetSecurityAnswer = (userId, question, answer) => {\r\n    this.resetUserId = userId;\r\n    this.resetQ = question;\r\n    this.resetA = answer;\r\n    this.setState({showLookUpAccountDialog: false,\r\n                   showSecurityQuestionDialog: true\r\n                });\r\n}\r\n\r\n//getNewPassword-- Called after user successfully provides correct answer\r\n//to security question. Presents the \"Reset Password\" dialog box.\r\ngetNewPassword = () => {\r\n    this.setState({showSecurityQuestionDialog: false,\r\n                    showResetPaswordDialog: true});\r\n}\r\n\r\n//resetPassword--Called after the user successfully enters a new (acceptable)\r\n//password. pw contains the new password. Call on the Update (PUT) server\r\n//route to update the user's password in the database.\r\nresetPassword = async(pw) => {\r\n    const url = \"/users/\" + this.resetUserId;\r\n    const res = await fetch(url, {\r\n        headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json'\r\n            },\r\n        method: 'PUT',\r\n        body: JSON.stringify({password: pw})}); \r\n    if (res.status == 200) { //successful update creation!\r\n        this.setState({showResetPaswordDialog: false,\r\n                       statusMsg: \"Password successfully reset!\"});\r\n    } else { //Unsuccessful account creation\r\n        //Grab textual error message\r\n        const resText = await res.text();\r\n        this.setState({showResetPasswordDialog: false,\r\n                      statusMsg: resText});\r\n    }\r\n    \r\n}\r\n\r\n//newAccountCreated -- Called after successful creation of a new account\r\naccountCreateDone = (msg,deleted) => {\r\n    this.setState({statusMsg: msg,\r\n                   showCreateAccountDialog: false});\r\n}\r\n\r\n//closeStatusMsg -- Called when user clicks on \"x\" to dismiss status message\r\ncloseStatusMsg = () => {\r\n    this.setState({statusMsg: \"\"});\r\n}\r\n\r\n//cancelCreateAccount -- called to hide Create Account dialog without creating acct\r\ncancelCreateAccount = () => {\r\n    this.setState({showCreateAccountDialog: false});\r\n}\r\n\r\n  render() {\r\n    return(\r\n        <div>\r\n        <center>\r\n        {this.state.statusMsg != \"\" ? <div className=\"status-msg\"><span>{this.state.statusMsg}</span>\r\n                       <button className=\"modal-close\" onClick={this.closeStatusMsg}>\r\n                          <span className=\"fa fa-times\"></span>\r\n                        </button></div>: null}\r\n            {this.state.showLookUpAccountDialog ? \r\n              <LookUpAccountDialog cancelResetPassword={this.cancelResetPassword}\r\n                                   getSecurityAnswer={this.getSecurityAnswer}/> : null}\r\n            {this.state.showSecurityQuestionDialog ? \r\n               <SecurityQuestionDialog cancelResetPassword={this.cancelResetPassword}\r\n                                       question={this.resetQ}\r\n                                       answer={this.resetA}\r\n                                       getNewPassword={this.getNewPassword}/> : null}\r\n            {this.state.showResetPaswordDialog ? \r\n              <ResetPasswordDialog cancelResetPassword={this.cancelResetPassword}\r\n                                   resetPassword={this.resetPassword} /> : null}\r\n            <form id=\"loginInterface\" onSubmit={this.handleLoginSubmit}>\r\n            <label htmlFor=\"emailInput\" style={{ padding: 0, fontSize: 24 }}>\r\n                Email:\r\n                <input\r\n                ref={this.emailInputRef}\r\n                className=\"form-control login-text\"\r\n                type=\"email\"\r\n                placeholder=\"Enter Email Address\"\r\n                id=\"emailInput\"\r\n                pattern=\"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}\"\r\n                required={true}\r\n                />\r\n            </label>\r\n            <p />\r\n            <label htmlFor=\"passwordInput\" style={{ padding: 0, fontSize: 24 }}>\r\n                Password:\r\n                <input\r\n                ref={this.passwordInputRef}\r\n                className=\"form-control login-text\"\r\n                type=\"password\"\r\n                placeholder=\"Enter Password\"\r\n                id=\"passwordInput\"\r\n                pattern=\"[A-Za-z0-9!@#$%^&*()_+\\-]+\"\r\n                required={true}\r\n                />\r\n            </label>\r\n            <p className=\"bg-danger\" id=\"feedback\" style={{ fontSize: 16 }} />\r\n            <button\r\n                type=\"submit\"\r\n                className=\"btn-color-theme btn btn-primary btn-block login-btn\">\r\n                <span id=\"login-btn-icon\" className={this.state.loginBtnIcon}/>\r\n                &nbsp;{this.state.loginBtnLabel}\r\n            </button>\r\n            <p>\r\n            <button type=\"button\" className=\"btn btn-link login-link\" \r\n                    onClick={() => {this.setState({showCreateAccountDialog: true});}}>\r\n                Create an account</button> | \r\n                <button type=\"button\" className=\"btn btn-link login-link\"\r\n                        onClick={() => {this.setState({showLookUpAccountDialog: true});}}>\r\n                Reset your password</button>\r\n            </p>  \r\n            <button type=\"button\" className=\"btn btn-github\"\r\n               onClick={() => this.handleOAuthLoginClick(\"github\")}>\r\n              <span className={this.state.githubIcon}></span>&nbsp;\r\n                {this.state.githubLabel}\r\n            </button>\r\n            <p>\r\n                <i>Version CptS 489</i>\r\n            </p>\r\n            </form>\r\n            {this.state.showCreateAccountDialog ? \r\n              <CreateEditAccountDialog\r\n                create={true} \r\n                done={this.accountCreateDone}\r\n                cancel={this.cancelCreateAccount} /> : null}\r\n            {this.state.showResetPasswordDialog ? <ResetPasswordDialog /> : null}\r\n        </center>\r\n        </div>\r\n        )\r\n    }\r\n} \r\n\r\nexport default LoginPage;\r\n","//this component holds the weather station api data\r\n//parent: WeatherFeed\r\n//child: none\r\nimport React from 'react';\r\nrequire('dotenv').config();\r\n\r\nclass WeatherStation extends React.Component {\r\n    \r\n    \r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {latitude: this.props.latitude,\r\n                      longitude: this.props.longitude,\r\n                      \r\n                     };\r\n\r\n        \r\n      }\r\n\r\n    componentDidMount = () => {\r\n      \r\n            this.getCurrentObservations();\r\n       \r\n    }\r\n\r\n    getCurrentObservations = async() => {\r\n\r\n            console.log(\"lat now fetching: \" + this.state.latitude + \" long now fetching: \" + this.state.longitude);\r\n            const response = await fetch('https://api.openweathermap.org/data/2.5/weather?lat=' + \r\n            this.state.latitude + '&lon=' +\r\n            this.state.longitude + '&appid=' + process.env.REACT_APP_API_KEY);\r\n            const currWeather = await response.json();\r\n            this.setState({place: currWeather.name,\r\n    \r\n                         retrieved: (new Date()).toLocaleDateString() + \" at \" + (new Date()).toLocaleTimeString(),\r\n                         conditions: currWeather.weather[0].main,\r\n                         visibility: currWeather.weather.visibility,\r\n                         visibilityUnit: \"Meters\",\r\n                         temp: Math.round(currWeather.main.temp - 273.15),\r\n                         tempUnit: \"C\",\r\n                         humidity: currWeather.main.humidity,\r\n                         visibility: currWeather.visibility,\r\n                         wind: currWeather.wind.speed,\r\n                         windUnit: \"Meters/sec\",\r\n                         windDirection: currWeather.wind.deg,\r\n                         windDirectionUnit: \"Degrees\",\r\n                         units: \"Metric\"\r\n                         });\r\n\r\n\r\n                         \r\n        \r\n    }\r\n    \r\n    toggleUnits = () => {\r\n      if (this.state.units == \"Imperial\") {\r\n          this.setState({\r\n              units: \"Metric\",\r\n              tempUnit: \"C\", \r\n              temp: Math.round((this.state.temp - 32) * 5/9),\r\n              visibility: Math.round(this.state.visibility / 3.28084),\r\n              visibilityUnit: \"Meters\",\r\n              wind: parseFloat(this.state.wind / 3.28084).toFixed(2),\r\n              windUnit: \"Meters/sec\"  });\r\n      } else {\r\n          this.setState({\r\n              units: \"Imperial\",\r\n              tempUnit: \"F\",\r\n              temp: Math.round((this.state.temp * 9/5) + 32),\r\n              visibility: Math.round(this.state.visibility * 3.28084),\r\n              visibilityUnit: \"Feet\",\r\n              wind: parseFloat(this.state.wind * 3.28084).toFixed(2),\r\n              windUnit: \"Feet/sec\" });\r\n      }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div align=\"center\" className=\"jumbotron\"> \r\n\r\n           \r\n            {/* shift up icon */}\r\n            <span className=\"shift-icon fa fa-arrow-up\" onClick={() => this.props.moveStation(this.props.stationId, \"up\")}></span>\r\n\r\n            \r\n\r\n            {/* Delete icon */}\r\n            <span className=\"delete-icon fa fa-times\" onClick={() => this.props.removeStation(this.props.stationId)}></span>\r\n            <h2>Weather Conditions at {this.state.place} </h2>\r\n\r\n\r\n            <h6><i>Last updated: {this.state.retrieved}</i>\r\n            {/* Refresh icon */}\r\n            &nbsp; <span className=\"refresh-icon fa fa-retweet\"\r\n            onClick={() => this.getCurrentObservations()}></span> \r\n            </h6>\r\n\r\n            <h5>Conditions: {this.state.conditions}</h5>\r\n            <h5>Visibility: {this.state.visibility + \" \" + this.state.visibilityUnit}</h5>\r\n            <h5>Temp: {this.state.temp}&deg;&nbsp;{this.state.tempUnit}</h5>\r\n            <h5>Humidity: {this.state.humidity}%</h5>\r\n            <h5>Wind Speed: {this.state.wind + \" \" + this.state.windUnit}</h5>\r\n            <h5>Wind Direction: {this.state.windDirection + \" \" + this.state.windDirectionUnit}</h5>\r\n            <div className=\"custom-control custom-switch\">\r\n                <input type=\"checkbox\" className=\"custom-control-input\" id={\"switch-\" + this.props.stationId} \r\n                     onClick={this.toggleUnits} />\r\n                <label className=\"custom-control-label\" htmlFor={\"switch-\" + this.props.stationId}>&nbsp;{this.state.units}</label>\r\n            </div>\r\n\r\n             {/* shift down icon */}\r\n             <span className=\"shift-icon fa fa-arrow-down\" onClick={() => this.props.moveStation(this.props.stationId, \"down\")}></span>\r\n         </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default WeatherStation;","import React from 'react';\r\nimport WeatherStation from './WeatherStation.js';\r\n\r\nclass FeedPage extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            stations: [],\r\n            stationCount: 0,\r\n            initialFire: true\r\n        };\r\n        this.removeStation = this.removeStation.bind(this);\r\n        this.moveStation = this.moveStation.bind(this);\r\n\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        //Initialize based on user's current location, if possible\r\n        if (this.state.initialFire && !this.props.savedStation) {\r\n            this.loadStations();\r\n        }\r\n        else {\r\n            navigator.geolocation.getCurrentPosition(this.getLocSuccess, this.getLocError);\r\n        }\r\n    }\r\n\r\n    //Called when user agrees to give loc data. We set the first weather\r\n    //station to show conditions at the user's current position.\r\n    getLocSuccess = (position) => {\r\n        this.setState({\r\n            stations: [{\r\n                lat: 47.6062,\r\n                lon: -122.3321,\r\n                stationId: this.state.stationCount + 1\r\n            }],\r\n            stationCount: this.state.stationCount + 1\r\n        });\r\n\r\n    }\r\n\r\n    //Called when user refuses to give access to loc data\r\n    //Initializes first weather station to Seattle in this case\r\n    getLocError = (err) => {\r\n        this.setState({\r\n            stations: [{\r\n                lat: 47.6062,\r\n                lon: -122.3321,\r\n                stationId: this.state.stationCount + 1\r\n            }],\r\n            stationCount: this.state.stationCount + 1\r\n        });\r\n\r\n    }\r\n\r\n    //addStation -- When user clicks on \"+\" button to add a new weather station,\r\n    //prompt the user for the location and attempt to add the requested station.\r\n    // addStation = async () => {\r\n\r\n    //     const newStation = prompt(\"Enter a City, State, and Country:\");\r\n    //     if (newStation != null) { //Need to see if we can find the station through the API \r\n    //         const response = await fetch('https://api.openweathermap.org/data/2.5/weather?q=' +\r\n    //             newStation + '&appid=' + process.env.REACT_APP_API_KEY);\r\n    //         const stationData = await response.json();\r\n    //         //See if the requested station exists\r\n    //         if (stationData != null && stationData.hasOwnProperty('coord')) {\r\n    //             //Push new station into stations list\r\n    //             let newStations = [...this.state.stations];\r\n    //             newStations.push({\r\n    //                 lat: stationData.coord.lat,\r\n    //                 lon: stationData.coord.lon,\r\n    //                 stationId: this.state.stationCount + 1\r\n    //             });\r\n\r\n\r\n    //             this.setState({\r\n    //                 stations: newStations,\r\n    //                 stationCount: this.state.stationCount + 1\r\n    //             }, () => {\r\n    //                 this.writeStations(this.state.stationCount, stationData.coord.lat, stationData.coord.lon);\r\n    //             });\r\n\r\n    //         } else {\r\n    //             alert(\"Sorry, that weather location could not be found.\");\r\n    //         }\r\n    //     }\r\n    // }\r\n\r\n    addNewStation = async (event) => {\r\n\r\n        event.preventDefault();\r\n        // const newStation = prompt(\"Enter a City, State, and Country:\");\r\n        const newStation = document.getElementById('inputStation').value;\r\n        if (newStation != null) { //Need to see if we can find the station through the API \r\n            const response = await fetch('https://api.openweathermap.org/data/2.5/weather?q=' +\r\n                newStation + '&appid=' + process.env.REACT_APP_API_KEY);\r\n            const stationData = await response.json();\r\n            //See if the requested station exists\r\n            if (stationData != null && stationData.hasOwnProperty('coord')) {\r\n                //Push new station into stations list\r\n                let newStations = [...this.state.stations];\r\n                newStations.push({\r\n                    lat: stationData.coord.lat,\r\n                    lon: stationData.coord.lon,\r\n                    stationId: this.state.stationCount + 1\r\n                });\r\n\r\n\r\n                this.setState({\r\n                    stations: newStations,\r\n                    stationCount: this.state.stationCount + 1\r\n                }, () => {\r\n                    this.writeStations(this.state.stationCount, stationData.coord.lat, stationData.coord.lon);\r\n                });\r\n\r\n            } else {\r\n                alert(\"Sorry, that weather location could not be found.\");\r\n            }\r\n        }\r\n        document.searchForLocation.reset()\r\n\r\n    }\r\n\r\n\r\n    //save the stations to localstorage\r\n    writeStations(ids, lats, longs) {\r\n        let thisUser = localStorage.getItem(\"userId\");\r\n        let data = JSON.parse(localStorage.getItem(thisUser));\r\n\r\n        //Initialize empty JavaScript object to store new or updated station\r\n        let thisStation = {}; //iniitalize empty object for this station\r\n\r\n        for (let i = 0; i < ids.length; i++) {\r\n            //Store the data\r\n            thisStation.id = ids[i];\r\n            thisStation.latitude = lats[i];\r\n            thisStation.longitude = longs[i];\r\n\r\n            data.weatherStations[i + 1] = thisStation;\r\n            data.weatherStationCount = ids.length;\r\n            localStorage.setItem(thisUser, JSON.stringify(data));\r\n            thisStation = {};\r\n        }\r\n    }\r\n\r\n    //remove stations from array of weatherstations\r\n    removeStation(stationId) {\r\n\r\n        let newStations = [...this.state.stations];\r\n\r\n        for (let i = 0; i < newStations.length; i++) {\r\n\r\n            if (newStations[i].stationId == stationId) {\r\n                newStations.splice(i, 1);\r\n            }\r\n        }\r\n\r\n        //update state\r\n        this.setState({\r\n            stations: newStations,\r\n            stationCount: this.state.stationCount - 1\r\n        }, () => {\r\n\r\n        });\r\n    }\r\n\r\n    //move the station up or down based on direction/buton clicked\r\n    moveStation(stationId, direction) {\r\n\r\n        let newStations = [...this.state.stations];\r\n\r\n        if (direction == \"up\") {\r\n\r\n            if (stationId != newStations[0].stationId) {\r\n\r\n                for (let i = 0; i < newStations.length; i++) {\r\n                    if (newStations[i].stationId == stationId) {\r\n\r\n                        var x = i;\r\n                        var y = i - 1;\r\n                        //swap\r\n                        [newStations[x], newStations[y]] = [newStations[y], newStations[x]];\r\n                    }\r\n                }\r\n\r\n                //update array\r\n                this.setState({ stations: newStations }, () => {\r\n\r\n                });\r\n            }\r\n        }\r\n        else {\r\n            if (stationId != newStations[newStations.length - 1].stationId) {\r\n                for (let i = 0; i < newStations.length; i++) {\r\n                    if (newStations[i].stationId == stationId) {\r\n                        var x = i;\r\n                        var y = i + 1;\r\n\r\n                        //swap\r\n                        [newStations[x], newStations[y]] = [newStations[y], newStations[x]];\r\n                        break;\r\n\r\n                    }\r\n                }\r\n\r\n                //update array\r\n                this.setState({ stations: newStations }, () => {\r\n\r\n                });\r\n            }\r\n        }\r\n\r\n\r\n    }\r\n\r\n    //load stations from localstorage into array of weather stations\r\n    loadStations() {\r\n\r\n\r\n        let thisUser = localStorage.getItem(\"userId\");\r\n        let data = JSON.parse(localStorage.getItem(thisUser));\r\n\r\n        //check if null if first time logging in\r\n        if (data != null) {\r\n            let rows = [];\r\n\r\n\r\n            for (let i = 0; i < data.weatherStationCount; i++) {\r\n                var keyid = i + 1;\r\n                rows.push({\r\n                    lat: Number.parseFloat(data.weatherStations[keyid].latitude),\r\n                    lon: Number.parseFloat(data.weatherStations[keyid].longitude),\r\n                    stationId: keyid,\r\n                });\r\n            }\r\n            console.log(rows);\r\n\r\n            //set the new array to state\r\n            this.setState({\r\n                stations: rows,\r\n                stationCount: rows.length,\r\n                initialFire: false\r\n            }, () => {\r\n\r\n            });\r\n        }\r\n\r\n\r\n\r\n    }\r\n\r\n    render() {\r\n\r\n        let rows = [];\r\n        let ids = [];\r\n        let lats = [];\r\n        let longs = [];\r\n\r\n        for (let i = 0; i < this.state.stations.length; i++) {\r\n            ids.push(this.state.stations[i].stationId);\r\n            lats.push(this.state.stations[i].lat);\r\n            longs.push(this.state.stations[i].lon);\r\n\r\n            rows.push(<WeatherStation key={this.state.stations[i].stationId}\r\n                latitude={this.state.stations[i].lat}\r\n                longitude={this.state.stations[i].lon}\r\n                stationId={this.state.stations[i].stationId}\r\n                moveStation={this.moveStation}\r\n                removeStation={this.removeStation} />);\r\n        }\r\n\r\n\r\n\r\n\r\n        if (this.state.initialFire == false) {\r\n\r\n            let thisUser = localStorage.getItem(\"userId\");\r\n            let data = JSON.parse(localStorage.getItem(thisUser));\r\n\r\n            //set to null and resave to make things easier\r\n            data = null;\r\n            this.writeStations(ids, lats, longs);\r\n        }\r\n\r\n        //if theres no stations, we want to fire componentDidMount\r\n        if (this.state.stationCount == 0) {\r\n            this.componentDidMount();\r\n        }\r\n\r\n        return (\r\n            <div id=\"main\">\r\n\r\n                {/* <div className=\"floatButton\" id=\"floatBtnDiv\">\r\n                    <a className=\"float\" id=\"addStationBtn\" onClick={this.addStation}>\r\n                        <span className=\"float-btn-icon fa fa-plus\" id=\"floatBtnIcon\"></span>\r\n                    </a>\r\n                </div> */}\r\n\r\n                <form name=\"searchForLocation\" onSubmit={this.addNewStation}>\r\n                    {/* <button onClick={this.addNewStation}><span className=\"fa fa-search\"></span></button> */}\r\n                    <input type=\"newLocation\" id=\"inputStation\" placeholder=\"Enter a City, State, and Country...\"></input>\r\n\r\n                </form>\r\n\r\n                <div id=\"weatherStations\">\r\n                    {rows}\r\n                </div>\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\nexport default FeedPage;","import React from 'react';\r\n\r\nclass ConfirmDeleteRound extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n        <div id=\"aboutModal\" className=\"modal\" role=\"dialog\">\r\n        <div className=\"modal-content\">\r\n            <div className=\"modal-header\">\r\n              <center>\r\n                <h3 className=\"modal-title\"><b>Confirm Round Deletion</b></h3>\r\n              </center>\r\n               <button id=\"modalClose\" className=\"modal-close\" onClick={this.props.close}>\r\n                 &times;</button>\r\n            </div>\r\n            <div className=\"modal-body\">\r\n              <p>Do you really want to delete this round?</p>\r\n            </div>\r\n            <div className=\"modal-footer\">\r\n                  <button className=\"btn btn-danger\" onClick={this.props.deleteRound}>\r\n                  Yes, Delete</button>\r\n                  <button className=\"btn btn-secondary\" onClick={this.props.close}>\r\n                  No, Cancel</button>\r\n            </div>\r\n        </div>\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ConfirmDeleteRound;","import React from 'react';\r\nimport ConfirmDeleteRound from './ConfirmDeleteRound.js';\r\nimport AppMode from './../AppMode.js';\r\n\r\nclass RoundsTable extends React.Component {\r\n\r\n  constructor() {\r\n    super();\r\n    this.state = {showConfirmDelete: false};\r\n  }\r\n\r\n  //editRound -- Triggered when the user clicks the edit button for a given\r\n  //round. The id param is the unique property that identifies the round.\r\n  //Set the state variable representing the id of the round to be edited and\r\n  //then switch to the ROUNDS_EDITROUND mode to allow the user to edit the\r\n  //chosen round.\r\n  editRound = (id) => {\r\n    this.props.setEditId(id);\r\n    this.props.changeMode(AppMode.ROUNDS_EDITROUND);\r\n  }\r\n\r\n  //deleteRound -- Triggered when the user clicks on the \"Yes, Delete\"\r\n  //button in the Confirm Delete dialog box. It executes the deletion and\r\n  //closes the dialog box.\r\n  deleteRound = () => {\r\n    this.props.deleteRound();\r\n    this.setState({showConfirmDelete: false});\r\n  }\r\n\r\n\r\n  //confirmDelete -- Triggered when the user clicks the delete button\r\n  //for a given round. The id paam is the unique property that \r\n  //identifies the round. Set the state variable representing the id\r\n  //of the round to be deleted and then present a dialog box asking\r\n  //the user to confirm the deletion.\r\n  confirmDelete = (id) => {\r\n    this.props.setDeleteId(id);\r\n    this.setState({showConfirmDelete: true});\r\n  }\r\n\r\n\r\n  //renderTable -- render an HTML table displaying the rounds logged\r\n  //by the current user and providing buttons to view/edit and delete each round.\r\n  renderTable = () => {\r\n  let table = [];\r\n  for (let r = 0; r < this.props.rounds.length; ++r) {\r\n    table.push(\r\n      <tr key={r}>\r\n        <td>{this.props.rounds[r].date.substring(0,10)}</td>\r\n        <td>{this.props.rounds[r].course}</td>\r\n        <td>{(Number(this.props.rounds[r].strokes) + \r\n              Number(this.props.rounds[r].minutes)) +\r\n              \":\" + (this.props.rounds[r].seconds < 10 ?  \r\n                \"0\" + this.props.rounds[r].seconds :\r\n                this.props.rounds[r].seconds) + \" (\" + \r\n              this.props.rounds[r].strokes + \r\n              \" in \" + this.props.rounds[r].minutes + \":\" + \r\n              (this.props.rounds[r].seconds < 10 ?  \r\n                \"0\" + this.props.rounds[r].seconds :\r\n                this.props.rounds[r].seconds) + \")\"}\r\n        </td>\r\n        <td><button onClick={this.props.menuOpen ? null : () => \r\n          this.editRound(r)}>\r\n              <span className=\"fa fa-eye\"></span></button></td>\r\n        <td><button onClick={this.props.menuOpen ? null : \r\n          () => this.confirmDelete(r)}>\r\n              <span className=\"fa fa-trash\"></span></button></td>\r\n      </tr> \r\n    );\r\n  }\r\n  return table;\r\n  }\r\n\r\n  //render--render the entire rounds table with header, displaying a \"No\r\n  //Rounds Logged\" message in case the table is empty.\r\n  render() {\r\n    return(\r\n    <div className=\"padded-page\">\r\n      <h1></h1>\r\n      <table className=\"table table-hover\">\r\n        <thead className=\"thead-light\">\r\n        <tr>\r\n          <th>Date</th>\r\n          <th>Location</th>\r\n          <th>Weather Condition</th>\r\n          <th>Temperature</th>\r\n          <th>Wind Speed</th>\r\n          <th>Humidity</th>\r\n          {/* <th>View/Edit...</th> */}\r\n          <th>Delete</th>\r\n        </tr>\r\n        </thead>\r\n        <tbody>\r\n          {Object.keys(this.props.rounds).length === 0 ? \r\n          <tr>\r\n          <td colSpan=\"5\" style={{fontStyle: \"italic\"}}>No rounds logged</td>\r\n          </tr> : this.renderTable()\r\n          }\r\n        </tbody>\r\n      </table>\r\n      {this.state.showConfirmDelete ?\r\n        <ConfirmDeleteRound \r\n          close={() => this.setState({showConfirmDelete: false})} \r\n          deleteRound={this.deleteRound} /> : null}\r\n    </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default RoundsTable;\r\n","import React from 'react';\r\nimport AppMode from './../AppMode.js';\r\n\r\nclass RoundForm extends React.Component {\r\n  constructor(props) {\r\n  super(props);\r\n  //Create date object for today, taking time zone into consideration\r\n  let today = new Date(Date.now()-(new Date()).getTimezoneOffset()*60000);\r\n  //store date as ISO string\r\n  if (this.props.mode === AppMode.ROUNDS_LOGROUND) {\r\n    //If logging a new round, the starting state is a default round with\r\n    //today's date.\r\n    this.state = {date:  today.toISOString().substr(0,10), \r\n                  course: \"\",\r\n                  type: \"practice\",\r\n                  holes: \"18\",\r\n                  strokes: 80,\r\n                  minutes: 50,\r\n                  seconds: \"00\",\r\n                  notes: \"\",\r\n                  faIcon: \"fa fa-save\",\r\n                  btnLabel: \"Save Round Data\"}\r\n  } else {\r\n    //if editing an existing round, the starting state is the round's\r\n    //current data\r\n    let thisRound = {...this.props.startData};\r\n    delete thisRound.id;\r\n    thisRound.faIcon = \"fa fa-edit\";\r\n    thisRound.btnLabel = \"Update Round Data\";\r\n    this.state = thisRound;\r\n  }\r\n}\r\n  \r\n  \r\n    handleChange = (event) => {\r\n        const name = event.target.name;\r\n        if (name === \"seconds\") {\r\n          let newSec = (event.target.value.length < 2 ? \"0\" + \r\n            event.target.value : event.target.value);\r\n          let newSGS = this.computeSGS(this.state.strokes, this.state.minutes, \r\n                                       newSec);\r\n          this.setState({seconds: newSec, SGS: newSGS});\r\n        } else if (name === \"strokes\") {\r\n          let newStrokes = event.target.value;\r\n          let newSGS = this.computeSGS(newStrokes, this.state.minutes, \r\n            this.state.seconds);\r\n          this.setState({strokes: newStrokes, SGS: newSGS});\r\n        } else if (name === \"minutes\") {\r\n            let newMin = event.target.value;\r\n            let newSGS = this.computeSGS(this.state.strokes, newMin, \r\n              this.state.seconds);\r\n            this.setState({minutes: newMin, SGS: newSGS});\r\n        } else {\r\n          this.setState({[name]: event.target.value});\r\n        }\r\n    }\r\n  \r\n  \r\n    //handleSubmit -- When the user clicks on the button to save/update the\r\n    //round, start the spinner and invoke the parent component's saveRound\r\n    //method to do the actual work. Note that saveRound is set to the correct\r\n    //parent method based on whether the user is logging a new round or editing\r\n    //an existing round.\r\n    handleSubmit = (event) => {\r\n        //start spinner\r\n        this.setState({faIcon: \"fa fa-spin fa-spinner\",\r\n                        btnLabel: (this.props.mode === AppMode.ROUNDS_LOGROUND ? \r\n                                    \"Saving...\" : \"Updating...\")});\r\n        //Prepare current round data to be saved\r\n        let roundData = this.state;\r\n        delete roundData.faIcon;\r\n        delete roundData.btnLabel;\r\n        //call saveRound on 1 second delay to show spinning icon\r\n        setTimeout(this.props.saveRound,1000,roundData); \r\n        event.preventDefault(); \r\n        }\r\n  \r\n\r\n    computeSGS = (strokes, min, sec) => {\r\n      return (Number(strokes) + Number(min)) \r\n                  + \":\" + sec;\r\n    }\r\n  \r\n    render() {\r\n      return (\r\n        <form className=\"padded-page\" onSubmit={this.handleSubmit}>\r\n          <center>\r\n            <label>\r\n              Date:\r\n              <input name=\"date\" className=\"form-control form-center\" \r\n                type=\"date\" value={this.state.date} onChange={this.handleChange} />\r\n            </label>\r\n            <p></p>\r\n            <label>\r\n              Course:\r\n              <input name=\"course\" className=\"form-control form-center\" type=\"text\"\r\n                value={this.state.course} onChange={this.handleChange}\r\n                placeholder=\"Course played\" size=\"50\" maxLength=\"50\" />\r\n            </label>\r\n          <p></p>\r\n          <label>Type:\r\n          <select name=\"type\" value={this.state.type} \r\n            className=\"form-control form-center\" onChange={this.handleChange}>\r\n            <option value=\"practice\">Practice</option>\r\n            <option value=\"tournament\">Tournament</option>\r\n          </select> \r\n          </label>\r\n          <p></p>\r\n          <label># Holes:\r\n          <select name=\"holes\" value={this.state.holes} \r\n            className=\"form-control form-center\" onChange={this.handleChange}>\r\n            <option value=\"9\">9</option>\r\n            <option value=\"18\">18</option>\r\n          </select> \r\n          </label>\r\n          <p></p>\r\n          <label># Strokes:\r\n          <input name=\"strokes\" className=\"form-control form-center\" type=\"number\" \r\n            min=\"9\" max=\"200\" value={this.state.strokes} \r\n            onChange={this.handleChange} />\r\n          </label>\r\n          <p></p>\r\n          <label>Time: <br></br>\r\n          <input name=\"minutes\" type=\"number\" size=\"3\"\r\n            min=\"10\" max=\"400\" value={this.state.minutes}\r\n            onChange={this.handleChange} />:  \r\n          <input name=\"seconds\" type=\"number\" size=\"2\"\r\n            min=\"0\" max=\"60\" value={this.state.seconds} \r\n            onChange={this.handleChange} />\r\n          </label>\r\n          <p></p>\r\n          <label>Speedgolf Score: <br></br>\r\n              <input name=\"SGS\" className=\"form-center\" type=\"text\" size=\"6\" \r\n                disabled={true} value={this.computeSGS(this.state.strokes,this.state.minutes,this.state.seconds)} />\r\n          </label>\r\n          <p></p>\r\n          <label>Notes:\r\n              <textarea name=\"notes\" className=\"form-control\" rows=\"6\" cols=\"75\" \r\n                placeholder=\"Enter round notes\" value={this.state.notes} \r\n                onChange={this.handleChange} />\r\n          </label>\r\n          <p></p>\r\n          <p></p>\r\n          <button type=\"submit\" style={{width: \"70%\",fontSize: \"36px\"}} \r\n            className=\"btn btn-primary btn-color-theme\">\r\n              <span className={this.state.faIcon}/>&nbsp;{this.state.btnLabel}\r\n          </button>\r\n          </center>\r\n        </form>\r\n      );\r\n    }\r\n}\r\n\r\nexport default RoundForm;","import React from 'react';\r\n\r\nclass FloatingButton extends React.Component {\r\n    render() {\r\n      return(\r\n        <div className=\"floatbtn\" onClick={this.props.handleClick}>\r\n          <span className=\"floatbtn-icon fa fa-plus\"></span>\r\n        </div>  \r\n      );\r\n    }\r\n}\r\n\r\nexport default FloatingButton;\r\n","//Rounds -- A parent component for the app's \"rounds\" mode.\r\n//Manages the rounds data for the current user and conditionally renders the\r\n//appropriate rounds mode page based on App's mode, which is passed in as a prop.\r\n\r\nimport React from 'react';\r\nimport AppMode from './../AppMode.js';\r\nimport RoundsTable from './RoundsTable.js';\r\nimport RoundForm from './RoundForm.js';\r\nimport FloatingButton from './FloatingButton.js';\r\n\r\nclass Rounds extends React.Component {\r\n\r\n    //Initialize a Rounds object based on local storage\r\n    constructor() {\r\n        super();\r\n        this.deleteId = \"\";\r\n        this.editId = \"\";\r\n        this.state = {errorMsg: \"\"};           \r\n    }\r\n\r\n    //addRound -- Given an object newData containing a new round, use the \r\n    //server POST route to add the new round to the database. If the add is\r\n    //successful, call on the refreshOnUpdate() method to force the parent\r\n    //App component to refresh its state from the database and re-render itself,\r\n    //allowing the change to be propagated to the Rounds table. Then switch\r\n    //the mode back to AppMode.ROUNDS since the user is done adding a round.\r\n    addRound = async (newData) => {\r\n        const url = '/rounds/' + this.props.userObj.id;\r\n        const res = await fetch(url, {\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n                },\r\n            method: 'POST',\r\n            body: JSON.stringify(newData)}); \r\n        const msg = await res.text();\r\n        if (res.status != 200) {\r\n            this.setState({errorMsg: msg});\r\n            this.props.changeMode(AppMode.ROUNDS);\r\n        } else {\r\n            this.setState({errorMsg: \"\"});\r\n            this.props.refreshOnUpdate(AppMode.ROUNDS);\r\n        }\r\n    }\r\n\r\n    //editRound -- Given an object newData containing updated data on an\r\n    //existing round, update the current user's round in the database. \r\n    //toggle the mode back to AppMode.ROUNDS since the user is done editing the\r\n    //round. \r\n    editRound = async (newData) => {\r\n        const url = '/rounds/' + this.props.userObj.id + '/' + \r\n            this.props.userObj.rounds[this.editId]._id;\r\n        const res = await fetch(url, {\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n                },\r\n            method: 'PUT',\r\n            body: JSON.stringify(newData)}); \r\n        const msg = await res.text();\r\n        if (res.status != 200) {\r\n            this.setState({errorMsg: msg});\r\n            this.props.changeMode(AppMode.ROUNDS);\r\n        } else {\r\n            this.props.refreshOnUpdate(AppMode.ROUNDS);\r\n        }\r\n    }\r\n\r\n\r\n    //deleteRound -- Delete the current user's round uniquely identified by\r\n    //this.state.deleteId, delete from the database, and reset deleteId to empty.\r\n    deleteRound = async () => {\r\n        const url = '/rounds/' + this.props.userObj.id + '/' + \r\n            this.props.userObj.rounds[this.deleteId]._id;\r\n        const res = await fetch(url, {method: 'DELETE'}); \r\n        const msg = await res.text();\r\n        if (res.status != 200) {\r\n            this.setState({errorMsg: \"An error occurred when attempting to delete round from database: \" \r\n            + msg});\r\n            this.props.changeMode(AppMode.ROUNDS);\r\n        } else {\r\n            this.props.refreshOnUpdate(AppMode.ROUNDS);\r\n        }  \r\n    }\r\n \r\n    //setDeleteId -- Capture in this.state.deleteId the unique id of the item\r\n    //the user is considering deleting.\r\n    setDeleteId = (val) => {\r\n        this.deleteId = val;\r\n        this.setState({errorMsg: \"\"});\r\n    }\r\n\r\n    //setEditId -- Capture in this.state.editId the unique id of the item\r\n    //the user is considering editing.\r\n    setEditId = (val) => {\r\n        this.editId = val;\r\n        this.setState({errorMsg: \"\"});\r\n    }\r\n\r\n    closeErrorMsg = () => {\r\n        this.setState({errorMsg: \"\"});\r\n    }\r\n    \r\n    //render -- Conditionally render the Rounds mode page as either the rounds\r\n    //table, the rounds form set to obtain a new round, or the rounds form set\r\n    //to edit an existing round.\r\n    render() {\r\n        switch(this.props.mode) {\r\n            case AppMode.ROUNDS:\r\n                return (\r\n                    <>\r\n                    {this.state.errorMsg != \"\" ? <div className=\"status-msg\"><span>{this.state.errorMsg}</span>\r\n                       <button className=\"modal-close\" onClick={this.closeErrorMsg}>\r\n                          <span className=\"fa fa-times\"></span>\r\n                        </button></div>: null}\r\n                    <RoundsTable \r\n                        rounds={this.props.userObj.rounds}\r\n                        setEditId={this.setEditId}\r\n                        setDeleteId={this.setDeleteId}\r\n                        deleteRound={this.deleteRound}\r\n                        changeMode={this.props.changeMode}\r\n                        menuOpen={this.props.menuOpen} /> \r\n                    <FloatingButton\r\n                        handleClick={() => \r\n                        this.props.changeMode(AppMode.ROUNDS_LOGROUND)}\r\n                        menuOpen={this.props.menuOpen}\r\n                        icon={\"fa fa-plus\"} />\r\n                    </>\r\n                );\r\n            case AppMode.ROUNDS_LOGROUND:\r\n                return (\r\n                    <RoundForm\r\n                        mode={this.props.mode}\r\n                        startData={\"\"} \r\n                        saveRound={this.addRound} />\r\n                );\r\n            case AppMode.ROUNDS_EDITROUND:\r\n                let thisRound = {...this.props.userObj.rounds[this.editId]};\r\n                thisRound.date = thisRound.date.substr(0,10);\r\n                if (thisRound.seconds < 10) {\r\n                    thisRound.seconds = \"0\" + thisRound.seconds;\r\n                } \r\n                delete thisRound.SGS;\r\n                return (\r\n                    <RoundForm\r\n                        mode={this.props.mode}\r\n                        startData={thisRound} \r\n                        saveRound={this.editRound} />\r\n                );\r\n        }\r\n    }\r\n\r\n}   \r\n\r\nexport default Rounds;\r\n","import React from 'react';\r\n\r\nclass CoursesPage extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n        <div className=\"padded-page\">\r\n            <center>\r\n            <h1 >Courses</h1>\r\n            <h2>This page is under construction.</h2>\r\n            <img src=\"https://dl.dropboxusercontent.com/s/qpjhy9x9gwdxpob/SpeedScoreLogo64Trans.png\" \r\n             height=\"200\" width=\"200\"/>\r\n            <p style={{fontStyle: \"italic\"}}>Version CptS 489 React Demo</p>\r\n            </center>\r\n        </div>\r\n        );\r\n    }   \r\n}\r\n\r\nexport default CoursesPage;","import React from 'react';\r\n\r\nclass AboutBox extends React.Component {\r\n\r\nrender() {\r\n    return (\r\n        <div className=\"modal\" role=\"dialog\">\r\n        <div className=\"modal-dialog modal-lg\">\r\n            <div className=\"modal-content\">\r\n            <div className=\"modal-header\">\r\n                <h3>About SpeedScore</h3>\r\n                <button className=\"modal-close\" onClick={this.props.close}>\r\n                    &times;\r\n                </button>\r\n            </div>\r\n            <div className=\"modal-body\">\r\n                <img\r\n                src=\"https://dl.dropboxusercontent.com/s/awuwr1vpuw1lkyl/SpeedScore4SplashLogo.png\"\r\n                height=\"200\" width=\"200\"/>\r\n                <h3>The World's First and Only Suite of Apps for\r\n                Speedgolf</h3>\r\n                <p>Version CptS 489 Fa20 Complete (MERN)<br/>\r\n                &copy; 2017-20 The Professor of Speedgolf. All rights\r\n                reserved.\r\n                </p>\r\n                <div style={{textAlign: \"left\"}}>\r\n                <p>SpeedScore apps support</p>\r\n                <ul>\r\n                <li>live touranment scoring (<i>SpeedScore Live&reg;</i>)</li>\r\n                <li>tracking personal speedgolf rounds and sharing results\r\n                (<i>SpeedScore Track&reg;</i>)</li>\r\n                <li>finding speedgolf-friendly courses, booking tee times, and\r\n                paying to play speedgolf by the minute (<i>SpeedScore\r\n                Play&reg;</i>)</li>\r\n                </ul>\r\n                <p>SpeedScore was first developed by Dr. Chris Hundhausen,\r\n                associate professor of computer science at Washington State\r\n                University and the <i>Professor of Speedgolf</i>, with support\r\n                from Scott Dawley, CEO of Speedgolf USA, LLC.</p>\r\n                <p>For more information on SpeedScore, visit <a\r\n                href=\"http://speedscore.live\" target=\"_blank\">SpeedScore's web\r\n                site</a>. For more information on speedgolf, visit <a\r\n                href=\"http://playspeedgolf.com\"\r\n                target=\"_blank\">playspeedgolf.com</a> and <a\r\n                href=\"http://usaspeedgolf.com\" target=\"_blank\">Speedgolf\r\n                USA</a>.</p>\r\n                </div>\r\n            </div>\r\n            <div className=\"modal-footer\">\r\n                <button className=\"btn btn-primary btn-color-theme\"\r\n                onClick={this.props.close}>OK</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        </div>\r\n    );\r\n    }\r\n}\r\n\r\nexport default AboutBox;","import React from 'react';\r\nimport NavBar from './NavBar.js';\r\nimport SideMenu from './SideMenu.js';\r\nimport ModeBar from './ModeBar.js';\r\nimport CreateEditAccountDialog from './CreateEditAccountDialog.js'\r\nimport LoginPage from './LoginPage.js';\r\nimport AppMode from \"./../AppMode.js\"\r\nimport FeedPage from './FeedPage.js';\r\nimport Rounds from './Rounds.js';\r\nimport CoursesPage from './CoursesPage.js';\r\nimport AboutBox from './AboutBox.js';\r\n\r\nconst modeTitle = {};\r\n\r\nmodeTitle[AppMode.LOGIN] = \"Welcome to Some Weather App\";\r\nmodeTitle[AppMode.FEED] = \"Search\";\r\nmodeTitle[AppMode.ROUNDS] = \"Favorites\";\r\nmodeTitle[AppMode.ROUNDS_LOGROUND] = \"New Favorite\";\r\nmodeTitle[AppMode.ROUNDS_EDITROUND] = \"Edit Favorites\";\r\nmodeTitle[AppMode.COURSES] = \"Weather History\";\r\n\r\n\r\nconst modeToPage = {};\r\nmodeToPage[AppMode.LOGIN] = LoginPage;\r\nmodeToPage[AppMode.FEED] = FeedPage;\r\nmodeToPage[AppMode.ROUNDS] = Rounds;\r\nmodeToPage[AppMode.ROUNDS_LOGROUND] = Rounds;\r\nmodeToPage[AppMode.ROUNDS_EDITROUND] = Rounds;\r\nmodeToPage[AppMode.COURSES] = CoursesPage;\r\n\r\n\r\nclass App extends React.Component {\r\n\r\n  constructor() {\r\n    super();\r\n    this.state = {mode: AppMode.LOGIN,\r\n                  menuOpen: false,\r\n                  authenticated: false,\r\n                  userObj: {displayName: \"\", profilePicURL: \"\"},\r\n                  editAccount: false,\r\n                  showEditAccountDialog: false,\r\n                  statusMsg: \"\",\r\n                  showAboutDialog: false\r\n                 };\r\n  }\r\n\r\n  //componentDidMount\r\n  componentDidMount() {\r\n    if (!this.state.authenticated) { \r\n      //Use /auth/test route to (re)-test authentication and obtain user data\r\n      fetch(\"/auth/test\")\r\n        .then((response) => response.json())\r\n        .then((obj) => {\r\n          if (obj.isAuthenticated) {\r\n            this.setState({\r\n              userObj: obj.user,\r\n              authenticated: true,\r\n              mode: AppMode.FEED //We're authenticated so can get into the app.\r\n            });\r\n          }\r\n        }\r\n      )\r\n    } \r\n  }\r\n\r\n  //refreshOnUpdate(newMode) -- Called by child components when user data changes in \r\n  //the database. The function calls the users/:userid (GET) route to update \r\n  //the userObj state var based on the latest database changes, and sets the \r\n  //mode state var is set to newMode. After this method is called, the\r\n  //App will re-render itself, forcing the new data to \r\n  //propagate to the child components when they are re-rendered.\r\n  refreshOnUpdate = async(newMode) => {\r\n    let response = await fetch(\"/users/\" + this.state.userObj.id);\r\n    response = await response.json();\r\n    const obj = JSON.parse(response);\r\n    this.setState({\r\n      userObj: obj,\r\n      mode: newMode\r\n    });\r\n  }\r\n\r\n\r\n  handleChangeMode = (newMode) => {\r\n    this.setState({mode: newMode});\r\n  }\r\n\r\n  openMenu = () => {\r\n    this.setState({menuOpen : true});\r\n  }\r\n  \r\n  closeMenu = () => {\r\n    this.setState({menuOpen : false});\r\n  }\r\n\r\n  toggleMenuOpen = () => {\r\n    this.setState(prevState => ({menuOpen: !prevState.menuOpen}));\r\n  }\r\n\r\n  setUserId = (Id) => {\r\n    this.setState({userId: Id,\r\n                   authenticated: true});\r\n  }\r\n\r\n  showEditAccount = () => {\r\n    this.setState({showEditAccountDialog: true});\r\n\r\n  }\r\n\r\n  cancelEditAccount = () => {\r\n    this.setState({showEditAccountDialog: false});\r\n  }\r\n\r\n  //editAccountDone -- called after successful edit or\r\n  //deletion of user account. msg contains the status\r\n  //message and deleted indicates whether an account was\r\n  //edited (deleted == false) or deleted (deleted == true)\r\n  editAccountDone = (msg, deleted) => {\r\n    if (deleted) {\r\n      this.setState({showEditAccountDialog: false,\r\n                     statusMsg: msg,\r\n                     mode: AppMode.LOGIN});\r\n      } else {\r\n        this.setState({showEditAccountDialog: false,\r\n          statusMsg: msg});\r\n      }\r\n  }\r\n\r\n  closeStatusMsg = () => {\r\n    this.setState({statusMsg: \"\"});\r\n  }\r\n\r\n  render() {\r\n    const ModePage = modeToPage[this.state.mode];\r\n    return (\r\n      <div className=\"padded-page\">\r\n        {this.state.showAboutDialog ? \r\n          <AboutBox close={() => this.setState({showAboutDialog: false})}/> : null}\r\n        {this.state.statusMsg != \"\" ? <div className=\"status-msg\">\r\n              <span>{this.state.statusMsg}</span>\r\n              <button className=\"modal-close\" onClick={this.closeStatusMsg}>\r\n                  <span className=\"fa fa-times\"></span></button></div> : null}\r\n        {this.state.showEditAccountDialog ? \r\n            <CreateEditAccountDialog \r\n              create={false} \r\n              userId={this.state.userObj.id} \r\n              done={this.editAccountDone} \r\n              cancel={this.cancelEditAccount}/> : null}\r\n        <NavBar \r\n          title={modeTitle[this.state.mode]} \r\n          mode={this.state.mode}\r\n          changeMode={this.handleChangeMode}\r\n          menuOpen={this.state.menuOpen}\r\n          toggleMenuOpen={this.toggleMenuOpen}/>\r\n          <SideMenu \r\n            menuOpen = {this.state.menuOpen}\r\n            mode={this.state.mode}\r\n            toggleMenuOpen={this.toggleMenuOpen}\r\n            displayName={this.state.userObj.displayName}\r\n            profilePicURL={this.state.userObj.profilePicURL}\r\n            localAccount={this.state.userObj.authStrategy === \"local\"}\r\n            editAccount={this.showEditAccount}\r\n            logOut={() => this.handleChangeMode(AppMode.LOGIN)}\r\n            showAbout={() => {this.setState({showAboutDialog: true})}}/>\r\n          <ModeBar \r\n            mode={this.state.mode} \r\n            changeMode={this.handleChangeMode}\r\n            menuOpen={this.state.menuOpen}/>\r\n          <ModePage \r\n            menuOpen={this.state.menuOpen}\r\n            mode={this.state.mode}\r\n            changeMode={this.handleChangeMode}\r\n            userObj={this.state.userObj}\r\n            refreshOnUpdate={this.refreshOnUpdate}/>\r\n      </div>\r\n    );  \r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport 'bootstrap-social/bootstrap-social.css';\r\nimport 'font-awesome/css/font-awesome.min.css';\r\nimport './styles/index.css';\r\nimport App from './components/App.js';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}